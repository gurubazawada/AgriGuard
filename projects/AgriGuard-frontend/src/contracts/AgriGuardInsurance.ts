/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"AgriGuardInsurance","structs":{"PolicyData":[{"name":"owner","type":"address"},{"name":"zipCode","type":"string"},{"name":"t0","type":"uint64"},{"name":"t1","type":"uint64"},{"name":"cap","type":"uint64"},{"name":"direction","type":"uint64"},{"name":"threshold","type":"uint64"},{"name":"slope","type":"uint64"},{"name":"feePaid","type":"uint64"},{"name":"settled","type":"uint64"}]},"methods":[{"name":"create_application","args":[{"type":"address","name":"admin"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"desc":"Initialize the application with admin","events":[],"recommendations":{}},{"name":"set_oracle","args":[{"type":"address","name":"oracle"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Set oracle account (admin only)","events":[],"recommendations":{}},{"name":"buy_policy_with_payment","args":[{"type":"byte[]","name":"zip_code"},{"type":"uint64","name":"t0"},{"type":"uint64","name":"t1"},{"type":"uint64","name":"cap"},{"type":"uint64","name":"direction"},{"type":"uint64","name":"threshold"},{"type":"uint64","name":"slope"},{"type":"uint64","name":"fee"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Buy insurance policy with integrated payment using group transaction\nExpects to be called as part of a group transaction where: - Transaction 1: Payment from user to contract - Transaction 2: This function call","events":[],"recommendations":{}},{"name":"buy_policy","args":[{"type":"byte[]","name":"zip_code"},{"type":"uint64","name":"t0"},{"type":"uint64","name":"t1"},{"type":"uint64","name":"cap"},{"type":"uint64","name":"direction"},{"type":"uint64","name":"threshold"},{"type":"uint64","name":"slope"},{"type":"uint64","name":"fee"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Buy insurance policy (simple version for testing)\nPayment should be sent to contract address before calling this method","events":[],"recommendations":{}},{"name":"oracle_settle","args":[{"type":"uint64","name":"policy_id"},{"type":"uint64","name":"approved"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Oracle-only settlement\nIf approved == 1 â†’ payout = cap; else 0","events":[],"recommendations":{}},{"name":"get_policy","args":[{"type":"uint64","name":"policy_id"}],"returns":{"type":"(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)","struct":"PolicyData"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get policy data by ID","events":[],"recommendations":{}},{"name":"get_policies_by_owner","args":[{"type":"address","name":"owner"}],"returns":{"type":"(uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get all policy IDs for a specific owner\nReturns: (count, first_policy_id) Note: This is a simplified implementation for MVP","events":[],"recommendations":{}},{"name":"get_policy_count","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get total number of policies created","events":[],"recommendations":{}},{"name":"calculate_fee","args":[{"type":"uint64","name":"cap"},{"type":"uint64","name":"risk_score"},{"type":"uint64","name":"uncertainty"},{"type":"uint64","name":"duration_days"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Calculate policy fee based on risk parameters\nFormula: base_fee * risk_multiplier * uncertainty_multiplier * duration_multiplier","events":[],"recommendations":{}},{"name":"get_globals","args":[],"returns":{"type":"(address,address,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get global state","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"\n    Minimal AgriGuard Insurance Contract\n    \n    Features:\n    - Buy policy with group transaction (payment + function call)\n    - Oracle settlement\n    - Policy storage by owner address\n    - Helper functions to get policies\n    ","networks":{},"state":{"schema":{"global":{"ints":1,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"address","key":"YWRtaW4="},"oracle":{"keyType":"AVMString","valueType":"address","key":"b3JhY2xl"},"next_policy_id":{"keyType":"AVMString","valueType":"AVMUint64","key":"bmV4dF9wb2xpY3lfaWQ="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"policies":{"keyType":"uint64","valueType":"PolicyData","prefix":"cG9saWNpZXM="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[595,701],"errorMessage":"Index access is out of bounds"},{"pc":[429],"errorMessage":"Must be called in group transaction"},{"pc":[169,185,213,229,248,267,289,329,369,384],"errorMessage":"OnCompletion is not NoOp"},{"pc":[415],"errorMessage":"Only admin can set oracle"},{"pc":[554],"errorMessage":"Only oracle"},{"pc":[570],"errorMessage":"Policy already settled"},{"pc":[388],"errorMessage":"can only call when creating"},{"pc":[172,188,216,232,251,270,292,332,372],"errorMessage":"can only call when not creating"},{"pc":[413,838],"errorMessage":"check self.admin exists"},{"pc":[433,491,664,773,847],"errorMessage":"check self.next_policy_id exists"},{"pc":[552,843],"errorMessage":"check self.oracle exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiAFAQBkAugHJgcObmV4dF9wb2xpY3lfaWQEFR98dQhwb2xpY2llcwVhZG1pbgZvcmFjbGUCAGIIAAAAAAAAAAAxGEAADCsyA2cnBDIDZygiZzEbQQBNggoEiUpxbgQzaPVWBGcXIdYEUPmSrATvkJ84BOsN4CsEP3j24wSr9tUaBPogAgwEGg4gSDYaAI4KANkAygCiAHoAZABRAD4ALgASAAIjQzEZFEQxGESIApMpTFCwIkMxGRREMRhENhoBNhoCNhoDNhoEiAI+KUxQsCJDMRkURDEYRIgCJilMULAiQzEZFEQxGEQ2GgGIAZ0pTFCwIkMxGRREMRhENhoBiAF9KUxQsCJDMRkURDEYRDYaATYaAogBBylMULAiQzEZFEQxGEQ2GgE2GgI2GgM2GgQ2GgU2GgY2Ggc2GgiIAKUpTFCwIkMxGRREMRhENhoBNhoCNhoDNhoENhoFNhoGNhoHNhoIiAA+KUxQsCJDMRkURDEYRDYaAYgAGiJDMRkURDEYFEQ2GgGIAAIiQ4oBACuL/2eJigEAMQAjK2VEEkQnBIv/Z4mKCAEyBCUSRCMoZURJIggoTGcxACcFUIv5UIv6UIv7UIv8UIv9UIv+UIv/UCcGUIv4UEwWKksBUEm8SE8Cv4mKCAEjKGVESSIIKExnMQAnBVCL+VCL+lCL+1CL/FCL/VCL/lCL/1AnBlCL+FBMFipLAVBJvEhPAr+JigIBMQAjJwRlRBJEi/4XFipMUEm+SEmBWlsURCOL/xciEkEAB4sBgTJbjAKLAkEAFLGLAVcAIIsCsgiyByKyECEEsgGziwGACAAAAAAAAAABXFqLAEm8SEy/iwIWjACJigEBi/8XFipMUL5IiYoBASOAAEkjRwIoZUQiiwaLBQxBAFaLBhYqTFBJjAC+RQGLBIwCiwOMAUEALosAvkhXACCL/xKLBIwCiwOMAUEAFosDIgiMA4sESYwCQAAEiwaMAosDjAFCAACLAowEiwGMA4sGIgiMBkL/oosDFosEFlCMAIkjKGVEIgkWiYoEAYv8FyQKi/0XJQokCIv+FyQIi/8XJQokCE8DTwMLTwILC4HAhD0KSSEEDEEABCEEjACLABZMiSMrZUQjJwRlRCMoZUQWTgJQTFCJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type PolicyData = {
  owner: string,
  zipCode: string,
  t0: bigint,
  t1: bigint,
  cap: bigint,
  direction: bigint,
  threshold: bigint,
  slope: bigint,
  feePaid: bigint,
  settled: bigint
}


/**
 * Converts the ABI tuple representation of a PolicyData to the struct representation
 */
export function PolicyDataFromTuple(abiTuple: [string, string, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.PolicyData, APP_SPEC.structs) as PolicyData
}

/**
 * The argument types for the AgriGuardInsurance contract
 */
export type AgriGuardInsuranceArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_application(address)void': {
      admin: string
    }
    'set_oracle(address)void': {
      oracle: string
    }
    'buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64': {
      zipCode: Uint8Array
      t0: bigint | number
      t1: bigint | number
      cap: bigint | number
      direction: bigint | number
      threshold: bigint | number
      slope: bigint | number
      fee: bigint | number
    }
    'buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64': {
      zipCode: Uint8Array
      t0: bigint | number
      t1: bigint | number
      cap: bigint | number
      direction: bigint | number
      threshold: bigint | number
      slope: bigint | number
      fee: bigint | number
    }
    'oracle_settle(uint64,uint64)uint64': {
      policyId: bigint | number
      approved: bigint | number
    }
    'get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': {
      policyId: bigint | number
    }
    'get_policies_by_owner(address)(uint64,uint64)': {
      owner: string
    }
    'get_policy_count()uint64': Record<string, never>
    'calculate_fee(uint64,uint64,uint64,uint64)uint64': {
      cap: bigint | number
      riskScore: bigint | number
      uncertainty: bigint | number
      durationDays: bigint | number
    }
    'get_globals()(address,address,uint64)': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_application(address)void': [admin: string]
    'set_oracle(address)void': [oracle: string]
    'buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64': [zipCode: Uint8Array, t0: bigint | number, t1: bigint | number, cap: bigint | number, direction: bigint | number, threshold: bigint | number, slope: bigint | number, fee: bigint | number]
    'buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64': [zipCode: Uint8Array, t0: bigint | number, t1: bigint | number, cap: bigint | number, direction: bigint | number, threshold: bigint | number, slope: bigint | number, fee: bigint | number]
    'oracle_settle(uint64,uint64)uint64': [policyId: bigint | number, approved: bigint | number]
    'get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': [policyId: bigint | number]
    'get_policies_by_owner(address)(uint64,uint64)': [owner: string]
    'get_policy_count()uint64': []
    'calculate_fee(uint64,uint64,uint64,uint64)uint64': [cap: bigint | number, riskScore: bigint | number, uncertainty: bigint | number, durationDays: bigint | number]
    'get_globals()(address,address,uint64)': []
  }
}

/**
 * The return type for each method
 */
export type AgriGuardInsuranceReturns = {
  'create_application(address)void': void
  'set_oracle(address)void': void
  'buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64': bigint
  'buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64': bigint
  'oracle_settle(uint64,uint64)uint64': bigint
  'get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': PolicyData
  'get_policies_by_owner(address)(uint64,uint64)': [bigint, bigint]
  'get_policy_count()uint64': bigint
  'calculate_fee(uint64,uint64,uint64,uint64)uint64': bigint
  'get_globals()(address,address,uint64)': [string, string, bigint]
}

/**
 * Defines the types of available calls and state of the AgriGuardInsurance smart contract.
 */
export type AgriGuardInsuranceTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_application(address)void' | 'create_application', {
      argsObj: AgriGuardInsuranceArgs['obj']['create_application(address)void']
      argsTuple: AgriGuardInsuranceArgs['tuple']['create_application(address)void']
      returns: AgriGuardInsuranceReturns['create_application(address)void']
    }>
    & Record<'set_oracle(address)void' | 'set_oracle', {
      argsObj: AgriGuardInsuranceArgs['obj']['set_oracle(address)void']
      argsTuple: AgriGuardInsuranceArgs['tuple']['set_oracle(address)void']
      returns: AgriGuardInsuranceReturns['set_oracle(address)void']
    }>
    & Record<'buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64' | 'buy_policy_with_payment', {
      argsObj: AgriGuardInsuranceArgs['obj']['buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']
      argsTuple: AgriGuardInsuranceArgs['tuple']['buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']
      returns: AgriGuardInsuranceReturns['buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']
    }>
    & Record<'buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64' | 'buy_policy', {
      argsObj: AgriGuardInsuranceArgs['obj']['buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']
      argsTuple: AgriGuardInsuranceArgs['tuple']['buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']
      returns: AgriGuardInsuranceReturns['buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']
    }>
    & Record<'oracle_settle(uint64,uint64)uint64' | 'oracle_settle', {
      argsObj: AgriGuardInsuranceArgs['obj']['oracle_settle(uint64,uint64)uint64']
      argsTuple: AgriGuardInsuranceArgs['tuple']['oracle_settle(uint64,uint64)uint64']
      returns: AgriGuardInsuranceReturns['oracle_settle(uint64,uint64)uint64']
    }>
    & Record<'get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' | 'get_policy', {
      argsObj: AgriGuardInsuranceArgs['obj']['get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: AgriGuardInsuranceArgs['tuple']['get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      returns: AgriGuardInsuranceReturns['get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'get_policies_by_owner(address)(uint64,uint64)' | 'get_policies_by_owner', {
      argsObj: AgriGuardInsuranceArgs['obj']['get_policies_by_owner(address)(uint64,uint64)']
      argsTuple: AgriGuardInsuranceArgs['tuple']['get_policies_by_owner(address)(uint64,uint64)']
      returns: AgriGuardInsuranceReturns['get_policies_by_owner(address)(uint64,uint64)']
    }>
    & Record<'get_policy_count()uint64' | 'get_policy_count', {
      argsObj: AgriGuardInsuranceArgs['obj']['get_policy_count()uint64']
      argsTuple: AgriGuardInsuranceArgs['tuple']['get_policy_count()uint64']
      returns: AgriGuardInsuranceReturns['get_policy_count()uint64']
    }>
    & Record<'calculate_fee(uint64,uint64,uint64,uint64)uint64' | 'calculate_fee', {
      argsObj: AgriGuardInsuranceArgs['obj']['calculate_fee(uint64,uint64,uint64,uint64)uint64']
      argsTuple: AgriGuardInsuranceArgs['tuple']['calculate_fee(uint64,uint64,uint64,uint64)uint64']
      returns: AgriGuardInsuranceReturns['calculate_fee(uint64,uint64,uint64,uint64)uint64']
    }>
    & Record<'get_globals()(address,address,uint64)' | 'get_globals', {
      argsObj: AgriGuardInsuranceArgs['obj']['get_globals()(address,address,uint64)']
      argsTuple: AgriGuardInsuranceArgs['tuple']['get_globals()(address,address,uint64)']
      returns: AgriGuardInsuranceReturns['get_globals()(address,address,uint64)']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: string
        oracle: string
        nextPolicyId: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        policies: Map<bigint | number, PolicyData>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AgriGuardInsuranceSignatures = keyof AgriGuardInsuranceTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AgriGuardInsuranceNonVoidMethodSignatures = keyof AgriGuardInsuranceTypes['methods'] extends infer T ? T extends keyof AgriGuardInsuranceTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AgriGuardInsurance smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AgriGuardInsuranceSignatures> = AgriGuardInsuranceTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AgriGuardInsurance smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AgriGuardInsuranceSignatures> = AgriGuardInsuranceTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AgriGuardInsuranceTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = AgriGuardInsuranceTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AgriGuardInsuranceCreateCallParams =
  | Expand<CallParams<AgriGuardInsuranceArgs['obj']['create_application(address)void'] | AgriGuardInsuranceArgs['tuple']['create_application(address)void']> & {method: 'create_application'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<AgriGuardInsuranceArgs['obj']['create_application(address)void'] | AgriGuardInsuranceArgs['tuple']['create_application(address)void']> & {method: 'create_application(address)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AgriGuardInsuranceDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AgriGuardInsuranceCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AgriGuardInsurance smart contract
 */
export abstract class AgriGuardInsuranceParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends AgriGuardInsuranceCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create_application':
          case 'create_application(address)void':
            return AgriGuardInsuranceParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the AgriGuardInsurance smart contract using the create_application(address)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<AgriGuardInsuranceArgs['obj']['create_application(address)void'] | AgriGuardInsuranceArgs['tuple']['create_application(address)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create_application(address)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.admin],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the set_oracle(address)void ABI method
   *
   * Set oracle account (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setOracle(params: CallParams<AgriGuardInsuranceArgs['obj']['set_oracle(address)void'] | AgriGuardInsuranceArgs['tuple']['set_oracle(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_oracle(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.oracle],
    }
  }
  /**
   * Constructs a no op call for the buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64 ABI method
   *
  * Buy insurance policy with integrated payment using group transaction
  Expects to be called as part of a group transaction where: - Transaction 1: Payment from user to contract - Transaction 2: This function call

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buyPolicyWithPayment(params: CallParams<AgriGuardInsuranceArgs['obj']['buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.zipCode, params.args.t0, params.args.t1, params.args.cap, params.args.direction, params.args.threshold, params.args.slope, params.args.fee],
    }
  }
  /**
   * Constructs a no op call for the buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64 ABI method
   *
  * Buy insurance policy (simple version for testing)
  Payment should be sent to contract address before calling this method

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buyPolicy(params: CallParams<AgriGuardInsuranceArgs['obj']['buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.zipCode, params.args.t0, params.args.t1, params.args.cap, params.args.direction, params.args.threshold, params.args.slope, params.args.fee],
    }
  }
  /**
   * Constructs a no op call for the oracle_settle(uint64,uint64)uint64 ABI method
   *
  * Oracle-only settlement
  If approved == 1 â†’ payout = cap; else 0

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static oracleSettle(params: CallParams<AgriGuardInsuranceArgs['obj']['oracle_settle(uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['oracle_settle(uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'oracle_settle(uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.policyId, params.args.approved],
    }
  }
  /**
   * Constructs a no op call for the get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * Get policy data by ID
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPolicy(params: CallParams<AgriGuardInsuranceArgs['obj']['get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | AgriGuardInsuranceArgs['tuple']['get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.policyId],
    }
  }
  /**
   * Constructs a no op call for the get_policies_by_owner(address)(uint64,uint64) ABI method
   *
  * Get all policy IDs for a specific owner
  Returns: (count, first_policy_id) Note: This is a simplified implementation for MVP

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoliciesByOwner(params: CallParams<AgriGuardInsuranceArgs['obj']['get_policies_by_owner(address)(uint64,uint64)'] | AgriGuardInsuranceArgs['tuple']['get_policies_by_owner(address)(uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_policies_by_owner(address)(uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.owner],
    }
  }
  /**
   * Constructs a no op call for the get_policy_count()uint64 ABI method
   *
   * Get total number of policies created
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPolicyCount(params: CallParams<AgriGuardInsuranceArgs['obj']['get_policy_count()uint64'] | AgriGuardInsuranceArgs['tuple']['get_policy_count()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_policy_count()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the calculate_fee(uint64,uint64,uint64,uint64)uint64 ABI method
   *
  * Calculate policy fee based on risk parameters
  Formula: base_fee * risk_multiplier * uncertainty_multiplier * duration_multiplier

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateFee(params: CallParams<AgriGuardInsuranceArgs['obj']['calculate_fee(uint64,uint64,uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['calculate_fee(uint64,uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculate_fee(uint64,uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.cap, params.args.riskScore, params.args.uncertainty, params.args.durationDays],
    }
  }
  /**
   * Constructs a no op call for the get_globals()(address,address,uint64) ABI method
   *
   * Get global state
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getGlobals(params: CallParams<AgriGuardInsuranceArgs['obj']['get_globals()(address,address,uint64)'] | AgriGuardInsuranceArgs['tuple']['get_globals()(address,address,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_globals()(address,address,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AgriGuardInsurance smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AgriGuardInsuranceFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AgriGuardInsuranceFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AgriGuardInsuranceClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AgriGuardInsuranceClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AgriGuardInsurance smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AgriGuardInsuranceDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? AgriGuardInsuranceParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (AgriGuardInsuranceCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new AgriGuardInsuranceClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AgriGuardInsurance smart contract using the create_application(address)void ABI method.
       *
       * Initialize the application with admin
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<AgriGuardInsuranceArgs['obj']['create_application(address)void'] | AgriGuardInsuranceArgs['tuple']['create_application(address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(AgriGuardInsuranceParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AgriGuardInsurance smart contract using the create_application(address)void ABI method.
       *
       * Initialize the application with admin
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<AgriGuardInsuranceArgs['obj']['create_application(address)void'] | AgriGuardInsuranceArgs['tuple']['create_application(address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(AgriGuardInsuranceParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AgriGuardInsurance smart contract using an ABI method call using the create_application(address)void ABI method.
       *
       * Initialize the application with admin
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<AgriGuardInsuranceArgs['obj']['create_application(address)void'] | AgriGuardInsuranceArgs['tuple']['create_application(address)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(AgriGuardInsuranceParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | AgriGuardInsuranceReturns['create_application(address)void']) }, appClient: new AgriGuardInsuranceClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AgriGuardInsurance smart contract
 */
export class AgriGuardInsuranceClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AgriGuardInsuranceClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AgriGuardInsurance app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AgriGuardInsuranceClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AgriGuardInsuranceNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AgriGuardInsuranceClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AgriGuardInsuranceClient> {
    return new AgriGuardInsuranceClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AgriGuardInsuranceClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AgriGuardInsuranceClient> {
    return new AgriGuardInsuranceClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AgriGuardInsurance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `set_oracle(address)void` ABI method.
     *
     * Set oracle account (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setOracle: (params: CallParams<AgriGuardInsuranceArgs['obj']['set_oracle(address)void'] | AgriGuardInsuranceArgs['tuple']['set_oracle(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AgriGuardInsuranceParamsFactory.setOracle(params))
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
    * Buy insurance policy with integrated payment using group transaction
    Expects to be called as part of a group transaction where: - Transaction 1: Payment from user to contract - Transaction 2: This function call

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buyPolicyWithPayment: (params: CallParams<AgriGuardInsuranceArgs['obj']['buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AgriGuardInsuranceParamsFactory.buyPolicyWithPayment(params))
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
    * Buy insurance policy (simple version for testing)
    Payment should be sent to contract address before calling this method

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buyPolicy: (params: CallParams<AgriGuardInsuranceArgs['obj']['buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AgriGuardInsuranceParamsFactory.buyPolicy(params))
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `oracle_settle(uint64,uint64)uint64` ABI method.
     *
    * Oracle-only settlement
    If approved == 1 â†’ payout = cap; else 0

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    oracleSettle: (params: CallParams<AgriGuardInsuranceArgs['obj']['oracle_settle(uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['oracle_settle(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AgriGuardInsuranceParamsFactory.oracleSettle(params))
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get policy data by ID
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPolicy: (params: CallParams<AgriGuardInsuranceArgs['obj']['get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | AgriGuardInsuranceArgs['tuple']['get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AgriGuardInsuranceParamsFactory.getPolicy(params))
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `get_policies_by_owner(address)(uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Get all policy IDs for a specific owner
    Returns: (count, first_policy_id) Note: This is a simplified implementation for MVP

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPoliciesByOwner: (params: CallParams<AgriGuardInsuranceArgs['obj']['get_policies_by_owner(address)(uint64,uint64)'] | AgriGuardInsuranceArgs['tuple']['get_policies_by_owner(address)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AgriGuardInsuranceParamsFactory.getPoliciesByOwner(params))
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `get_policy_count()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get total number of policies created
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPolicyCount: (params: CallParams<AgriGuardInsuranceArgs['obj']['get_policy_count()uint64'] | AgriGuardInsuranceArgs['tuple']['get_policy_count()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AgriGuardInsuranceParamsFactory.getPolicyCount(params))
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `calculate_fee(uint64,uint64,uint64,uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculate policy fee based on risk parameters
    Formula: base_fee * risk_multiplier * uncertainty_multiplier * duration_multiplier

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculateFee: (params: CallParams<AgriGuardInsuranceArgs['obj']['calculate_fee(uint64,uint64,uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['calculate_fee(uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AgriGuardInsuranceParamsFactory.calculateFee(params))
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `get_globals()(address,address,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get global state
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getGlobals: (params: CallParams<AgriGuardInsuranceArgs['obj']['get_globals()(address,address,uint64)'] | AgriGuardInsuranceArgs['tuple']['get_globals()(address,address,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AgriGuardInsuranceParamsFactory.getGlobals(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AgriGuardInsurance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `set_oracle(address)void` ABI method.
     *
     * Set oracle account (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setOracle: (params: CallParams<AgriGuardInsuranceArgs['obj']['set_oracle(address)void'] | AgriGuardInsuranceArgs['tuple']['set_oracle(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AgriGuardInsuranceParamsFactory.setOracle(params))
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
    * Buy insurance policy with integrated payment using group transaction
    Expects to be called as part of a group transaction where: - Transaction 1: Payment from user to contract - Transaction 2: This function call

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buyPolicyWithPayment: (params: CallParams<AgriGuardInsuranceArgs['obj']['buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AgriGuardInsuranceParamsFactory.buyPolicyWithPayment(params))
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
    * Buy insurance policy (simple version for testing)
    Payment should be sent to contract address before calling this method

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buyPolicy: (params: CallParams<AgriGuardInsuranceArgs['obj']['buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AgriGuardInsuranceParamsFactory.buyPolicy(params))
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `oracle_settle(uint64,uint64)uint64` ABI method.
     *
    * Oracle-only settlement
    If approved == 1 â†’ payout = cap; else 0

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    oracleSettle: (params: CallParams<AgriGuardInsuranceArgs['obj']['oracle_settle(uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['oracle_settle(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AgriGuardInsuranceParamsFactory.oracleSettle(params))
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get policy data by ID
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPolicy: (params: CallParams<AgriGuardInsuranceArgs['obj']['get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | AgriGuardInsuranceArgs['tuple']['get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AgriGuardInsuranceParamsFactory.getPolicy(params))
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `get_policies_by_owner(address)(uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Get all policy IDs for a specific owner
    Returns: (count, first_policy_id) Note: This is a simplified implementation for MVP

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPoliciesByOwner: (params: CallParams<AgriGuardInsuranceArgs['obj']['get_policies_by_owner(address)(uint64,uint64)'] | AgriGuardInsuranceArgs['tuple']['get_policies_by_owner(address)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AgriGuardInsuranceParamsFactory.getPoliciesByOwner(params))
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `get_policy_count()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get total number of policies created
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPolicyCount: (params: CallParams<AgriGuardInsuranceArgs['obj']['get_policy_count()uint64'] | AgriGuardInsuranceArgs['tuple']['get_policy_count()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AgriGuardInsuranceParamsFactory.getPolicyCount(params))
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `calculate_fee(uint64,uint64,uint64,uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculate policy fee based on risk parameters
    Formula: base_fee * risk_multiplier * uncertainty_multiplier * duration_multiplier

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculateFee: (params: CallParams<AgriGuardInsuranceArgs['obj']['calculate_fee(uint64,uint64,uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['calculate_fee(uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AgriGuardInsuranceParamsFactory.calculateFee(params))
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `get_globals()(address,address,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get global state
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getGlobals: (params: CallParams<AgriGuardInsuranceArgs['obj']['get_globals()(address,address,uint64)'] | AgriGuardInsuranceArgs['tuple']['get_globals()(address,address,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AgriGuardInsuranceParamsFactory.getGlobals(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AgriGuardInsurance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `set_oracle(address)void` ABI method.
     *
     * Set oracle account (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setOracle: async (params: CallParams<AgriGuardInsuranceArgs['obj']['set_oracle(address)void'] | AgriGuardInsuranceArgs['tuple']['set_oracle(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AgriGuardInsuranceParamsFactory.setOracle(params))
      return {...result, return: result.return as unknown as (undefined | AgriGuardInsuranceReturns['set_oracle(address)void'])}
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
    * Buy insurance policy with integrated payment using group transaction
    Expects to be called as part of a group transaction where: - Transaction 1: Payment from user to contract - Transaction 2: This function call

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buyPolicyWithPayment: async (params: CallParams<AgriGuardInsuranceArgs['obj']['buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AgriGuardInsuranceParamsFactory.buyPolicyWithPayment(params))
      return {...result, return: result.return as unknown as (undefined | AgriGuardInsuranceReturns['buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
    * Buy insurance policy (simple version for testing)
    Payment should be sent to contract address before calling this method

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buyPolicy: async (params: CallParams<AgriGuardInsuranceArgs['obj']['buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AgriGuardInsuranceParamsFactory.buyPolicy(params))
      return {...result, return: result.return as unknown as (undefined | AgriGuardInsuranceReturns['buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `oracle_settle(uint64,uint64)uint64` ABI method.
     *
    * Oracle-only settlement
    If approved == 1 â†’ payout = cap; else 0

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    oracleSettle: async (params: CallParams<AgriGuardInsuranceArgs['obj']['oracle_settle(uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['oracle_settle(uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AgriGuardInsuranceParamsFactory.oracleSettle(params))
      return {...result, return: result.return as unknown as (undefined | AgriGuardInsuranceReturns['oracle_settle(uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get policy data by ID
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPolicy: async (params: CallParams<AgriGuardInsuranceArgs['obj']['get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | AgriGuardInsuranceArgs['tuple']['get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AgriGuardInsuranceParamsFactory.getPolicy(params))
      return {...result, return: result.return as unknown as (undefined | AgriGuardInsuranceReturns['get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `get_policies_by_owner(address)(uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Get all policy IDs for a specific owner
    Returns: (count, first_policy_id) Note: This is a simplified implementation for MVP

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPoliciesByOwner: async (params: CallParams<AgriGuardInsuranceArgs['obj']['get_policies_by_owner(address)(uint64,uint64)'] | AgriGuardInsuranceArgs['tuple']['get_policies_by_owner(address)(uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AgriGuardInsuranceParamsFactory.getPoliciesByOwner(params))
      return {...result, return: result.return as unknown as (undefined | AgriGuardInsuranceReturns['get_policies_by_owner(address)(uint64,uint64)'])}
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `get_policy_count()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get total number of policies created
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPolicyCount: async (params: CallParams<AgriGuardInsuranceArgs['obj']['get_policy_count()uint64'] | AgriGuardInsuranceArgs['tuple']['get_policy_count()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AgriGuardInsuranceParamsFactory.getPolicyCount(params))
      return {...result, return: result.return as unknown as (undefined | AgriGuardInsuranceReturns['get_policy_count()uint64'])}
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `calculate_fee(uint64,uint64,uint64,uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculate policy fee based on risk parameters
    Formula: base_fee * risk_multiplier * uncertainty_multiplier * duration_multiplier

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculateFee: async (params: CallParams<AgriGuardInsuranceArgs['obj']['calculate_fee(uint64,uint64,uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['calculate_fee(uint64,uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AgriGuardInsuranceParamsFactory.calculateFee(params))
      return {...result, return: result.return as unknown as (undefined | AgriGuardInsuranceReturns['calculate_fee(uint64,uint64,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the AgriGuardInsurance smart contract using the `get_globals()(address,address,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get global state
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getGlobals: async (params: CallParams<AgriGuardInsuranceArgs['obj']['get_globals()(address,address,uint64)'] | AgriGuardInsuranceArgs['tuple']['get_globals()(address,address,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AgriGuardInsuranceParamsFactory.getGlobals(params))
      return {...result, return: result.return as unknown as (undefined | AgriGuardInsuranceReturns['get_globals()(address,address,uint64)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AgriGuardInsuranceClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the AgriGuardInsurance smart contract using the `get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get policy data by ID
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPolicy(params: CallParams<AgriGuardInsuranceArgs['obj']['get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | AgriGuardInsuranceArgs['tuple']['get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']>) {
    const result = await this.appClient.send.call(AgriGuardInsuranceParamsFactory.getPolicy(params))
    return result.return as unknown as AgriGuardInsuranceReturns['get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the AgriGuardInsurance smart contract using the `get_policies_by_owner(address)(uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
  * Get all policy IDs for a specific owner
  Returns: (count, first_policy_id) Note: This is a simplified implementation for MVP

   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPoliciesByOwner(params: CallParams<AgriGuardInsuranceArgs['obj']['get_policies_by_owner(address)(uint64,uint64)'] | AgriGuardInsuranceArgs['tuple']['get_policies_by_owner(address)(uint64,uint64)']>) {
    const result = await this.appClient.send.call(AgriGuardInsuranceParamsFactory.getPoliciesByOwner(params))
    return result.return as unknown as AgriGuardInsuranceReturns['get_policies_by_owner(address)(uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the AgriGuardInsurance smart contract using the `get_policy_count()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get total number of policies created
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPolicyCount(params: CallParams<AgriGuardInsuranceArgs['obj']['get_policy_count()uint64'] | AgriGuardInsuranceArgs['tuple']['get_policy_count()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AgriGuardInsuranceParamsFactory.getPolicyCount(params))
    return result.return as unknown as AgriGuardInsuranceReturns['get_policy_count()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the AgriGuardInsurance smart contract using the `calculate_fee(uint64,uint64,uint64,uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
  * Calculate policy fee based on risk parameters
  Formula: base_fee * risk_multiplier * uncertainty_multiplier * duration_multiplier

   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async calculateFee(params: CallParams<AgriGuardInsuranceArgs['obj']['calculate_fee(uint64,uint64,uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['calculate_fee(uint64,uint64,uint64,uint64)uint64']>) {
    const result = await this.appClient.send.call(AgriGuardInsuranceParamsFactory.calculateFee(params))
    return result.return as unknown as AgriGuardInsuranceReturns['calculate_fee(uint64,uint64,uint64,uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the AgriGuardInsurance smart contract using the `get_globals()(address,address,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get global state
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getGlobals(params: CallParams<AgriGuardInsuranceArgs['obj']['get_globals()(address,address,uint64)'] | AgriGuardInsuranceArgs['tuple']['get_globals()(address,address,uint64)']> = {args: []}) {
    const result = await this.appClient.send.call(AgriGuardInsuranceParamsFactory.getGlobals(params))
    return result.return as unknown as AgriGuardInsuranceReturns['get_globals()(address,address,uint64)']
  }

  /**
   * Methods to access state for the current AgriGuardInsurance app
   */
  state = {
    /**
     * Methods to access global state for the current AgriGuardInsurance app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: result.admin,
          oracle: result.oracle,
          nextPolicyId: result.next_policy_id,
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin")) as string | undefined },
      /**
       * Get the current value of the oracle key in global state
       */
      oracle: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("oracle")) as string | undefined },
      /**
       * Get the current value of the next_policy_id key in global state
       */
      nextPolicyId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("next_policy_id")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current AgriGuardInsurance app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the policies map in box state
       */
      policies: {
        /**
         * Get all current values of the policies map in box state
         */
        getMap: async (): Promise<Map<bigint, PolicyData>> => { return (await this.appClient.state.box.getMap("policies")) as Map<bigint, PolicyData> },
        /**
         * Get a current value of the policies map by key from box state
         */
        value: async (key: bigint | number): Promise<PolicyData | undefined> => { return await this.appClient.state.box.getMapValue("policies", key) as PolicyData | undefined },
      },
    },
  }

  public newGroup(): AgriGuardInsuranceComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a set_oracle(address)void method call against the AgriGuardInsurance contract
       */
      setOracle(params: CallParams<AgriGuardInsuranceArgs['obj']['set_oracle(address)void'] | AgriGuardInsuranceArgs['tuple']['set_oracle(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setOracle(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64 method call against the AgriGuardInsurance contract
       */
      buyPolicyWithPayment(params: CallParams<AgriGuardInsuranceArgs['obj']['buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buyPolicyWithPayment(params)))
        resultMappers.push((v) => client.decodeReturnValue('buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64 method call against the AgriGuardInsurance contract
       */
      buyPolicy(params: CallParams<AgriGuardInsuranceArgs['obj']['buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buyPolicy(params)))
        resultMappers.push((v) => client.decodeReturnValue('buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a oracle_settle(uint64,uint64)uint64 method call against the AgriGuardInsurance contract
       */
      oracleSettle(params: CallParams<AgriGuardInsuranceArgs['obj']['oracle_settle(uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['oracle_settle(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.oracleSettle(params)))
        resultMappers.push((v) => client.decodeReturnValue('oracle_settle(uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) method call against the AgriGuardInsurance contract
       */
      getPolicy(params: CallParams<AgriGuardInsuranceArgs['obj']['get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | AgriGuardInsuranceArgs['tuple']['get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPolicy(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a get_policies_by_owner(address)(uint64,uint64) method call against the AgriGuardInsurance contract
       */
      getPoliciesByOwner(params: CallParams<AgriGuardInsuranceArgs['obj']['get_policies_by_owner(address)(uint64,uint64)'] | AgriGuardInsuranceArgs['tuple']['get_policies_by_owner(address)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoliciesByOwner(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_policies_by_owner(address)(uint64,uint64)', v))
        return this
      },
      /**
       * Add a get_policy_count()uint64 method call against the AgriGuardInsurance contract
       */
      getPolicyCount(params: CallParams<AgriGuardInsuranceArgs['obj']['get_policy_count()uint64'] | AgriGuardInsuranceArgs['tuple']['get_policy_count()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPolicyCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_policy_count()uint64', v))
        return this
      },
      /**
       * Add a calculate_fee(uint64,uint64,uint64,uint64)uint64 method call against the AgriGuardInsurance contract
       */
      calculateFee(params: CallParams<AgriGuardInsuranceArgs['obj']['calculate_fee(uint64,uint64,uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['calculate_fee(uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateFee(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculate_fee(uint64,uint64,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a get_globals()(address,address,uint64) method call against the AgriGuardInsurance contract
       */
      getGlobals(params: CallParams<AgriGuardInsuranceArgs['obj']['get_globals()(address,address,uint64)'] | AgriGuardInsuranceArgs['tuple']['get_globals()(address,address,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getGlobals(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_globals()(address,address,uint64)', v))
        return this
      },
      /**
       * Add a clear state call to the AgriGuardInsurance contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AgriGuardInsuranceComposer
  }
}
export type AgriGuardInsuranceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the set_oracle(address)void ABI method.
   *
   * Set oracle account (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setOracle(params?: CallParams<AgriGuardInsuranceArgs['obj']['set_oracle(address)void'] | AgriGuardInsuranceArgs['tuple']['set_oracle(address)void']>): AgriGuardInsuranceComposer<[...TReturns, AgriGuardInsuranceReturns['set_oracle(address)void'] | undefined]>

  /**
   * Calls the buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64 ABI method.
   *
  * Buy insurance policy with integrated payment using group transaction
  Expects to be called as part of a group transaction where: - Transaction 1: Payment from user to contract - Transaction 2: This function call

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyPolicyWithPayment(params?: CallParams<AgriGuardInsuranceArgs['obj']['buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']>): AgriGuardInsuranceComposer<[...TReturns, AgriGuardInsuranceReturns['buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64 ABI method.
   *
  * Buy insurance policy (simple version for testing)
  Payment should be sent to contract address before calling this method

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyPolicy(params?: CallParams<AgriGuardInsuranceArgs['obj']['buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']>): AgriGuardInsuranceComposer<[...TReturns, AgriGuardInsuranceReturns['buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the oracle_settle(uint64,uint64)uint64 ABI method.
   *
  * Oracle-only settlement
  If approved == 1 â†’ payout = cap; else 0

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  oracleSettle(params?: CallParams<AgriGuardInsuranceArgs['obj']['oracle_settle(uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['oracle_settle(uint64,uint64)uint64']>): AgriGuardInsuranceComposer<[...TReturns, AgriGuardInsuranceReturns['oracle_settle(uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Get policy data by ID
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPolicy(params?: CallParams<AgriGuardInsuranceArgs['obj']['get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | AgriGuardInsuranceArgs['tuple']['get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']>): AgriGuardInsuranceComposer<[...TReturns, AgriGuardInsuranceReturns['get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the get_policies_by_owner(address)(uint64,uint64) ABI method.
   *
  * Get all policy IDs for a specific owner
  Returns: (count, first_policy_id) Note: This is a simplified implementation for MVP

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoliciesByOwner(params?: CallParams<AgriGuardInsuranceArgs['obj']['get_policies_by_owner(address)(uint64,uint64)'] | AgriGuardInsuranceArgs['tuple']['get_policies_by_owner(address)(uint64,uint64)']>): AgriGuardInsuranceComposer<[...TReturns, AgriGuardInsuranceReturns['get_policies_by_owner(address)(uint64,uint64)'] | undefined]>

  /**
   * Calls the get_policy_count()uint64 ABI method.
   *
   * Get total number of policies created
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPolicyCount(params?: CallParams<AgriGuardInsuranceArgs['obj']['get_policy_count()uint64'] | AgriGuardInsuranceArgs['tuple']['get_policy_count()uint64']>): AgriGuardInsuranceComposer<[...TReturns, AgriGuardInsuranceReturns['get_policy_count()uint64'] | undefined]>

  /**
   * Calls the calculate_fee(uint64,uint64,uint64,uint64)uint64 ABI method.
   *
  * Calculate policy fee based on risk parameters
  Formula: base_fee * risk_multiplier * uncertainty_multiplier * duration_multiplier

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateFee(params?: CallParams<AgriGuardInsuranceArgs['obj']['calculate_fee(uint64,uint64,uint64,uint64)uint64'] | AgriGuardInsuranceArgs['tuple']['calculate_fee(uint64,uint64,uint64,uint64)uint64']>): AgriGuardInsuranceComposer<[...TReturns, AgriGuardInsuranceReturns['calculate_fee(uint64,uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the get_globals()(address,address,uint64) ABI method.
   *
   * Get global state
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGlobals(params?: CallParams<AgriGuardInsuranceArgs['obj']['get_globals()(address,address,uint64)'] | AgriGuardInsuranceArgs['tuple']['get_globals()(address,address,uint64)']>): AgriGuardInsuranceComposer<[...TReturns, AgriGuardInsuranceReturns['get_globals()(address,address,uint64)'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AgriGuardInsurance smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AgriGuardInsuranceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AgriGuardInsuranceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AgriGuardInsuranceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AgriGuardInsuranceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AgriGuardInsuranceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AgriGuardInsuranceComposerResults<TReturns>>
}
export type AgriGuardInsuranceComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

