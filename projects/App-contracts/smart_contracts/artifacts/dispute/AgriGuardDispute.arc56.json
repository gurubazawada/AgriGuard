{
    "name": "AgriGuardDispute",
    "structs": {
        "DisputeData": [
            {
                "name": "policy_id",
                "type": "uint64"
            },
            {
                "name": "claimant",
                "type": "address"
            },
            {
                "name": "created_at",
                "type": "uint64"
            },
            {
                "name": "status",
                "type": "uint64"
            },
            {
                "name": "yes_votes",
                "type": "uint64"
            },
            {
                "name": "no_votes",
                "type": "uint64"
            }
        ],
        "JurorData": [
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "reputation",
                "type": "uint64"
            },
            {
                "name": "total_votes",
                "type": "uint64"
            },
            {
                "name": "correct_votes",
                "type": "uint64"
            }
        ],
        "VoteData": [
            {
                "name": "juror",
                "type": "address"
            },
            {
                "name": "vote",
                "type": "uint64"
            },
            {
                "name": "timestamp",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "create_application",
            "args": [
                {
                    "type": "address",
                    "name": "admin"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Initialize the dispute contract",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_insurance_contract",
            "args": [
                {
                    "type": "address",
                    "name": "contract_address"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Set the main insurance contract address (admin only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "register_juror",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Register as a juror in the dispute resolution system",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_dispute",
            "args": [
                {
                    "type": "uint64",
                    "name": "policy_id"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a new dispute for a policy (claimant only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "vote_on_dispute",
            "args": [
                {
                    "type": "uint64",
                    "name": "dispute_id"
                },
                {
                    "type": "uint64",
                    "name": "vote"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Vote on a dispute (jurors only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_dispute",
            "args": [
                {
                    "type": "uint64",
                    "name": "dispute_id"
                }
            ],
            "returns": {
                "type": "(uint64,address,uint64,uint64,uint64,uint64)",
                "struct": "DisputeData"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get dispute information",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_juror_info",
            "args": [
                {
                    "type": "address",
                    "name": "juror_address"
                }
            ],
            "returns": {
                "type": "(address,uint64,uint64,uint64)",
                "struct": "JurorData"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get juror information",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_total_jurors",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get total number of registered jurors",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "\n    Dispute Resolution Contract for AgriGuard Insurance\n    \n    This contract handles community-based dispute resolution for insurance claims.\n    ",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 2,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "admin": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YWRtaW4="
                },
                "insurance_contract": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "aW5zdXJhbmNlX2NvbnRyYWN0"
                },
                "next_dispute_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmV4dF9kaXNwdXRlX2lk"
                },
                "total_jurors": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfanVyb3Jz"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "disputes": {
                    "keyType": "uint64",
                    "valueType": "DisputeData",
                    "prefix": "ZGlzcHV0ZXM="
                },
                "jurors": {
                    "keyType": "address",
                    "valueType": "JurorData",
                    "prefix": "anVyb3Jz"
                },
                "dispute_jurors": {
                    "keyType": "uint64",
                    "valueType": "AVMBytes",
                    "prefix": "ZGlzcHV0ZV9qdXJvcnM="
                },
                "juror_votes": {
                    "keyType": "AVMBytes",
                    "valueType": "VoteData",
                    "prefix": "anVyb3Jfdm90ZXM="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        285,
                        301,
                        320,
                        339,
                        361,
                        380,
                        396,
                        415
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        448
                    ],
                    "errorMessage": "Only admin"
                },
                {
                    "pc": [
                        419
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        288,
                        304,
                        323,
                        342,
                        364,
                        383,
                        399
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        444
                    ],
                    "errorMessage": "check self.admin exists"
                },
                {
                    "pc": [
                        542
                    ],
                    "errorMessage": "check self.next_dispute_id exists"
                },
                {
                    "pc": [
                        501,
                        598,
                        615,
                        932
                    ],
                    "errorMessage": "check self.total_jurors exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAQA4QCYLCAAAAAAAAAAABBUffHUMdG90YWxfanVyb3JzCAAAAAAAAAABBWFkbWluD25leHRfZGlzcHV0ZV9pZAZqdXJvcnMIZGlzcHV0ZXNIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEmluc3VyYW5jZV9jb250cmFjdA5kaXNwdXRlX2p1cm9yczEYQAARJwQyA2cnCTIDZycFImcqI2cxG0EAP4IIBIlKcW4EVvXj/AT8ugI6BBM1zf0EtKUtBQSjAYk2BGZIO2EEfic7ODYaAI4IAIQAcQBhAE4AOAAlABIAAiNDMRkURDEYRIgCfSlMULAiQzEZFEQxGEQ2GgGIAlApTFCwIkMxGRREMRhENhoBiAIhKUxQsCJDMRkURDEYRDYaATYaAogBQilMULAiQzEZFEQxGEQ2GgGIAIwpTFCwIkMxGRREMRhEiABFKUxQsCJDMRkURDEYRDYaAYgAHylMULAiQzEZFEQxGBRENhoBiAACIkOKAQAnBIv/Z4mKAQEjJwRlRDEAEkQnCYv/ZyuJigABMQAnBjEAUEm+RQFBAAQojACJiwCACAAAAAAAAABkUChQKFCLAUy/IyplRCIIKkxnK4wAiYoBASNHAoAARwIxACcGMQBQvkUBQAAEKIwAiSMnBWVESSIIJwVMZzIHFov/iwZQTFAoUChQKFBMFkmMACcHTFBMv4AAjAEjjAMijAWLA4EKDEEAPiMqZUSLBQ9BADSLBSIISYwFIyplRA6LAYwCiwOMBEEAEosDIgiLAYAFanVyb3JQjAKMBIsCjAGLBIwDQv+6JwqLAElOAlBJvEiLAb+MAImKAgEjgAAxAIv+FxZJJwdMUEm+SEknCBJBAAQojACJJwqLA1C+SIAAEkEABCiMAImABHZvdGWLAlCAC2p1cm9yX3ZvdGVzTFBJjAC+RQFBAAQojACJMgcWiwKL/1BMUIsATL+L/yuoQQBQiwVJJFsiCBZcOIwFiwSLBUlOAr9JJFtJTgKMASVbCIEHD0EAFIsBgQcPQQAQiwUrXDCMBYsEiwW/K4wAiYsFgAgAAAAAAAAAAlwwjAVC/+SLBUklWyIIFlxAjAVC/62KAQGL/xcWJwdMUL5ISScIEkEABCcITImLAEyJigEBJwaL/1C+QAAKi/8oUChQKFBMiYsATIkjKmVEFok=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}