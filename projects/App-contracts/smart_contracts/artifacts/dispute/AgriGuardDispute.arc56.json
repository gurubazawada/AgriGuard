{
    "name": "AgriGuardDispute",
    "structs": {
        "DisputeData": [
            {
                "name": "policy_id",
                "type": "uint64"
            },
            {
                "name": "claimant",
                "type": "address"
            },
            {
                "name": "reason",
                "type": "string"
            },
            {
                "name": "created_at",
                "type": "uint64"
            },
            {
                "name": "status",
                "type": "uint64"
            },
            {
                "name": "yes_votes",
                "type": "uint64"
            },
            {
                "name": "no_votes",
                "type": "uint64"
            },
            {
                "name": "total_votes",
                "type": "uint64"
            },
            {
                "name": "voting_deadline",
                "type": "uint64"
            },
            {
                "name": "resolution_round",
                "type": "uint64"
            }
        ],
        "DisputeEvent": [
            {
                "name": "dispute_id",
                "type": "uint64"
            },
            {
                "name": "action",
                "type": "string"
            },
            {
                "name": "juror",
                "type": "address"
            },
            {
                "name": "timestamp",
                "type": "uint64"
            },
            {
                "name": "vote_value",
                "type": "uint64"
            }
        ],
        "DisputeStats": [
            {
                "name": "total_disputes",
                "type": "uint64"
            },
            {
                "name": "resolved_disputes",
                "type": "uint64"
            },
            {
                "name": "rejected_disputes",
                "type": "uint64"
            },
            {
                "name": "total_votes_cast",
                "type": "uint64"
            },
            {
                "name": "active_jurors",
                "type": "uint64"
            }
        ],
        "JurorData": [
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "reputation",
                "type": "uint64"
            },
            {
                "name": "total_votes",
                "type": "uint64"
            },
            {
                "name": "correct_votes",
                "type": "uint64"
            },
            {
                "name": "registration_round",
                "type": "uint64"
            },
            {
                "name": "last_vote_round",
                "type": "uint64"
            },
            {
                "name": "staked_amount",
                "type": "uint64"
            }
        ],
        "VoteData": [
            {
                "name": "juror",
                "type": "address"
            },
            {
                "name": "vote",
                "type": "uint64"
            },
            {
                "name": "timestamp",
                "type": "uint64"
            },
            {
                "name": "dispute_id",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "create_application",
            "args": [
                {
                    "type": "address",
                    "name": "admin"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Initialize the dispute contract with enhanced features",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_insurance_contract",
            "args": [
                {
                    "type": "address",
                    "name": "contract_address"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Set the main insurance contract address (admin only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "register_juror",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Enhanced juror registration with staking requirement",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_dispute",
            "args": [
                {
                    "type": "uint64",
                    "name": "policy_id"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Enhanced dispute creation with advanced juror selection and timing",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "vote_on_dispute",
            "args": [
                {
                    "type": "uint64",
                    "name": "dispute_id"
                },
                {
                    "type": "uint64",
                    "name": "vote"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Enhanced voting system with time validation and reputation tracking",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_dispute",
            "args": [
                {
                    "type": "uint64",
                    "name": "dispute_id"
                }
            ],
            "returns": {
                "type": "(uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
                "struct": "DisputeData"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get dispute information",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_juror_info",
            "args": [
                {
                    "type": "address",
                    "name": "juror_address"
                }
            ],
            "returns": {
                "type": "(address,uint64,uint64,uint64,uint64,uint64,uint64)",
                "struct": "JurorData"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get juror information",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_total_jurors",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get total number of registered jurors",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_statistics",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64,uint64)",
                "struct": "DisputeStats"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get comprehensive dispute resolution statistics",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_event",
            "args": [
                {
                    "type": "uint64",
                    "name": "event_id"
                }
            ],
            "returns": {
                "type": "(uint64,string,address,uint64,uint64)",
                "struct": "DisputeEvent"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get a specific event by ID",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_recent_events",
            "args": [
                {
                    "type": "uint64",
                    "name": "limit"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get recent events (returns count and starting event ID)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_dispute_status",
            "args": [
                {
                    "type": "uint64",
                    "name": "dispute_id"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get enhanced dispute status with time-based information",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_active_disputes",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get count of active disputes and total disputes",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_juror_eligibility",
            "args": [
                {
                    "type": "address",
                    "name": "juror_address"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Validate juror eligibility and return status code",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_juror_assigned_disputes",
            "args": [
                {
                    "type": "address",
                    "name": "juror_address"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get all disputes assigned to a specific juror",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "is_juror_assigned_to_dispute",
            "args": [
                {
                    "type": "address",
                    "name": "juror_address"
                },
                {
                    "type": "uint64",
                    "name": "dispute_id"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Check if a juror is assigned to vote on a specific dispute",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mark_dispute_processed",
            "args": [
                {
                    "type": "uint64",
                    "name": "dispute_id"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Mark a dispute as processed/deleted (admin only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "trigger_policy_processing",
            "args": [
                {
                    "type": "uint64",
                    "name": "policy_id"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Trigger policy processing in the insurance contract via inner transaction",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "\n    Enhanced Dispute Resolution Contract for AgriGuard Insurance with Algorand Features\n\n    Features:\n    - Community-based dispute resolution with enhanced juror management\n    - Time-based voting deadlines and dispute lifecycle management\n    - Event logging and statistics tracking\n    - Cross-contract communication with insurance contract\n    - Asset-based juror staking system\n    - Advanced voting mechanisms with reputation-based selection\n    ",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 6,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "admin": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YWRtaW4="
                },
                "insurance_contract": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "aW5zdXJhbmNlX2NvbnRyYWN0"
                },
                "next_dispute_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmV4dF9kaXNwdXRlX2lk"
                },
                "total_jurors": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfanVyb3Jz"
                },
                "contract_creation_round": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y29udHJhY3RfY3JlYXRpb25fcm91bmQ="
                },
                "voting_duration_rounds": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dm90aW5nX2R1cmF0aW9uX3JvdW5kcw=="
                },
                "min_stake_amount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWluX3N0YWtlX2Ftb3VudA=="
                },
                "next_event_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmV4dF9ldmVudF9pZA=="
                }
            },
            "local": {},
            "box": {
                "stats_box": {
                    "keyType": "AVMString",
                    "valueType": "DisputeStats",
                    "key": "c3RhdHNfYm94"
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "disputes": {
                    "keyType": "uint64",
                    "valueType": "DisputeData",
                    "prefix": "ZGlzcHV0ZXM="
                },
                "jurors": {
                    "keyType": "address",
                    "valueType": "JurorData",
                    "prefix": "anVyb3Jz"
                },
                "dispute_jurors": {
                    "keyType": "uint64",
                    "valueType": "AVMBytes",
                    "prefix": "ZGlzcHV0ZV9qdXJvcnM="
                },
                "juror_disputes": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMBytes",
                    "prefix": "anVyb3JfZGlzcHV0ZXM="
                },
                "juror_votes": {
                    "keyType": "AVMBytes",
                    "valueType": "VoteData",
                    "prefix": "anVyb3Jfdm90ZXM="
                },
                "event_log": {
                    "keyType": "uint64",
                    "valueType": "DisputeEvent",
                    "prefix": "ZXZlbnRfbG9n"
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1201
                    ],
                    "errorMessage": "Contract initialization period not complete"
                },
                {
                    "pc": [
                        1341
                    ],
                    "errorMessage": "Contract not fully operational yet"
                },
                {
                    "pc": [
                        2073,
                        2474
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        2821
                    ],
                    "errorMessage": "Insurance contract not set"
                },
                {
                    "pc": [
                        1687
                    ],
                    "errorMessage": "Juror voted too recently"
                },
                {
                    "pc": [
                        531,
                        550,
                        569,
                        591,
                        618,
                        637,
                        653,
                        672,
                        691,
                        710,
                        726,
                        742,
                        761,
                        780,
                        802,
                        821,
                        837,
                        856
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1160
                    ],
                    "errorMessage": "Only admin"
                },
                {
                    "pc": [
                        2708
                    ],
                    "errorMessage": "Only admin can mark disputes as processed"
                },
                {
                    "pc": [
                        860
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        534,
                        553,
                        572,
                        594,
                        621,
                        640,
                        656,
                        675,
                        694,
                        713,
                        729,
                        745,
                        764,
                        783,
                        805,
                        824,
                        840
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1156,
                        2704,
                        2748
                    ],
                    "errorMessage": "check self.admin exists"
                },
                {
                    "pc": [
                        1195,
                        1335
                    ],
                    "errorMessage": "check self.contract_creation_round exists"
                },
                {
                    "pc": [
                        1892,
                        2817
                    ],
                    "errorMessage": "check self.insurance_contract exists"
                },
                {
                    "pc": [
                        1207
                    ],
                    "errorMessage": "check self.min_stake_amount exists"
                },
                {
                    "pc": [
                        1346,
                        2493,
                        2611
                    ],
                    "errorMessage": "check self.next_dispute_id exists"
                },
                {
                    "pc": [
                        983,
                        2403
                    ],
                    "errorMessage": "check self.next_event_id exists"
                },
                {
                    "pc": [
                        1010,
                        2231
                    ],
                    "errorMessage": "check self.stats_box exists"
                },
                {
                    "pc": [
                        1243,
                        1438,
                        1450,
                        1568,
                        2225
                    ],
                    "errorMessage": "check self.total_jurors exists"
                },
                {
                    "pc": [
                        1361
                    ],
                    "errorMessage": "check self.voting_duration_rounds exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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AEy/gUpbgQcPQQCdiweBOluBBA9BAMiLBypcMosDXFqMBycSiPy8iwZJvEiLB0lOAr8kWyISQQCPgBIAEGRpc3B1dGVfcmVzb2x2ZWSL/osETwKL/4j8WyMnCGVEMgMTQQAwgC1DUk9TU19DT05UUkFDVF9TRVRUTEVNRU5Uc2V0dGxlbWVudF90cmlnZ2VyZWSwgBBESVNQVVRFX1JFU09MVkVEiwRQsCcViPw1i/6LBIALAAl2b3RlX2Nhc3SL/4j77yqMAImAEgAQZGlzcHV0ZV9yZWplY3RlZEL/bosHJxhcMosDXFqMBycTiPvzQv80iwdJgUJbIggWXEKMB0L+14oBAYv/FxYnBExQvkhJVwggMgMSQQBogGQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATImLAEyJigEBJweL/1C+QAAQi/8oUChQKFAoUChQKFBMiYsATIkjK2VEFoknC75EiYoBAYv/FxYnEExQvkhJgDwAAAAAAAAAAAA6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASQQBPgEsAAAAAAAAAAAA6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9ldmVudF9ub3RfZm91bmRMiYsATImKAQEjJwplRCIJSYv/FwkiCEkiDEEAAyKMAYsAFosBFlCMAImKAQGL/xcWJwRMUL5AAAMoTIkyBosAgVJbDUEAC4sAJFtAAAQnDUyJiwBXMghMiYoAAYAAI0knBmVMSU8CRCIJIosEiwIMQQAliwQWJwRMUL5IJFuLAYwAQAAGiwEiCIwAiwCMAYsEIgiMBEL/04sBFosDFlCMAImKAQEnB4v/UL5AAAMoTIkyBosAgThbCSQMQQADKkyJiwCBIFslDEEABCcYTIknDUyJigEBI4AAIycGZUQiiwOLAgxBACeL/ycZUCcMTFC+RQGLAYwAQQAHiwEnGVCMAIsAjAGLAyIIjANC/9GLAYwAiYoCAYv+gAtkaXNwdXRlX2tleVAnDExQvkUBKCpPAk2JigEBIycFZUQxABJEi/8XFicETFBJvkAABCiMAImLAScNXDKLAEm8SEy/JxSI+TMjJwVlRIv/TIATABFkaXNwdXRlX3Byb2Nlc3NlZCiI+OKAGkRJU1BVVEVfUFJPQ0VTU0VEcHJvY2Vzc2VksCqMAImKAQEjJwhlRDIDE0SANFRSSUdHRVJfUE9MSUNZX1BST0NFU1NJTkdwb2xpY3lfcHJvY2Vzc2luZ190cmlnZ2VyZWSwKok=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}