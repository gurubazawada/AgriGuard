{
  "version": 3,
  "sources": [
    "../../insurance/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCQ;;AAAa;;AAAb;AACA;;AAAc;;AAAd;AACA;AAAsB;AAAtB;AAfR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAoRK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjCA;;AAAA;AAAA;AAAA;;AAAA;AAnPL;;;AAmPK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlCA;;AAAA;AAAA;AAAA;;AAAA;AAjNL;;;AAAA;;;AAAA;;;AAAA;;;AAiNK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAtLL;;;AAsLK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAjLL;;;AAiLK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AArJL;;;AAAA;;;AAqJK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhCA;;AAAA;AAAA;AAAA;;AAAA;AArHL;;;AAAA;;;AAqHK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAtCA;;AAAA;AAAA;AAAA;;AAAA;AA/EL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AA+EK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhDA;;AAAA;AAAA;AAAA;;AAAA;AA/BL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AA+BK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAzBL;;;AAyBK;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AApBL;;;AAoBK;;;AAAA;;AAAL;;;AAGQ;;AAAA;;AAAA;;AAER;;;AAGe;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AACA;;AAAA;;AAAA;;AAER;;;AAmBe;;AAAqB;AAArB;AAAP;AAQY;AAAA;AAAA;AAAA;AACZ;AAAuB;AAAvB;AAAA;AAAA;AAAA;AAG6B;;AADf;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAUF;AAVE;AAAA;;AAAA;AAcA;AAAA;AAAd;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAEA;AAER;;;AAiBoB;AAAA;AAAA;AAAA;AACZ;AAAuB;AAAvB;AAAA;AAAA;AAAA;AAG6B;;AADf;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAUF;AAVE;AAAA;;AAAA;AAcA;AAAA;AAAd;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAEA;AAER;;;AAOe;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AAEA;;AAAM;AAC4B;AAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGP;;AAAA;AAAA;AAAP;AAES;AACN;;AAAA;AAAmB;AAAnB;AAAX;;;AACY;;AAAS;;AAAA;AAAT;;AAEZ;;AAAA;;;AACY;AACa;;AAAA;;;;;;;;;AADb;;;AAGQ;;;;AAHR;AAOJ;;AAAsB;;AAAtB;;AACA;;AAAA;AAAA;;AAAA;AAAA;AAEO;;AAAA;AAAP;;AAAA;AAER;;;AAMQ;;AAAM;AACsB;;AAA5B;AAGkC;AAApB;AAAA;AAAA;AAAA;AAGX;;;AACQ;AAAP;;AAAA;AAES;;AAAA;;;AAAV;;AAAA;AAAX;;;AACmB;AAAP;;AAAA;AAGD;;AAAA;;AAAA;AAAX;;;AACmB;AAAP;;AAAA;AAKG;;AAAP;;AAAA;AAER;;;AAGmC;;AAAA;AAAA;AAApB;AAAA;AAAA;AAAA;AAAA;AAAP;AAER;;;;;;;AAOgB;AACU;;AAGC;AAAA;AAAA;AAAH;AAAP;;AAAA;;AAAA;AAAjB;;;AAEmC;;AAAA;AAApB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;AAAf;;;AAC8B;;AAAA;AAAA;AACX;;;AAAA;;AAAA;;;;;;;;;AAAnB;;;AACoB;;AAAS;AAAT;AAAA;;;;;;;AACpB;;;;;;;;;;;;;;;;;;;;;;AANiB;;AAAA;AAAA;AAAA;;;;;AASK;;AAAA;AAAmB;;AAAA;AAA1B;AAAP;;AAAA;AAKkB;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAX;AAAP;AAER;;;AAamB;;AAAA;AAAc;AAAd;AAGsB;;AAAA;AAAqB;AAArB;AAAf;AAAA;AAGqB;;AAAA;AAAd;AAAA;AAGY;;AAAA;AAAwB;AAAxB;AAAf;AAAA;AAGf;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAA+E;;;;AAAhF;AAAN;AAGU;;AACP;AAAX;;;AADkB;;AAEN;;AAEG;;AAAA;AAAP;AAAA;AAER;;;AAMQ;;AAAM;AAG4B;AAApB;AAAA;AAAA;AAAA;AAAA;AAGX;;;AAEQ;AAAP;;AAAA;AAGwB;;AACf;;AAAA;;;AAAV;AAAX;;;AAEmB;AAAP;;AAAA;AAGD;;AAAA;;AAAA;AAA8B;AAA9B;AAAX;;;AAEmB;AAAP;;AAAA;AAIJ;;AAAA;;AAEO;;AAAP;;AAAA;AAMuB;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACR;AAAA;AAAA;AAAA;AAAX;AAHG;;AAAA;AAAA;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 100 2 1000"
    },
    "9": {
      "op": "bytecblock 0x151f7c75 \"next_policy_id\" 0x0000000000000000 \"policies\" \"admin\" \"oracle\" 0x0000000000000001 0x0062"
    },
    "74": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "76": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "79": {
      "op": "bytec 4 // \"admin\"",
      "defined_out": [
        "\"admin\""
      ],
      "stack_out": [
        "\"admin\""
      ]
    },
    "81": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"admin\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"admin\"",
        "materialized_values%0#0"
      ]
    },
    "83": {
      "op": "app_global_put",
      "stack_out": []
    },
    "84": {
      "op": "bytec 5 // \"oracle\"",
      "defined_out": [
        "\"oracle\""
      ],
      "stack_out": [
        "\"oracle\""
      ]
    },
    "86": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"oracle\"",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "\"oracle\"",
        "materialized_values%1#0"
      ]
    },
    "88": {
      "op": "app_global_put",
      "stack_out": []
    },
    "89": {
      "op": "bytec_1 // \"next_policy_id\"",
      "defined_out": [
        "\"next_policy_id\""
      ],
      "stack_out": [
        "\"next_policy_id\""
      ]
    },
    "90": {
      "op": "intc_0 // 1",
      "defined_out": [
        "\"next_policy_id\"",
        "1"
      ],
      "stack_out": [
        "\"next_policy_id\"",
        "1"
      ]
    },
    "91": {
      "op": "app_global_put",
      "stack_out": []
    },
    "92": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "94": {
      "op": "bz main_after_if_else@17",
      "stack_out": []
    },
    "97": {
      "op": "pushbytess 0x894a716e 0x3368f556 0x671721d6 0x50f992ac 0xef909f38 0x5c1689a2 0xeb0de02b 0x3f78f6e3 0xabf6d51a 0xfa20020c 0xdce31bbe 0x1a0e2048 // method \"create_application(address)void\", method \"set_oracle(address)void\", method \"buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64\", method \"buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64\", method \"oracle_settle(uint64,uint64)uint64\", method \"dispute_settlement(uint64,string)uint64\", method \"get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)\", method \"get_policies_by_owner(address)(uint64,uint64)\", method \"get_policy_count()uint64\", method \"calculate_fee(uint64,uint64,uint64,uint64)uint64\", method \"delete_policy(uint64)uint64\", method \"get_globals()(address,address,uint64)\"",
      "defined_out": [
        "Method(buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(calculate_fee(uint64,uint64,uint64,uint64)uint64)",
        "Method(create_application(address)void)",
        "Method(delete_policy(uint64)uint64)",
        "Method(dispute_settlement(uint64,string)uint64)",
        "Method(get_globals()(address,address,uint64))",
        "Method(get_policies_by_owner(address)(uint64,uint64))",
        "Method(get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(get_policy_count()uint64)",
        "Method(oracle_settle(uint64,uint64)uint64)",
        "Method(set_oracle(address)void)"
      ],
      "stack_out": [
        "Method(create_application(address)void)",
        "Method(set_oracle(address)void)",
        "Method(buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(oracle_settle(uint64,uint64)uint64)",
        "Method(dispute_settlement(uint64,string)uint64)",
        "Method(get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(get_policies_by_owner(address)(uint64,uint64))",
        "Method(get_policy_count()uint64)",
        "Method(calculate_fee(uint64,uint64,uint64,uint64)uint64)",
        "Method(delete_policy(uint64)uint64)",
        "Method(get_globals()(address,address,uint64))"
      ]
    },
    "159": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(calculate_fee(uint64,uint64,uint64,uint64)uint64)",
        "Method(create_application(address)void)",
        "Method(delete_policy(uint64)uint64)",
        "Method(dispute_settlement(uint64,string)uint64)",
        "Method(get_globals()(address,address,uint64))",
        "Method(get_policies_by_owner(address)(uint64,uint64))",
        "Method(get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(get_policy_count()uint64)",
        "Method(oracle_settle(uint64,uint64)uint64)",
        "Method(set_oracle(address)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_application(address)void)",
        "Method(set_oracle(address)void)",
        "Method(buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(oracle_settle(uint64,uint64)uint64)",
        "Method(dispute_settlement(uint64,string)uint64)",
        "Method(get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(get_policies_by_owner(address)(uint64,uint64))",
        "Method(get_policy_count()uint64)",
        "Method(calculate_fee(uint64,uint64,uint64,uint64)uint64)",
        "Method(delete_policy(uint64)uint64)",
        "Method(get_globals()(address,address,uint64))",
        "tmp%2#0"
      ]
    },
    "162": {
      "op": "match main_create_application_route@5 main_set_oracle_route@6 main_buy_policy_with_payment_route@7 main_buy_policy_route@8 main_oracle_settle_route@9 main_dispute_settlement_route@10 main_get_policy_route@11 main_get_policies_by_owner_route@12 main_get_policy_count_route@13 main_calculate_fee_route@14 main_delete_policy_route@15 main_get_globals_route@16",
      "stack_out": []
    },
    "188": {
      "block": "main_after_if_else@17",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "189": {
      "op": "return",
      "stack_out": []
    },
    "190": {
      "block": "main_get_globals_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "192": {
      "op": "!",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "193": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "194": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "196": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "197": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.get_globals",
      "op": "callsub get_globals",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "200": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "0x151f7c75"
      ]
    },
    "201": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%72#0"
      ]
    },
    "202": {
      "op": "concat",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "203": {
      "op": "log",
      "stack_out": []
    },
    "204": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "205": {
      "op": "return",
      "stack_out": []
    },
    "206": {
      "block": "main_delete_policy_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "208": {
      "op": "!",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "209": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "210": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "212": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "213": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%22#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%22#0"
      ]
    },
    "216": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.delete_policy",
      "op": "callsub delete_policy",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "219": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "0x151f7c75"
      ]
    },
    "220": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%66#0"
      ]
    },
    "221": {
      "op": "concat",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "222": {
      "op": "log",
      "stack_out": []
    },
    "223": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "224": {
      "op": "return",
      "stack_out": []
    },
    "225": {
      "block": "main_calculate_fee_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "227": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "228": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "229": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "231": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "232": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%18#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%18#0"
      ]
    },
    "235": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%18#0",
        "reinterpret_bytes[8]%19#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%18#0",
        "reinterpret_bytes[8]%19#0"
      ]
    },
    "238": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%18#0",
        "reinterpret_bytes[8]%19#0",
        "reinterpret_bytes[8]%20#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%18#0",
        "reinterpret_bytes[8]%19#0",
        "reinterpret_bytes[8]%20#0"
      ]
    },
    "241": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%18#0",
        "reinterpret_bytes[8]%19#0",
        "reinterpret_bytes[8]%20#0",
        "reinterpret_bytes[8]%21#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%18#0",
        "reinterpret_bytes[8]%19#0",
        "reinterpret_bytes[8]%20#0",
        "reinterpret_bytes[8]%21#0"
      ]
    },
    "244": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.calculate_fee",
      "op": "callsub calculate_fee",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "247": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "0x151f7c75"
      ]
    },
    "248": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%60#0"
      ]
    },
    "249": {
      "op": "concat",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "250": {
      "op": "log",
      "stack_out": []
    },
    "251": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "252": {
      "op": "return",
      "stack_out": []
    },
    "253": {
      "block": "main_get_policy_count_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "255": {
      "op": "!",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "256": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "257": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "259": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "260": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.get_policy_count",
      "op": "callsub get_policy_count",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "263": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "0x151f7c75"
      ]
    },
    "264": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%54#0"
      ]
    },
    "265": {
      "op": "concat",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "266": {
      "op": "log",
      "stack_out": []
    },
    "267": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "268": {
      "op": "return",
      "stack_out": []
    },
    "269": {
      "block": "main_get_policies_by_owner_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "271": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "272": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "273": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "275": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "276": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "279": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.get_policies_by_owner",
      "op": "callsub get_policies_by_owner",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "282": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "0x151f7c75"
      ]
    },
    "283": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%48#0"
      ]
    },
    "284": {
      "op": "concat",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "285": {
      "op": "log",
      "stack_out": []
    },
    "286": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "287": {
      "op": "return",
      "stack_out": []
    },
    "288": {
      "block": "main_get_policy_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "290": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "291": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "292": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "294": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "295": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%17#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%17#0"
      ]
    },
    "298": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.get_policy",
      "op": "callsub get_policy",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "301": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "0x151f7c75"
      ]
    },
    "302": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%42#0"
      ]
    },
    "303": {
      "op": "concat",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "304": {
      "op": "log",
      "stack_out": []
    },
    "305": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "306": {
      "op": "return",
      "stack_out": []
    },
    "307": {
      "block": "main_dispute_settlement_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "309": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "310": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "311": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "313": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "314": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%16#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%16#0"
      ]
    },
    "317": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%16#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%16#0",
        "tmp%35#0"
      ]
    },
    "320": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.dispute_settlement",
      "op": "callsub dispute_settlement",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "323": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "0x151f7c75"
      ]
    },
    "324": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%36#0"
      ]
    },
    "325": {
      "op": "concat",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "326": {
      "op": "log",
      "stack_out": []
    },
    "327": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "328": {
      "op": "return",
      "stack_out": []
    },
    "329": {
      "block": "main_oracle_settle_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "331": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "332": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "333": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "335": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "336": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "339": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "342": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.oracle_settle",
      "op": "callsub oracle_settle",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "345": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "0x151f7c75"
      ]
    },
    "346": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%29#0"
      ]
    },
    "347": {
      "op": "concat",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "348": {
      "op": "log",
      "stack_out": []
    },
    "349": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "350": {
      "op": "return",
      "stack_out": []
    },
    "351": {
      "block": "main_buy_policy_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "353": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "354": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "355": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "357": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "358": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "361": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%7#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "364": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "367": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "370": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "373": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "376": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "379": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "382": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.buy_policy",
      "op": "callsub buy_policy",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "385": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "0x151f7c75"
      ]
    },
    "386": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%23#0"
      ]
    },
    "387": {
      "op": "concat",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "388": {
      "op": "log",
      "stack_out": []
    },
    "389": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "390": {
      "op": "return",
      "stack_out": []
    },
    "391": {
      "block": "main_buy_policy_with_payment_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "393": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "394": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "395": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "397": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "398": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "401": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "404": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "407": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "410": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "413": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "416": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "419": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "422": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.buy_policy_with_payment",
      "op": "callsub buy_policy_with_payment",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "425": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "0x151f7c75"
      ]
    },
    "426": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%16#0"
      ]
    },
    "427": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "428": {
      "op": "log",
      "stack_out": []
    },
    "429": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "430": {
      "op": "return",
      "stack_out": []
    },
    "431": {
      "block": "main_set_oracle_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "433": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "434": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "435": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "437": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "438": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "441": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.set_oracle",
      "op": "callsub set_oracle",
      "stack_out": []
    },
    "444": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "445": {
      "op": "return",
      "stack_out": []
    },
    "446": {
      "block": "main_create_application_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "448": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "449": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "450": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "452": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "453": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "454": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "457": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.create_application",
      "op": "callsub create_application",
      "stack_out": []
    },
    "460": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "461": {
      "op": "return",
      "stack_out": []
    },
    "462": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.create_application",
      "params": {
        "admin#0": "bytes"
      },
      "block": "create_application",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "465": {
      "op": "bytec 4 // \"admin\"",
      "defined_out": [
        "\"admin\""
      ],
      "stack_out": [
        "\"admin\""
      ]
    },
    "467": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"admin\"",
        "admin#0 (copy)"
      ],
      "stack_out": [
        "\"admin\"",
        "admin#0 (copy)"
      ]
    },
    "469": {
      "op": "app_global_put",
      "stack_out": []
    },
    "470": {
      "retsub": true,
      "op": "retsub"
    },
    "471": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.set_oracle",
      "params": {
        "oracle#0": "bytes"
      },
      "block": "set_oracle",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "474": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "476": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "477": {
      "op": "bytec 4 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "479": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "480": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "481": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "482": {
      "error": "Only admin can set oracle",
      "op": "assert // Only admin can set oracle",
      "stack_out": []
    },
    "483": {
      "op": "bytec 5 // \"oracle\"",
      "defined_out": [
        "\"oracle\""
      ],
      "stack_out": [
        "\"oracle\""
      ]
    },
    "485": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"oracle\"",
        "oracle#0 (copy)"
      ],
      "stack_out": [
        "\"oracle\"",
        "oracle#0 (copy)"
      ]
    },
    "487": {
      "op": "app_global_put",
      "stack_out": []
    },
    "488": {
      "retsub": true,
      "op": "retsub"
    },
    "489": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.buy_policy_with_payment",
      "params": {
        "zip_code#0": "bytes",
        "t0#0": "bytes",
        "t1#0": "bytes",
        "cap#0": "bytes",
        "direction#0": "bytes",
        "threshold#0": "bytes",
        "slope#0": "bytes",
        "fee#0": "bytes"
      },
      "block": "buy_policy_with_payment",
      "stack_in": [],
      "op": "proto 8 1"
    },
    "492": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "494": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2"
      ]
    },
    "495": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "496": {
      "error": "Must be called in group transaction",
      "op": "assert // Must be called in group transaction",
      "stack_out": []
    },
    "497": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "498": {
      "op": "bytec_1 // \"next_policy_id\"",
      "defined_out": [
        "\"next_policy_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"next_policy_id\""
      ]
    },
    "499": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "maybe_exists%0#0"
      ]
    },
    "500": {
      "error": "check self.next_policy_id exists",
      "op": "assert // check self.next_policy_id exists",
      "stack_out": [
        "policy_id#0"
      ]
    },
    "501": {
      "op": "dup",
      "defined_out": [
        "policy_id#0",
        "policy_id#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "policy_id#0 (copy)"
      ]
    },
    "502": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "policy_id#0",
        "policy_id#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "policy_id#0 (copy)",
        "1"
      ]
    },
    "503": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "materialized_values%0#0"
      ]
    },
    "504": {
      "op": "bytec_1 // \"next_policy_id\"",
      "stack_out": [
        "policy_id#0",
        "materialized_values%0#0",
        "\"next_policy_id\""
      ]
    },
    "505": {
      "op": "swap",
      "stack_out": [
        "policy_id#0",
        "\"next_policy_id\"",
        "materialized_values%0#0"
      ]
    },
    "506": {
      "op": "app_global_put",
      "stack_out": [
        "policy_id#0"
      ]
    },
    "507": {
      "op": "txn Sender",
      "defined_out": [
        "policy_id#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "policy_id#0",
        "tmp%2#0"
      ]
    },
    "509": {
      "op": "bytec 7 // 0x0062",
      "defined_out": [
        "0x0062",
        "policy_id#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "policy_id#0",
        "tmp%2#0",
        "0x0062"
      ]
    },
    "511": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "512": {
      "op": "frame_dig -7",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "policy_id#0",
        "t0#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%2#0",
        "t0#0 (copy)"
      ]
    },
    "514": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "515": {
      "op": "frame_dig -6",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "policy_id#0",
        "t1#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%3#0",
        "t1#0 (copy)"
      ]
    },
    "517": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "518": {
      "op": "frame_dig -5",
      "defined_out": [
        "cap#0 (copy)",
        "encoded_tuple_buffer%4#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%4#0",
        "cap#0 (copy)"
      ]
    },
    "520": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "521": {
      "op": "frame_dig -4",
      "defined_out": [
        "direction#0 (copy)",
        "encoded_tuple_buffer%5#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%5#0",
        "direction#0 (copy)"
      ]
    },
    "523": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "524": {
      "op": "frame_dig -3",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "policy_id#0",
        "threshold#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%6#0",
        "threshold#0 (copy)"
      ]
    },
    "526": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "527": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "policy_id#0",
        "slope#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%7#0",
        "slope#0 (copy)"
      ]
    },
    "529": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "530": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "fee#0 (copy)",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%8#0",
        "fee#0 (copy)"
      ]
    },
    "532": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "533": {
      "op": "bytec_2 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%9#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%9#0",
        "0x0000000000000000"
      ]
    },
    "534": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "535": {
      "op": "frame_dig -8",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "policy_id#0",
        "zip_code#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%10#0",
        "zip_code#0 (copy)"
      ]
    },
    "537": {
      "op": "concat",
      "defined_out": [
        "policy_data#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "policy_data#0"
      ]
    },
    "538": {
      "op": "swap",
      "stack_out": [
        "policy_data#0",
        "policy_id#0"
      ]
    },
    "539": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "policy_data#0",
        "encoded_value%0#0"
      ]
    },
    "540": {
      "op": "bytec_3 // \"policies\"",
      "defined_out": [
        "\"policies\"",
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "policy_data#0",
        "encoded_value%0#0",
        "\"policies\""
      ]
    },
    "541": {
      "op": "dig 1",
      "defined_out": [
        "\"policies\"",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "policy_data#0"
      ],
      "stack_out": [
        "policy_data#0",
        "encoded_value%0#0",
        "\"policies\"",
        "encoded_value%0#0 (copy)"
      ]
    },
    "543": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "policy_data#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "544": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "policy_data#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "545": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "policy_data#0",
        "{box_del}"
      ],
      "stack_out": [
        "policy_data#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "546": {
      "op": "pop",
      "stack_out": [
        "policy_data#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "547": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0"
      ]
    },
    "549": {
      "op": "box_put",
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "550": {
      "retsub": true,
      "op": "retsub"
    },
    "551": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.buy_policy",
      "params": {
        "zip_code#0": "bytes",
        "t0#0": "bytes",
        "t1#0": "bytes",
        "cap#0": "bytes",
        "direction#0": "bytes",
        "threshold#0": "bytes",
        "slope#0": "bytes",
        "fee#0": "bytes"
      },
      "block": "buy_policy",
      "stack_in": [],
      "op": "proto 8 1"
    },
    "554": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "555": {
      "op": "bytec_1 // \"next_policy_id\"",
      "defined_out": [
        "\"next_policy_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"next_policy_id\""
      ]
    },
    "556": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "maybe_exists%0#0"
      ]
    },
    "557": {
      "error": "check self.next_policy_id exists",
      "op": "assert // check self.next_policy_id exists",
      "stack_out": [
        "policy_id#0"
      ]
    },
    "558": {
      "op": "dup",
      "defined_out": [
        "policy_id#0",
        "policy_id#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "policy_id#0 (copy)"
      ]
    },
    "559": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "policy_id#0",
        "policy_id#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "policy_id#0 (copy)",
        "1"
      ]
    },
    "560": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "materialized_values%0#0"
      ]
    },
    "561": {
      "op": "bytec_1 // \"next_policy_id\"",
      "stack_out": [
        "policy_id#0",
        "materialized_values%0#0",
        "\"next_policy_id\""
      ]
    },
    "562": {
      "op": "swap",
      "stack_out": [
        "policy_id#0",
        "\"next_policy_id\"",
        "materialized_values%0#0"
      ]
    },
    "563": {
      "op": "app_global_put",
      "stack_out": [
        "policy_id#0"
      ]
    },
    "564": {
      "op": "txn Sender",
      "defined_out": [
        "policy_id#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "policy_id#0",
        "tmp%0#0"
      ]
    },
    "566": {
      "op": "bytec 7 // 0x0062",
      "defined_out": [
        "0x0062",
        "policy_id#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "policy_id#0",
        "tmp%0#0",
        "0x0062"
      ]
    },
    "568": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "569": {
      "op": "frame_dig -7",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "policy_id#0",
        "t0#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%2#0",
        "t0#0 (copy)"
      ]
    },
    "571": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "572": {
      "op": "frame_dig -6",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "policy_id#0",
        "t1#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%3#0",
        "t1#0 (copy)"
      ]
    },
    "574": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "575": {
      "op": "frame_dig -5",
      "defined_out": [
        "cap#0 (copy)",
        "encoded_tuple_buffer%4#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%4#0",
        "cap#0 (copy)"
      ]
    },
    "577": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "578": {
      "op": "frame_dig -4",
      "defined_out": [
        "direction#0 (copy)",
        "encoded_tuple_buffer%5#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%5#0",
        "direction#0 (copy)"
      ]
    },
    "580": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "581": {
      "op": "frame_dig -3",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "policy_id#0",
        "threshold#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%6#0",
        "threshold#0 (copy)"
      ]
    },
    "583": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "584": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "policy_id#0",
        "slope#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%7#0",
        "slope#0 (copy)"
      ]
    },
    "586": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "587": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "fee#0 (copy)",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%8#0",
        "fee#0 (copy)"
      ]
    },
    "589": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "590": {
      "op": "bytec_2 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%9#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%9#0",
        "0x0000000000000000"
      ]
    },
    "591": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "592": {
      "op": "frame_dig -8",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "policy_id#0",
        "zip_code#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%10#0",
        "zip_code#0 (copy)"
      ]
    },
    "594": {
      "op": "concat",
      "defined_out": [
        "policy_data#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "policy_data#0"
      ]
    },
    "595": {
      "op": "swap",
      "stack_out": [
        "policy_data#0",
        "policy_id#0"
      ]
    },
    "596": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "policy_data#0",
        "encoded_value%0#0"
      ]
    },
    "597": {
      "op": "bytec_3 // \"policies\"",
      "defined_out": [
        "\"policies\"",
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "policy_data#0",
        "encoded_value%0#0",
        "\"policies\""
      ]
    },
    "598": {
      "op": "dig 1",
      "defined_out": [
        "\"policies\"",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "policy_data#0"
      ],
      "stack_out": [
        "policy_data#0",
        "encoded_value%0#0",
        "\"policies\"",
        "encoded_value%0#0 (copy)"
      ]
    },
    "600": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "policy_data#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "601": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "policy_data#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "602": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "policy_data#0",
        "{box_del}"
      ],
      "stack_out": [
        "policy_data#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "603": {
      "op": "pop",
      "stack_out": [
        "policy_data#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "604": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0"
      ]
    },
    "606": {
      "op": "box_put",
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "607": {
      "retsub": true,
      "op": "retsub"
    },
    "608": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.oracle_settle",
      "params": {
        "policy_id#0": "bytes",
        "approved#0": "bytes"
      },
      "block": "oracle_settle",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "611": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "613": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "614": {
      "op": "bytec 5 // \"oracle\"",
      "defined_out": [
        "\"oracle\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"oracle\""
      ]
    },
    "616": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "617": {
      "error": "check self.oracle exists",
      "op": "assert // check self.oracle exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "618": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "619": {
      "error": "Only oracle",
      "op": "assert // Only oracle",
      "stack_out": []
    },
    "620": {
      "op": "frame_dig -2",
      "defined_out": [
        "policy_id#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0 (copy)"
      ]
    },
    "622": {
      "op": "btoi",
      "defined_out": [
        "pid#0"
      ],
      "stack_out": [
        "pid#0"
      ]
    },
    "623": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "624": {
      "op": "bytec_3 // \"policies\"",
      "defined_out": [
        "\"policies\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"policies\""
      ]
    },
    "625": {
      "op": "swap",
      "stack_out": [
        "\"policies\"",
        "encoded_value%0#0"
      ]
    },
    "626": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "627": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "628": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%1#0",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "maybe_exists%1#0"
      ]
    },
    "629": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0"
      ]
    },
    "630": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "policy_data#0"
      ]
    },
    "631": {
      "op": "pushint 90 // 90",
      "defined_out": [
        "90",
        "box_prefixed_key%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "policy_data#0",
        "90"
      ]
    },
    "633": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "tmp%3#0"
      ]
    },
    "634": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "tmp%4#0"
      ]
    },
    "635": {
      "error": "Policy already settled",
      "op": "assert // Policy already settled",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0"
      ]
    },
    "636": {
      "op": "intc_1 // 0"
    },
    "637": {
      "op": "frame_dig -1",
      "defined_out": [
        "approved#0 (copy)",
        "box_prefixed_key%0#0",
        "payout#0",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "approved#0 (copy)"
      ]
    },
    "639": {
      "op": "btoi",
      "defined_out": [
        "box_prefixed_key%0#0",
        "payout#0",
        "policy_data#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "tmp%5#0"
      ]
    },
    "640": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "box_prefixed_key%0#0",
        "payout#0",
        "policy_data#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "tmp%5#0",
        "1"
      ]
    },
    "641": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "payout#0",
        "policy_data#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "tmp%6#0"
      ]
    },
    "642": {
      "op": "bz oracle_settle_after_if_else@2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0"
      ]
    },
    "645": {
      "op": "frame_dig 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "policy_data#0"
      ]
    },
    "647": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "50",
        "box_prefixed_key%0#0",
        "payout#0",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "policy_data#0",
        "50"
      ]
    },
    "649": {
      "op": "extract_uint64",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "payout#0"
      ]
    },
    "650": {
      "op": "frame_bury 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0"
      ]
    },
    "652": {
      "block": "oracle_settle_after_if_else@2",
      "stack_in": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "payout#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "payout#0"
      ]
    },
    "654": {
      "op": "bz oracle_settle_after_if_else@5",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0"
      ]
    },
    "657": {
      "op": "itxn_begin"
    },
    "658": {
      "op": "frame_dig 1",
      "defined_out": [
        "payout#0",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "policy_data#0"
      ]
    },
    "660": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "payout#0",
        "policy_data#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "663": {
      "op": "frame_dig 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "reinterpret_bytes[32]%0#0",
        "payout#0"
      ]
    },
    "665": {
      "op": "itxn_field Amount",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "667": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0"
      ]
    },
    "669": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay",
        "payout#0",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "pay"
      ]
    },
    "670": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0"
      ]
    },
    "672": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "payout#0",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "1000"
      ]
    },
    "674": {
      "op": "itxn_field Fee",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0"
      ]
    },
    "676": {
      "op": "itxn_submit"
    },
    "677": {
      "block": "oracle_settle_after_if_else@5",
      "stack_in": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "policy_data#0"
      ]
    },
    "679": {
      "op": "bytec 6 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "policy_data#0",
        "0x0000000000000001"
      ]
    },
    "681": {
      "op": "replace2 90",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "policy_data#0"
      ]
    },
    "683": {
      "op": "frame_dig 0",
      "defined_out": [
        "box_prefixed_key%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "policy_data#0",
        "box_prefixed_key%0#0"
      ]
    },
    "685": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "policy_data#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "686": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "policy_data#0",
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "687": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "policy_data#0",
        "box_prefixed_key%0#0"
      ]
    },
    "688": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "box_prefixed_key%0#0",
        "policy_data#0"
      ]
    },
    "689": {
      "op": "box_put",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0"
      ]
    },
    "690": {
      "op": "frame_dig 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "payout#0",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "payout#0"
      ]
    },
    "692": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#0",
        "payout#0",
        "policy_data#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "val_as_bytes%0#0"
      ]
    },
    "693": {
      "op": "frame_bury 0"
    },
    "695": {
      "retsub": true,
      "op": "retsub"
    },
    "696": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.dispute_settlement",
      "params": {
        "policy_id#0": "bytes",
        "reason#0": "bytes"
      },
      "block": "dispute_settlement",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "699": {
      "op": "frame_dig -2",
      "defined_out": [
        "policy_id#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0 (copy)"
      ]
    },
    "701": {
      "op": "btoi",
      "defined_out": [
        "pid#0"
      ],
      "stack_out": [
        "pid#0"
      ]
    },
    "702": {
      "op": "txn Sender",
      "defined_out": [
        "caller#0",
        "pid#0"
      ],
      "stack_out": [
        "pid#0",
        "caller#0"
      ]
    },
    "704": {
      "op": "swap",
      "defined_out": [
        "caller#0",
        "pid#0"
      ],
      "stack_out": [
        "caller#0",
        "pid#0"
      ]
    },
    "705": {
      "op": "itob",
      "defined_out": [
        "caller#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "caller#0",
        "encoded_value%0#0"
      ]
    },
    "706": {
      "op": "bytec_3 // \"policies\"",
      "defined_out": [
        "\"policies\"",
        "caller#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "caller#0",
        "encoded_value%0#0",
        "\"policies\""
      ]
    },
    "707": {
      "op": "swap",
      "stack_out": [
        "caller#0",
        "\"policies\"",
        "encoded_value%0#0"
      ]
    },
    "708": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "caller#0"
      ],
      "stack_out": [
        "caller#0",
        "box_prefixed_key%0#0"
      ]
    },
    "709": {
      "op": "box_get",
      "defined_out": [
        "caller#0",
        "exists#0",
        "policy_data#0"
      ],
      "stack_out": [
        "caller#0",
        "policy_data#0",
        "exists#0"
      ]
    },
    "710": {
      "op": "bnz dispute_settlement_after_if_else@2",
      "stack_out": [
        "caller#0",
        "policy_data#0"
      ]
    },
    "713": {
      "op": "bytec_2 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "caller#0",
        "policy_data#0"
      ],
      "stack_out": [
        "caller#0",
        "policy_data#0",
        "0x0000000000000000"
      ]
    },
    "714": {
      "op": "frame_bury 0"
    },
    "716": {
      "retsub": true,
      "op": "retsub"
    },
    "717": {
      "block": "dispute_settlement_after_if_else@2",
      "stack_in": [
        "caller#0",
        "policy_data#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "policy_data#0"
      ],
      "stack_out": [
        "caller#0",
        "policy_data#0",
        "policy_data#0"
      ]
    },
    "719": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "policy_data#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "caller#0",
        "policy_data#0",
        "tmp%0#0"
      ]
    },
    "722": {
      "op": "frame_dig 0",
      "defined_out": [
        "caller#0",
        "policy_data#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "caller#0",
        "policy_data#0",
        "tmp%0#0",
        "caller#0"
      ]
    },
    "724": {
      "op": "!=",
      "defined_out": [
        "caller#0",
        "policy_data#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "caller#0",
        "policy_data#0",
        "tmp%1#0"
      ]
    },
    "725": {
      "op": "bz dispute_settlement_after_if_else@4",
      "stack_out": [
        "caller#0",
        "policy_data#0"
      ]
    },
    "728": {
      "op": "bytec_2 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "caller#0",
        "policy_data#0"
      ],
      "stack_out": [
        "caller#0",
        "policy_data#0",
        "0x0000000000000000"
      ]
    },
    "729": {
      "op": "frame_bury 0"
    },
    "731": {
      "retsub": true,
      "op": "retsub"
    },
    "732": {
      "block": "dispute_settlement_after_if_else@4",
      "stack_in": [
        "caller#0",
        "policy_data#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "policy_data#0"
      ],
      "stack_out": [
        "caller#0",
        "policy_data#0",
        "policy_data#0"
      ]
    },
    "734": {
      "op": "pushint 90 // 90",
      "defined_out": [
        "90",
        "policy_data#0"
      ],
      "stack_out": [
        "caller#0",
        "policy_data#0",
        "policy_data#0",
        "90"
      ]
    },
    "736": {
      "op": "extract_uint64",
      "defined_out": [
        "policy_data#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "caller#0",
        "policy_data#0",
        "tmp%3#0"
      ]
    },
    "737": {
      "op": "bnz dispute_settlement_after_if_else@6",
      "stack_out": [
        "caller#0",
        "policy_data#0"
      ]
    },
    "740": {
      "op": "bytec_2 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "policy_data#0"
      ],
      "stack_out": [
        "caller#0",
        "policy_data#0",
        "0x0000000000000000"
      ]
    },
    "741": {
      "op": "frame_bury 0"
    },
    "743": {
      "retsub": true,
      "op": "retsub"
    },
    "744": {
      "block": "dispute_settlement_after_if_else@6",
      "stack_in": [
        "caller#0",
        "policy_data#0"
      ],
      "op": "bytec 6 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "caller#0",
        "policy_data#0",
        "0x0000000000000001"
      ]
    },
    "746": {
      "op": "frame_bury 0"
    },
    "748": {
      "retsub": true,
      "op": "retsub"
    },
    "749": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.get_policy",
      "params": {
        "policy_id#0": "bytes"
      },
      "block": "get_policy",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "752": {
      "op": "frame_dig -1",
      "defined_out": [
        "policy_id#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0 (copy)"
      ]
    },
    "754": {
      "op": "btoi",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "755": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "756": {
      "op": "bytec_3 // \"policies\"",
      "defined_out": [
        "\"policies\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"policies\""
      ]
    },
    "757": {
      "op": "swap",
      "stack_out": [
        "\"policies\"",
        "encoded_value%0#0"
      ]
    },
    "758": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "759": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "760": {
      "op": "pop",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "761": {
      "retsub": true,
      "op": "retsub"
    },
    "762": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.get_policies_by_owner",
      "params": {
        "owner#0": "bytes"
      },
      "block": "get_policies_by_owner",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "765": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "766": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10"
      ]
    },
    "768": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10"
      ]
    },
    "769": {
      "op": "intc_1 // 0"
    },
    "770": {
      "op": "dupn 2"
    },
    "772": {
      "op": "bytec_1 // \"next_policy_id\"",
      "defined_out": [
        "\"next_policy_id\"",
        "0",
        "count#0",
        "first_policy_id#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "0",
        "\"next_policy_id\""
      ]
    },
    "773": {
      "op": "app_global_get_ex",
      "defined_out": [
        "count#0",
        "first_policy_id#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "774": {
      "error": "check self.next_policy_id exists",
      "op": "assert // check self.next_policy_id exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0"
      ]
    },
    "775": {
      "op": "intc_0 // 1",
      "defined_out": [
        "count#0",
        "first_policy_id#0",
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "776": {
      "block": "get_policies_by_owner_for_header@1",
      "stack_in": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "i#0"
      ]
    },
    "778": {
      "op": "frame_dig 5",
      "defined_out": [
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "i#0",
        "maybe_value%0#0"
      ]
    },
    "780": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "781": {
      "op": "bz get_policies_by_owner_after_for@10",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "784": {
      "op": "frame_dig 6",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "i#0"
      ]
    },
    "786": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "encoded_value%0#0"
      ]
    },
    "787": {
      "op": "bytec_3 // \"policies\"",
      "defined_out": [
        "\"policies\"",
        "encoded_value%0#0",
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "encoded_value%0#0",
        "\"policies\""
      ]
    },
    "788": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "\"policies\"",
        "encoded_value%0#0"
      ]
    },
    "789": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "box_prefixed_key%0#0"
      ]
    },
    "790": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "791": {
      "op": "frame_bury 0",
      "defined_out": [
        "box_prefixed_key%0#0",
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "box_prefixed_key%0#0"
      ]
    },
    "793": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "i#0",
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "794": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "maybe_exists%1#0"
      ]
    },
    "796": {
      "op": "frame_dig 4",
      "defined_out": [
        "box_prefixed_key%0#0",
        "first_policy_id#10",
        "i#0",
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "maybe_exists%1#0",
        "first_policy_id#10"
      ]
    },
    "798": {
      "op": "frame_bury 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "first_policy_id#10",
        "i#0",
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "maybe_exists%1#0"
      ]
    },
    "800": {
      "op": "frame_dig 3",
      "defined_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "i#0",
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "maybe_exists%1#0",
        "count#10"
      ]
    },
    "802": {
      "op": "frame_bury 1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "i#0",
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "maybe_exists%1#0"
      ]
    },
    "804": {
      "op": "bz get_policies_by_owner_after_if_else@8",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "807": {
      "op": "frame_dig 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "box_prefixed_key%0#0"
      ]
    },
    "809": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "i#0",
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "policy_data#0",
        "maybe_exists%2#0"
      ]
    },
    "810": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "policy_data#0"
      ]
    },
    "811": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "i#0",
        "maybe_value%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "814": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "i#0",
        "maybe_value%0#0",
        "owner#0 (copy)",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "reinterpret_bytes[32]%0#0",
        "owner#0 (copy)"
      ]
    },
    "816": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "i#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "817": {
      "op": "frame_dig 4",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "tmp%0#0",
        "first_policy_id#10"
      ]
    },
    "819": {
      "op": "frame_bury 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "821": {
      "op": "frame_dig 3",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "tmp%0#0",
        "count#10"
      ]
    },
    "823": {
      "op": "frame_bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "825": {
      "op": "bz get_policies_by_owner_after_if_else@7",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "828": {
      "op": "frame_dig 3",
      "defined_out": [
        "box_prefixed_key%0#0",
        "count#0",
        "count#10",
        "first_policy_id#10",
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "count#0"
      ]
    },
    "830": {
      "op": "intc_0 // 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "count#0",
        "1"
      ]
    },
    "831": {
      "op": "+",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "count#0"
      ]
    },
    "832": {
      "op": "frame_bury 3",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "834": {
      "op": "frame_dig 4",
      "defined_out": [
        "box_prefixed_key%0#0",
        "count#0",
        "count#10",
        "first_policy_id#0",
        "first_policy_id#10",
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "first_policy_id#0"
      ]
    },
    "836": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "first_policy_id#0",
        "first_policy_id#10"
      ]
    },
    "837": {
      "op": "frame_bury 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "first_policy_id#0"
      ]
    },
    "839": {
      "op": "bnz get_policies_by_owner_after_if_else@6",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "842": {
      "op": "frame_dig 6",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "first_policy_id#10"
      ]
    },
    "844": {
      "op": "frame_bury 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "846": {
      "block": "get_policies_by_owner_after_if_else@6",
      "stack_in": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "count#10"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "count#10"
      ]
    },
    "848": {
      "op": "frame_bury 1",
      "defined_out": [
        "count#10"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "850": {
      "block": "get_policies_by_owner_after_if_else@7",
      "stack_in": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ],
      "op": "b get_policies_by_owner_after_if_else@8",
      "defined_out": [
        "count#0",
        "count#10",
        "first_policy_id#0",
        "first_policy_id#10"
      ]
    },
    "853": {
      "block": "get_policies_by_owner_after_if_else@8",
      "stack_in": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "first_policy_id#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "first_policy_id#0"
      ]
    },
    "855": {
      "op": "frame_bury 4",
      "defined_out": [
        "first_policy_id#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "857": {
      "op": "frame_dig 1",
      "defined_out": [
        "count#0",
        "first_policy_id#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "count#0"
      ]
    },
    "859": {
      "op": "frame_bury 3",
      "defined_out": [
        "count#0",
        "first_policy_id#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "861": {
      "op": "frame_dig 6",
      "defined_out": [
        "count#0",
        "first_policy_id#0",
        "i#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "i#0"
      ]
    },
    "863": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "count#0",
        "first_policy_id#0",
        "i#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "864": {
      "op": "+",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "i#0"
      ]
    },
    "865": {
      "op": "frame_bury 6",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "867": {
      "op": "b get_policies_by_owner_for_header@1"
    },
    "870": {
      "block": "get_policies_by_owner_after_for@10",
      "stack_in": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "count#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "count#0"
      ]
    },
    "872": {
      "op": "itob",
      "defined_out": [
        "count#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "val_as_bytes%0#0"
      ]
    },
    "873": {
      "op": "frame_dig 4",
      "defined_out": [
        "count#0",
        "first_policy_id#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "val_as_bytes%0#0",
        "first_policy_id#0"
      ]
    },
    "875": {
      "op": "itob",
      "defined_out": [
        "count#0",
        "first_policy_id#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "876": {
      "op": "concat",
      "defined_out": [
        "count#0",
        "encoded_tuple_buffer%2#0",
        "first_policy_id#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "877": {
      "op": "frame_bury 0"
    },
    "879": {
      "retsub": true,
      "op": "retsub"
    },
    "880": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.get_policy_count",
      "params": {},
      "block": "get_policy_count",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "881": {
      "op": "bytec_1 // \"next_policy_id\"",
      "defined_out": [
        "\"next_policy_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"next_policy_id\""
      ]
    },
    "882": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "883": {
      "error": "check self.next_policy_id exists",
      "op": "assert // check self.next_policy_id exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "884": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "885": {
      "op": "-",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "886": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "887": {
      "retsub": true,
      "op": "retsub"
    },
    "888": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.calculate_fee",
      "params": {
        "cap#0": "bytes",
        "risk_score#0": "bytes",
        "uncertainty#0": "bytes",
        "duration_days#0": "bytes"
      },
      "block": "calculate_fee",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "891": {
      "op": "frame_dig -4",
      "defined_out": [
        "cap#0 (copy)"
      ],
      "stack_out": [
        "cap#0 (copy)"
      ]
    },
    "893": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "894": {
      "op": "intc_2 // 100",
      "defined_out": [
        "100",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "100"
      ]
    },
    "895": {
      "op": "/",
      "defined_out": [
        "base_fee#0"
      ],
      "stack_out": [
        "base_fee#0"
      ]
    },
    "896": {
      "op": "frame_dig -3",
      "defined_out": [
        "base_fee#0",
        "risk_score#0 (copy)"
      ],
      "stack_out": [
        "base_fee#0",
        "risk_score#0 (copy)"
      ]
    },
    "898": {
      "op": "btoi",
      "defined_out": [
        "base_fee#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "base_fee#0",
        "tmp%1#0"
      ]
    },
    "899": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "base_fee#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "base_fee#0",
        "tmp%1#0",
        "2"
      ]
    },
    "900": {
      "op": "/",
      "defined_out": [
        "base_fee#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "base_fee#0",
        "tmp%2#0"
      ]
    },
    "901": {
      "op": "intc_2 // 100",
      "stack_out": [
        "base_fee#0",
        "tmp%2#0",
        "100"
      ]
    },
    "902": {
      "op": "+",
      "defined_out": [
        "base_fee#0",
        "risk_multiplier#0"
      ],
      "stack_out": [
        "base_fee#0",
        "risk_multiplier#0"
      ]
    },
    "903": {
      "op": "frame_dig -2",
      "defined_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "uncertainty#0 (copy)"
      ],
      "stack_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "uncertainty#0 (copy)"
      ]
    },
    "905": {
      "op": "btoi",
      "defined_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "tmp%3#0"
      ]
    },
    "906": {
      "op": "intc_2 // 100",
      "stack_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "tmp%3#0",
        "100"
      ]
    },
    "907": {
      "op": "+",
      "defined_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "uncertainty_multiplier#0"
      ],
      "stack_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "uncertainty_multiplier#0"
      ]
    },
    "908": {
      "op": "frame_dig -1",
      "defined_out": [
        "base_fee#0",
        "duration_days#0 (copy)",
        "risk_multiplier#0",
        "uncertainty_multiplier#0"
      ],
      "stack_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "uncertainty_multiplier#0",
        "duration_days#0 (copy)"
      ]
    },
    "910": {
      "op": "btoi",
      "defined_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "tmp%4#0",
        "uncertainty_multiplier#0"
      ],
      "stack_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "uncertainty_multiplier#0",
        "tmp%4#0"
      ]
    },
    "911": {
      "op": "intc_3 // 2",
      "stack_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "uncertainty_multiplier#0",
        "tmp%4#0",
        "2"
      ]
    },
    "912": {
      "op": "/",
      "defined_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "tmp%5#0",
        "uncertainty_multiplier#0"
      ],
      "stack_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "uncertainty_multiplier#0",
        "tmp%5#0"
      ]
    },
    "913": {
      "op": "intc_2 // 100",
      "stack_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "uncertainty_multiplier#0",
        "tmp%5#0",
        "100"
      ]
    },
    "914": {
      "op": "+",
      "defined_out": [
        "base_fee#0",
        "duration_multiplier#0",
        "risk_multiplier#0",
        "uncertainty_multiplier#0"
      ],
      "stack_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "uncertainty_multiplier#0",
        "duration_multiplier#0"
      ]
    },
    "915": {
      "op": "uncover 3",
      "stack_out": [
        "risk_multiplier#0",
        "uncertainty_multiplier#0",
        "duration_multiplier#0",
        "base_fee#0"
      ]
    },
    "917": {
      "op": "uncover 3",
      "stack_out": [
        "uncertainty_multiplier#0",
        "duration_multiplier#0",
        "base_fee#0",
        "risk_multiplier#0"
      ]
    },
    "919": {
      "op": "*",
      "defined_out": [
        "duration_multiplier#0",
        "tmp%6#0",
        "uncertainty_multiplier#0"
      ],
      "stack_out": [
        "uncertainty_multiplier#0",
        "duration_multiplier#0",
        "tmp%6#0"
      ]
    },
    "920": {
      "op": "uncover 2",
      "stack_out": [
        "duration_multiplier#0",
        "tmp%6#0",
        "uncertainty_multiplier#0"
      ]
    },
    "922": {
      "op": "*",
      "defined_out": [
        "duration_multiplier#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "duration_multiplier#0",
        "tmp%7#0"
      ]
    },
    "923": {
      "op": "*",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "924": {
      "op": "pushint 1000000 // 1000000",
      "defined_out": [
        "1000000",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "1000000"
      ]
    },
    "928": {
      "op": "/",
      "defined_out": [
        "fee#0"
      ],
      "stack_out": [
        "fee#0"
      ]
    },
    "929": {
      "op": "dup",
      "defined_out": [
        "fee#0"
      ],
      "stack_out": [
        "fee#0",
        "fee#0"
      ]
    },
    "930": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "fee#0"
      ],
      "stack_out": [
        "fee#0",
        "fee#0",
        "1000"
      ]
    },
    "932": {
      "op": "<",
      "defined_out": [
        "fee#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "fee#0",
        "tmp%11#0"
      ]
    },
    "933": {
      "op": "bz calculate_fee_after_if_else@2",
      "stack_out": [
        "fee#0"
      ]
    },
    "936": {
      "op": "intc 4 // 1000",
      "stack_out": [
        "fee#0",
        "fee#0"
      ]
    },
    "938": {
      "op": "frame_bury 0",
      "stack_out": [
        "fee#0"
      ]
    },
    "940": {
      "block": "calculate_fee_after_if_else@2",
      "stack_in": [
        "fee#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "fee#0"
      ],
      "stack_out": [
        "fee#0",
        "fee#0"
      ]
    },
    "942": {
      "op": "itob",
      "defined_out": [
        "fee#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "fee#0",
        "val_as_bytes%0#0"
      ]
    },
    "943": {
      "op": "swap"
    },
    "944": {
      "retsub": true,
      "op": "retsub"
    },
    "945": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.delete_policy",
      "params": {
        "policy_id#0": "bytes"
      },
      "block": "delete_policy",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "948": {
      "op": "frame_dig -1",
      "defined_out": [
        "policy_id#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0 (copy)"
      ]
    },
    "950": {
      "op": "btoi",
      "defined_out": [
        "pid#0"
      ],
      "stack_out": [
        "pid#0"
      ]
    },
    "951": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "952": {
      "op": "bytec_3 // \"policies\"",
      "defined_out": [
        "\"policies\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"policies\""
      ]
    },
    "953": {
      "op": "swap",
      "stack_out": [
        "\"policies\"",
        "encoded_value%0#0"
      ]
    },
    "954": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "955": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "956": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "exists#0",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "exists#0"
      ]
    },
    "957": {
      "op": "bnz delete_policy_after_if_else@2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0"
      ]
    },
    "960": {
      "op": "bytec_2 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "box_prefixed_key%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "0x0000000000000000"
      ]
    },
    "961": {
      "op": "frame_bury 0"
    },
    "963": {
      "retsub": true,
      "op": "retsub"
    },
    "964": {
      "block": "delete_policy_after_if_else@2",
      "stack_in": [
        "box_prefixed_key%0#0",
        "policy_data#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "caller#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "caller#0"
      ]
    },
    "966": {
      "op": "frame_dig 1",
      "defined_out": [
        "caller#0",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "caller#0",
        "policy_data#0"
      ]
    },
    "968": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "caller#0",
        "policy_data#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "caller#0",
        "tmp%0#0"
      ]
    },
    "971": {
      "op": "!=",
      "defined_out": [
        "policy_data#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "tmp%1#0"
      ]
    },
    "972": {
      "op": "bz delete_policy_after_if_else@4",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0"
      ]
    },
    "975": {
      "op": "bytec_2 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "0x0000000000000000"
      ]
    },
    "976": {
      "op": "frame_bury 0"
    },
    "978": {
      "retsub": true,
      "op": "retsub"
    },
    "979": {
      "block": "delete_policy_after_if_else@4",
      "stack_in": [
        "box_prefixed_key%0#0",
        "policy_data#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "policy_data#0"
      ]
    },
    "981": {
      "op": "pushint 90 // 90",
      "defined_out": [
        "90",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "policy_data#0",
        "90"
      ]
    },
    "983": {
      "op": "extract_uint64",
      "defined_out": [
        "policy_data#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "tmp%3#0"
      ]
    },
    "984": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "policy_data#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "tmp%3#0",
        "1"
      ]
    },
    "985": {
      "op": "==",
      "defined_out": [
        "policy_data#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "tmp%4#0"
      ]
    },
    "986": {
      "op": "bz delete_policy_after_if_else@6",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0"
      ]
    },
    "989": {
      "op": "bytec_2 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "0x0000000000000000"
      ]
    },
    "990": {
      "op": "frame_bury 0"
    },
    "992": {
      "retsub": true,
      "op": "retsub"
    },
    "993": {
      "block": "delete_policy_after_if_else@6",
      "stack_in": [
        "box_prefixed_key%0#0",
        "policy_data#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "box_prefixed_key%0#0"
      ]
    },
    "995": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "{box_del}"
      ]
    },
    "996": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0"
      ]
    },
    "997": {
      "op": "bytec 6 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "0x0000000000000001"
      ]
    },
    "999": {
      "op": "frame_bury 0"
    },
    "1001": {
      "retsub": true,
      "op": "retsub"
    },
    "1002": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.get_globals",
      "params": {},
      "block": "get_globals",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1003": {
      "op": "bytec 4 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"admin\""
      ]
    },
    "1005": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1006": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1007": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "1008": {
      "op": "bytec 5 // \"oracle\"",
      "defined_out": [
        "\"oracle\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"oracle\""
      ]
    },
    "1010": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1011": {
      "error": "check self.oracle exists",
      "op": "assert // check self.oracle exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "1012": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "1013": {
      "op": "bytec_1 // \"next_policy_id\"",
      "defined_out": [
        "\"next_policy_id\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0",
        "\"next_policy_id\""
      ]
    },
    "1014": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1015": {
      "error": "check self.next_policy_id exists",
      "op": "assert // check self.next_policy_id exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "1016": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "1017": {
      "op": "cover 2",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "1019": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1020": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "1021": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1022": {
      "retsub": true,
      "op": "retsub"
    }
  }
}