{
  "version": 3,
  "sources": [
    "../../insurance/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DQ;;AAAa;;AAAb;AACA;;AAAc;;AAAd;AACA;;AAAwB;;AAAxB;AACA;AAAsB;AAAtB;AACA;;AAA+B;AAA/B;AAUA;;AAAqB;AAArB;AA9BR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAobK;;AAAA;AAAA;AAAA;;AAAA;AApbL;;;AAobK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AA1aL;;;AA0aK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AAtZL;;;AAsZK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjCA;;AAAA;AAAA;AAAA;;AAAA;AAvWL;;;AAuWK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlCA;;AAAA;AAAA;AAAA;;AAAA;AArUL;;;AAAA;;;AAAA;;;AAAA;;;AAqUK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AA1SL;;;AA0SK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AArSL;;;AAqSK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA1CA;;AAAA;AAAA;AAAA;;AAAA;AA3PL;;;AAAA;;;AA2PK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AApDA;;AAAA;AAAA;AAAA;;AAAA;AAvML;;;AAAA;;;AAuMK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAtCA;;AAAA;AAAA;AAAA;;AAAA;AAjKL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAiKK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/DA;;AAAA;AAAA;AAAA;;AAAA;AAlGL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAkGK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAvFL;;;AAuFK;;;AAAA;;AApCA;;AAAA;AAAA;AAAA;;AAAA;AAnDL;;;AAmDK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAhCL;;;AAgCK;;;AAAA;;AAAL;;;AAGQ;;AAAA;;AAAA;AACA;;AAA+B;;AAA/B;AAUA;;AAPgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOhB;AAGgB;AAAhB;;AAAsC;;;;;;;;;;;;;;;;;;;;AAAgC;AAAtE;;;;AAER;;;AAGe;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AACA;;AAAA;;AAAA;AACO;;AAAP;AAER;;;AAOiC;;AAAX;AAJN;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAOO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAf;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACsB;AAAtB;AAAA;;AAAA;AAAA;;AAER;;;;AAGwB;;AAAA;AAAA;AAEb;;AAAU;;AAAV;AAAX;;;AACsD;;AAAA;AAAA;AAAA;AAAsC;AAAtC;AAAX;AAA/B;;AAC0C;AAAA;;AAAA;AAAsC;;AAAA;AAAtC;AAAX;AAA/B;;AAC2C;AAAA;;AAAA;AAAuC;AAAvC;AAAX;AAAhC;;AACgD;AAAA;;AAAA;AAA4C;;AAAA;AAA5C;AAAX;AAArC;;AAAA;;AAKJ;;AAAA;;AAAA;;AAJK;;AAAU;;AAAV;;;;;AAAb;;;AACqD;;AAAA;AAAA;;AAAA;AAAqC;;AAAA;AAArC;AAAX;AAA9B;;AAC2C;AAAA;;AAAA;AAAuC;AAAvC;AAAX;AAAhC;;;;;;;;;;;AAIZ;;;AAGe;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AACA;;AAAA;;AAAA;;AAKe;AAAA;;AAAA;AAAA;AAAf;AAER;;;AAoBe;;AAAqB;;AAArB;AAAP;AACO;;AAAA;AAAY;;AAAA;AAAZ;AAAA;AAAP;AACO;;AAAA;AAAP;AACO;;AAAA;AAAP;AAIO;;AADS;;AACT;AAAP;AACmB;AAAY;AAAZ;AAAZ;AAAP;AAGY;AAAA;AAAA;AAAA;AACZ;AAAuB;AAAvB;AAAA;AAAA;AAAA;AAE4B;;AAEd;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAUF;AAVE;AAAA;;AAAA;AAcA;;AAAA;AAAd;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGmB;;AAAnB;;AAAA;;AAAA;;;AAGA;AAAA;;AAA+C;;;;;;;;;;;;;;;;;;AAA/C;;AAAA;;;AAGI;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAJ;AAEA;AAER;;;AAiBoB;AAAA;AAAA;AAAA;AACZ;AAAuB;AAAvB;AAAA;AAAA;AAAA;AAG6B;;AADf;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAUF;AAVE;AAAA;;AAAA;AAcA;AAAA;AAAd;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAEA;AAER;;;AAOe;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AAEA;;AAAM;AAC4B;AAAA;AAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGP;AAAA;AAAA;AAAP;AAGgB;;AACQ;;AAAA;;AAAA;AAAjB;;AAAA;AAAP;AACwB;AAAA;;AAAA;AAAjB;AAAP;AAES;AACW;;;;;;;;;;;;;;;;;;;;AAEjB;;AAAA;AAAmB;AAAnB;AAAX;;;AACY;;AAAS;;AAAA;AAAT;AAAA;;AACoB;;;;;;;;;;;;;;;;;;;;AAApB;;AAGZ;;;AAEgB;AACa;;AAAA;;;AAGJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAJT;;;AAGQ;;;;AAHR;AAQR;;AAAsB;;AAAtB;;AACA;;AAAA;AAAA;;AAAA;;AAAA;AAG6C;;AAAA;AAA1B;;AAAnB;;AAAiE;AAAjE;;;AAGiC;AAAA;;;AAAjC;;AAAA;AAAA;;AAAA;;AAAA;;;AAGI;;;;;;;;;;;;;;;;AAA2B;;AAA3B;AAAJ;AAEA;;AAAA;AAER;;;;;AAMQ;;AAAM;AACsB;;AAA5B;AAGkC;AAAA;AAApB;AAAA;AAAA;AAAA;AAGX;;;AACQ;AAAP;;AAAA;AAES;;AAAA;;;AAAV;;AAAA;AAAX;;;AACmB;AAAP;;AAAA;AAED;;AAAA;AAAA;AAAA;AAAA;;AAAX;;;AACmB;AAAP;;AAAA;AAGY;;AAGQ;;AAAmB;;AAAnB;AAAjB;AAAP;AAGG;AAAA;;AAAA;AAAA;AAAiC;;AAAjC;AAAX;;;AAGgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AAGJ;;AAAA;;AAAA;AAAA;;AAAyC;;;;;;;;;;;;AAAwB;AAAjE;;;AAGI;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAJ;AAEO;;AAAP;;AAAA;AAER;;;AAGmC;;AAAA;AAAA;AAApB;AAAA;AAAA;AAAA;AAAA;AAAP;AAER;;;;;;;AAOgB;AACU;;AAGC;AAAA;AAAA;AAAH;AAAP;;AAAA;;AAAA;AAAjB;;;AAEmC;;AAAA;AAApB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;AAAf;;;AAC8B;;AAAA;AAAA;AACX;;;AAAA;;AAAA;;;;;;;;;AAAnB;;;AACoB;;AAAS;AAAT;AAAA;;;;;;;AACpB;;;;;;;;;;;;;;;;;;;;;;AANiB;;AAAA;AAAA;AAAA;;;;;AASK;;AAAA;AAAmB;;AAAA;AAA1B;AAAP;;AAAA;AAKkB;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAX;AAAP;AAER;;;AAamB;;AAAA;AAAc;AAAd;AAGsB;;AAAA;AAAqB;;AAArB;AAAf;AAAA;AAGqB;;AAAA;AAAd;AAAA;AAGY;;AAAA;AAAwB;;AAAxB;AAAf;AAAA;AAGf;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAA+E;;;;AAAhF;AAAN;AAGU;;AACP;AAAX;;;AADkB;;AAEN;;AAEG;;AAAA;AAAP;AAAA;AAER;;;AAMQ;;AAAM;AAG4B;AAApB;AAAA;AAAA;AAAA;AAAA;AAGX;;;AAEQ;AAAP;;AAAA;AAGwB;;AACf;;AAAA;;;AAAV;AAAX;;;AAEmB;AAAP;;AAAA;AAGD;;AAAA;AAAA;AAA8B;AAA9B;AAAX;;;AAEmB;AAAP;;AAAA;AAIJ;;AAAA;;AAEO;;AAAP;;AAAA;AAMuB;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACR;AAAA;AAAA;AAAA;AAAX;AAHG;;AAAA;AAAA;AAAA;AAAP;AASO;;AAAA;AAAA;AAAP;AAER;;;AAGqC;;AAAA;AAAA;AAArB;;AAAA;AAAA;AAAA;AAAA;AAAA;AACI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAT;AAAX;;;AAOmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAAA;AAOJ;;AAAA;AAAA;AAER;;;AAGuB;AAAA;;AAAA;AAAA;AAAqB;AAArB;AAAf;AAC0B;;AAAA;AAAf;AAA8B;AAA9B;AAAX;AACc;AAAX;AAAX;;;AACuB;AAAX;;AAEU;;AAAA;AAA0B;;AAAA;AAAjC;AAAP;;AAAA;AAER;;;;;AAG0C;;AAAA;AAAA;AAApB;AAAA;AAAA;AAAA;AAGX;;;AACQ;AAAP;;AAAA;AAED;;AAAA;AAAA;AAA8B;AAA9B;AAAX;;;AACmB;;;;;;;;;;AAAP;;AAAA;AAEJ;;AAAgB;AAAhB;;AACmB;;AAAA;;AAAA;AAAhB;AAAX;;;AACmB;;;;;;;;;;AAAP;;AAAA;AAEe;;AAAA;;AAAA;AAAhB;;AAAA;AAAX;;;AACmB;;;;;;;;;;AAAP;;AAAA;AAEG;;AAAP;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 100 90 1000"
    },
    "9": {
      "op": "bytecblock 0x151f7c75 0x0000000000000000 \"next_policy_id\" \"policies\" \"admin\" \"oracle\" 0x0000000000000001 \"next_event_id\" \"stats_box\" \"dispute_contract\" \"contract_creation_round\" \"event_log\" \"policy_created\" \"policy_settled\" 0x0062"
    },
    "179": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "181": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "184": {
      "op": "bytec 4 // \"admin\"",
      "defined_out": [
        "\"admin\""
      ],
      "stack_out": [
        "\"admin\""
      ]
    },
    "186": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"admin\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"admin\"",
        "materialized_values%0#0"
      ]
    },
    "188": {
      "op": "app_global_put",
      "stack_out": []
    },
    "189": {
      "op": "bytec 5 // \"oracle\"",
      "defined_out": [
        "\"oracle\""
      ],
      "stack_out": [
        "\"oracle\""
      ]
    },
    "191": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"oracle\"",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "\"oracle\"",
        "materialized_values%1#0"
      ]
    },
    "193": {
      "op": "app_global_put",
      "stack_out": []
    },
    "194": {
      "op": "bytec 9 // \"dispute_contract\"",
      "defined_out": [
        "\"dispute_contract\""
      ],
      "stack_out": [
        "\"dispute_contract\""
      ]
    },
    "196": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"dispute_contract\"",
        "materialized_values%2#0"
      ],
      "stack_out": [
        "\"dispute_contract\"",
        "materialized_values%2#0"
      ]
    },
    "198": {
      "op": "app_global_put",
      "stack_out": []
    },
    "199": {
      "op": "bytec_2 // \"next_policy_id\"",
      "defined_out": [
        "\"next_policy_id\""
      ],
      "stack_out": [
        "\"next_policy_id\""
      ]
    },
    "200": {
      "op": "intc_0 // 1",
      "defined_out": [
        "\"next_policy_id\"",
        "1"
      ],
      "stack_out": [
        "\"next_policy_id\"",
        "1"
      ]
    },
    "201": {
      "op": "app_global_put",
      "stack_out": []
    },
    "202": {
      "op": "bytec 10 // \"contract_creation_round\"",
      "defined_out": [
        "\"contract_creation_round\""
      ],
      "stack_out": [
        "\"contract_creation_round\""
      ]
    },
    "204": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"contract_creation_round\"",
        "0"
      ],
      "stack_out": [
        "\"contract_creation_round\"",
        "0"
      ]
    },
    "205": {
      "op": "app_global_put",
      "stack_out": []
    },
    "206": {
      "op": "bytec 7 // \"next_event_id\"",
      "defined_out": [
        "\"next_event_id\""
      ],
      "stack_out": [
        "\"next_event_id\""
      ]
    },
    "208": {
      "op": "intc_0 // 1",
      "stack_out": [
        "\"next_event_id\"",
        "1"
      ]
    },
    "209": {
      "op": "app_global_put",
      "stack_out": []
    },
    "210": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "212": {
      "op": "bz main_after_if_else@23",
      "stack_out": []
    },
    "215": {
      "op": "pushbytess 0x894a716e 0x47d7ef35 0x3368f556 0xa92e691c 0x671721d6 0x50f992ac 0xef909f38 0x5c1689a2 0xeb0de02b 0x3f78f6e3 0xabf6d51a 0xfa20020c 0xdce31bbe 0x1a0e2048 0x140d1f47 0x457f7252 0x615bb30f 0x927446e0 // method \"create_application(address)void\", method \"set_dispute_contract(address)uint64\", method \"set_oracle(address)void\", method \"get_oracle()address\", method \"buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64\", method \"buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64\", method \"oracle_settle(uint64,uint64)uint64\", method \"dispute_settlement(uint64,string)uint64\", method \"get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)\", method \"get_policies_by_owner(address)(uint64,uint64)\", method \"get_policy_count()uint64\", method \"calculate_fee(uint64,uint64,uint64,uint64)uint64\", method \"delete_policy(uint64)uint64\", method \"get_globals()(address,address,uint64)\", method \"get_statistics()(uint64,uint64,uint64,uint64,uint64)\", method \"get_event(uint64)(uint64,address,string,uint64,uint64)\", method \"get_recent_events(uint64)(uint64,uint64)\", method \"validate_policy_timing(uint64)uint64\"",
      "defined_out": [
        "Method(buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(calculate_fee(uint64,uint64,uint64,uint64)uint64)",
        "Method(create_application(address)void)",
        "Method(delete_policy(uint64)uint64)",
        "Method(dispute_settlement(uint64,string)uint64)",
        "Method(get_event(uint64)(uint64,address,string,uint64,uint64))",
        "Method(get_globals()(address,address,uint64))",
        "Method(get_oracle()address)",
        "Method(get_policies_by_owner(address)(uint64,uint64))",
        "Method(get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(get_policy_count()uint64)",
        "Method(get_recent_events(uint64)(uint64,uint64))",
        "Method(get_statistics()(uint64,uint64,uint64,uint64,uint64))",
        "Method(oracle_settle(uint64,uint64)uint64)",
        "Method(set_dispute_contract(address)uint64)",
        "Method(set_oracle(address)void)",
        "Method(validate_policy_timing(uint64)uint64)"
      ],
      "stack_out": [
        "Method(create_application(address)void)",
        "Method(set_dispute_contract(address)uint64)",
        "Method(set_oracle(address)void)",
        "Method(get_oracle()address)",
        "Method(buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(oracle_settle(uint64,uint64)uint64)",
        "Method(dispute_settlement(uint64,string)uint64)",
        "Method(get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(get_policies_by_owner(address)(uint64,uint64))",
        "Method(get_policy_count()uint64)",
        "Method(calculate_fee(uint64,uint64,uint64,uint64)uint64)",
        "Method(delete_policy(uint64)uint64)",
        "Method(get_globals()(address,address,uint64))",
        "Method(get_statistics()(uint64,uint64,uint64,uint64,uint64))",
        "Method(get_event(uint64)(uint64,address,string,uint64,uint64))",
        "Method(get_recent_events(uint64)(uint64,uint64))",
        "Method(validate_policy_timing(uint64)uint64)"
      ]
    },
    "307": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(calculate_fee(uint64,uint64,uint64,uint64)uint64)",
        "Method(create_application(address)void)",
        "Method(delete_policy(uint64)uint64)",
        "Method(dispute_settlement(uint64,string)uint64)",
        "Method(get_event(uint64)(uint64,address,string,uint64,uint64))",
        "Method(get_globals()(address,address,uint64))",
        "Method(get_oracle()address)",
        "Method(get_policies_by_owner(address)(uint64,uint64))",
        "Method(get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(get_policy_count()uint64)",
        "Method(get_recent_events(uint64)(uint64,uint64))",
        "Method(get_statistics()(uint64,uint64,uint64,uint64,uint64))",
        "Method(oracle_settle(uint64,uint64)uint64)",
        "Method(set_dispute_contract(address)uint64)",
        "Method(set_oracle(address)void)",
        "Method(validate_policy_timing(uint64)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_application(address)void)",
        "Method(set_dispute_contract(address)uint64)",
        "Method(set_oracle(address)void)",
        "Method(get_oracle()address)",
        "Method(buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(oracle_settle(uint64,uint64)uint64)",
        "Method(dispute_settlement(uint64,string)uint64)",
        "Method(get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(get_policies_by_owner(address)(uint64,uint64))",
        "Method(get_policy_count()uint64)",
        "Method(calculate_fee(uint64,uint64,uint64,uint64)uint64)",
        "Method(delete_policy(uint64)uint64)",
        "Method(get_globals()(address,address,uint64))",
        "Method(get_statistics()(uint64,uint64,uint64,uint64,uint64))",
        "Method(get_event(uint64)(uint64,address,string,uint64,uint64))",
        "Method(get_recent_events(uint64)(uint64,uint64))",
        "Method(validate_policy_timing(uint64)uint64)",
        "tmp%2#0"
      ]
    },
    "310": {
      "op": "match main_create_application_route@5 main_set_dispute_contract_route@6 main_set_oracle_route@7 main_get_oracle_route@8 main_buy_policy_with_payment_route@9 main_buy_policy_route@10 main_oracle_settle_route@11 main_dispute_settlement_route@12 main_get_policy_route@13 main_get_policies_by_owner_route@14 main_get_policy_count_route@15 main_calculate_fee_route@16 main_delete_policy_route@17 main_get_globals_route@18 main_get_statistics_route@19 main_get_event_route@20 main_get_recent_events_route@21 main_validate_policy_timing_route@22",
      "stack_out": []
    },
    "348": {
      "block": "main_after_if_else@23",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "349": {
      "op": "return",
      "stack_out": []
    },
    "350": {
      "block": "main_validate_policy_timing_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "352": {
      "op": "!",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "353": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "354": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "356": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "357": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%25#0"
      ]
    },
    "360": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.validate_policy_timing",
      "op": "callsub validate_policy_timing",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "363": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0",
        "0x151f7c75"
      ]
    },
    "364": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%108#0"
      ]
    },
    "365": {
      "op": "concat",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "366": {
      "op": "log",
      "stack_out": []
    },
    "367": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "368": {
      "op": "return",
      "stack_out": []
    },
    "369": {
      "block": "main_get_recent_events_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "371": {
      "op": "!",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "372": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "373": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "375": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "376": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%24#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0"
      ]
    },
    "379": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.get_recent_events",
      "op": "callsub get_recent_events",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "382": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0",
        "0x151f7c75"
      ]
    },
    "383": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%102#0"
      ]
    },
    "384": {
      "op": "concat",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "385": {
      "op": "log",
      "stack_out": []
    },
    "386": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "387": {
      "op": "return",
      "stack_out": []
    },
    "388": {
      "block": "main_get_event_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "390": {
      "op": "!",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "391": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "392": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "394": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "395": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%23#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0"
      ]
    },
    "398": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.get_event",
      "op": "callsub get_event",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "401": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0",
        "0x151f7c75"
      ]
    },
    "402": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%96#0"
      ]
    },
    "403": {
      "op": "concat",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "404": {
      "op": "log",
      "stack_out": []
    },
    "405": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "406": {
      "op": "return",
      "stack_out": []
    },
    "407": {
      "block": "main_get_statistics_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "409": {
      "op": "!",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "410": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "411": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "413": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "414": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.get_statistics",
      "op": "callsub get_statistics",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "417": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0",
        "0x151f7c75"
      ]
    },
    "418": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%90#0"
      ]
    },
    "419": {
      "op": "concat",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "420": {
      "op": "log",
      "stack_out": []
    },
    "421": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "422": {
      "op": "return",
      "stack_out": []
    },
    "423": {
      "block": "main_get_globals_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "425": {
      "op": "!",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "426": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "427": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "429": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "430": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.get_globals",
      "op": "callsub get_globals",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "433": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "0x151f7c75"
      ]
    },
    "434": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%84#0"
      ]
    },
    "435": {
      "op": "concat",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "436": {
      "op": "log",
      "stack_out": []
    },
    "437": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "438": {
      "op": "return",
      "stack_out": []
    },
    "439": {
      "block": "main_delete_policy_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "441": {
      "op": "!",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "442": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "443": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "445": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "446": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%22#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%22#0"
      ]
    },
    "449": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.delete_policy",
      "op": "callsub delete_policy",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "452": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0",
        "0x151f7c75"
      ]
    },
    "453": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%78#0"
      ]
    },
    "454": {
      "op": "concat",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "455": {
      "op": "log",
      "stack_out": []
    },
    "456": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "457": {
      "op": "return",
      "stack_out": []
    },
    "458": {
      "block": "main_calculate_fee_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "460": {
      "op": "!",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "461": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "462": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "464": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "465": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%18#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%18#0"
      ]
    },
    "468": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%18#0",
        "reinterpret_bytes[8]%19#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%18#0",
        "reinterpret_bytes[8]%19#0"
      ]
    },
    "471": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%18#0",
        "reinterpret_bytes[8]%19#0",
        "reinterpret_bytes[8]%20#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%18#0",
        "reinterpret_bytes[8]%19#0",
        "reinterpret_bytes[8]%20#0"
      ]
    },
    "474": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%18#0",
        "reinterpret_bytes[8]%19#0",
        "reinterpret_bytes[8]%20#0",
        "reinterpret_bytes[8]%21#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%18#0",
        "reinterpret_bytes[8]%19#0",
        "reinterpret_bytes[8]%20#0",
        "reinterpret_bytes[8]%21#0"
      ]
    },
    "477": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.calculate_fee",
      "op": "callsub calculate_fee",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "480": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "0x151f7c75"
      ]
    },
    "481": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%72#0"
      ]
    },
    "482": {
      "op": "concat",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "483": {
      "op": "log",
      "stack_out": []
    },
    "484": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "485": {
      "op": "return",
      "stack_out": []
    },
    "486": {
      "block": "main_get_policy_count_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "488": {
      "op": "!",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "489": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "490": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "492": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "493": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.get_policy_count",
      "op": "callsub get_policy_count",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "496": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "0x151f7c75"
      ]
    },
    "497": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%66#0"
      ]
    },
    "498": {
      "op": "concat",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "499": {
      "op": "log",
      "stack_out": []
    },
    "500": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "501": {
      "op": "return",
      "stack_out": []
    },
    "502": {
      "block": "main_get_policies_by_owner_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "504": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "505": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "506": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "508": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "509": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "512": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.get_policies_by_owner",
      "op": "callsub get_policies_by_owner",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "515": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "0x151f7c75"
      ]
    },
    "516": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%60#0"
      ]
    },
    "517": {
      "op": "concat",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "518": {
      "op": "log",
      "stack_out": []
    },
    "519": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "520": {
      "op": "return",
      "stack_out": []
    },
    "521": {
      "block": "main_get_policy_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "523": {
      "op": "!",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "524": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "525": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "527": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "528": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%17#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%17#0"
      ]
    },
    "531": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.get_policy",
      "op": "callsub get_policy",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "534": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "0x151f7c75"
      ]
    },
    "535": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%54#0"
      ]
    },
    "536": {
      "op": "concat",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "537": {
      "op": "log",
      "stack_out": []
    },
    "538": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "539": {
      "op": "return",
      "stack_out": []
    },
    "540": {
      "block": "main_dispute_settlement_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "542": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "543": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "544": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "546": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "547": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%16#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%16#0"
      ]
    },
    "550": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%16#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%16#0",
        "tmp%47#0"
      ]
    },
    "553": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.dispute_settlement",
      "op": "callsub dispute_settlement",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "556": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "0x151f7c75"
      ]
    },
    "557": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%48#0"
      ]
    },
    "558": {
      "op": "concat",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "559": {
      "op": "log",
      "stack_out": []
    },
    "560": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "561": {
      "op": "return",
      "stack_out": []
    },
    "562": {
      "block": "main_oracle_settle_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "564": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "565": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "566": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "568": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "569": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "572": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "575": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.oracle_settle",
      "op": "callsub oracle_settle",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "578": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "0x151f7c75"
      ]
    },
    "579": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%41#0"
      ]
    },
    "580": {
      "op": "concat",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "581": {
      "op": "log",
      "stack_out": []
    },
    "582": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "583": {
      "op": "return",
      "stack_out": []
    },
    "584": {
      "block": "main_buy_policy_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "586": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "587": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "588": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "590": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "591": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "594": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%7#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "597": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "600": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "603": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "606": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "609": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "612": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "615": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.buy_policy",
      "op": "callsub buy_policy",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "618": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "0x151f7c75"
      ]
    },
    "619": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%35#0"
      ]
    },
    "620": {
      "op": "concat",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "621": {
      "op": "log",
      "stack_out": []
    },
    "622": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "623": {
      "op": "return",
      "stack_out": []
    },
    "624": {
      "block": "main_buy_policy_with_payment_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "626": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "627": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "628": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "630": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "631": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "634": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "637": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "640": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "643": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "646": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "649": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "652": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "655": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.buy_policy_with_payment",
      "op": "callsub buy_policy_with_payment",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "658": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "0x151f7c75"
      ]
    },
    "659": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%28#0"
      ]
    },
    "660": {
      "op": "concat",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "661": {
      "op": "log",
      "stack_out": []
    },
    "662": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "663": {
      "op": "return",
      "stack_out": []
    },
    "664": {
      "block": "main_get_oracle_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "666": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "667": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "668": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "670": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "671": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.get_oracle",
      "op": "callsub get_oracle",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "674": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0x151f7c75"
      ]
    },
    "675": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%21#0"
      ]
    },
    "676": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "677": {
      "op": "log",
      "stack_out": []
    },
    "678": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "679": {
      "op": "return",
      "stack_out": []
    },
    "680": {
      "block": "main_set_oracle_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "682": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "683": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "684": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "686": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "687": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "690": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.set_oracle",
      "op": "callsub set_oracle",
      "stack_out": []
    },
    "693": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "694": {
      "op": "return",
      "stack_out": []
    },
    "695": {
      "block": "main_set_dispute_contract_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "697": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "698": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "699": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "701": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "702": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "705": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.set_dispute_contract",
      "op": "callsub set_dispute_contract",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "708": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "709": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%11#0"
      ]
    },
    "710": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "711": {
      "op": "log",
      "stack_out": []
    },
    "712": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "713": {
      "op": "return",
      "stack_out": []
    },
    "714": {
      "block": "main_create_application_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "716": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "717": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "718": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "720": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "721": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "722": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "725": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance.create_application",
      "op": "callsub create_application",
      "stack_out": []
    },
    "728": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "729": {
      "op": "return",
      "stack_out": []
    },
    "730": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.create_application",
      "params": {
        "admin#0": "bytes"
      },
      "block": "create_application",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "733": {
      "op": "bytec 4 // \"admin\"",
      "defined_out": [
        "\"admin\""
      ],
      "stack_out": [
        "\"admin\""
      ]
    },
    "735": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"admin\"",
        "admin#0 (copy)"
      ],
      "stack_out": [
        "\"admin\"",
        "admin#0 (copy)"
      ]
    },
    "737": {
      "op": "app_global_put",
      "stack_out": []
    },
    "738": {
      "op": "bytec 10 // \"contract_creation_round\"",
      "defined_out": [
        "\"contract_creation_round\""
      ],
      "stack_out": [
        "\"contract_creation_round\""
      ]
    },
    "740": {
      "op": "global Round",
      "defined_out": [
        "\"contract_creation_round\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"contract_creation_round\"",
        "materialized_values%0#0"
      ]
    },
    "742": {
      "op": "app_global_put",
      "stack_out": []
    },
    "743": {
      "op": "bytec 8 // \"stats_box\"",
      "defined_out": [
        "\"stats_box\""
      ],
      "stack_out": [
        "\"stats_box\""
      ]
    },
    "745": {
      "op": "pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "\"stats_box\"",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "\"stats_box\"",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "787": {
      "op": "box_put",
      "stack_out": []
    },
    "788": {
      "op": "bytec_1 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000"
      ],
      "stack_out": [
        "0x0000000000000000"
      ]
    },
    "789": {
      "op": "frame_dig -1",
      "stack_out": [
        "0x0000000000000000",
        "admin#0 (copy)"
      ]
    },
    "791": {
      "op": "pushbytes 0x0010636f6e74726163745f63726561746564",
      "defined_out": [
        "0x0000000000000000",
        "0x0010636f6e74726163745f63726561746564",
        "admin#0 (copy)"
      ],
      "stack_out": [
        "0x0000000000000000",
        "admin#0 (copy)",
        "0x0010636f6e74726163745f63726561746564"
      ]
    },
    "811": {
      "op": "bytec_1 // 0x0000000000000000",
      "stack_out": [
        "0x0000000000000000",
        "admin#0 (copy)",
        "0x0010636f6e74726163745f63726561746564",
        "0x0000000000000000"
      ]
    },
    "812": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance._log_event",
      "op": "callsub _log_event",
      "stack_out": []
    },
    "815": {
      "retsub": true,
      "op": "retsub"
    },
    "816": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.set_dispute_contract",
      "params": {
        "dispute_contract#0": "bytes"
      },
      "block": "set_dispute_contract",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "819": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "821": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "822": {
      "op": "bytec 4 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "824": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "825": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "826": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "827": {
      "error": "Only admin can set dispute contract",
      "op": "assert // Only admin can set dispute contract",
      "stack_out": []
    },
    "828": {
      "op": "bytec 9 // \"dispute_contract\"",
      "defined_out": [
        "\"dispute_contract\""
      ],
      "stack_out": [
        "\"dispute_contract\""
      ]
    },
    "830": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"dispute_contract\"",
        "dispute_contract#0 (copy)"
      ],
      "stack_out": [
        "\"dispute_contract\"",
        "dispute_contract#0 (copy)"
      ]
    },
    "832": {
      "op": "app_global_put",
      "stack_out": []
    },
    "833": {
      "op": "bytec 6 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x0000000000000001"
      ]
    },
    "835": {
      "retsub": true,
      "op": "retsub"
    },
    "836": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance._log_event",
      "params": {
        "policy_id#0": "bytes",
        "owner#0": "bytes",
        "action#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "_log_event",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "839": {
      "op": "global Round",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "841": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "842": {
      "op": "frame_dig -4",
      "defined_out": [
        "policy_id#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "policy_id#0 (copy)"
      ]
    },
    "844": {
      "op": "frame_dig -3",
      "defined_out": [
        "owner#0 (copy)",
        "policy_id#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "policy_id#0 (copy)",
        "owner#0 (copy)"
      ]
    },
    "846": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "847": {
      "op": "pushbytes 0x003a",
      "defined_out": [
        "0x003a",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%2#0",
        "0x003a"
      ]
    },
    "851": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "852": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "853": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "854": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "amount#0 (copy)"
      ]
    },
    "856": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0"
      ]
    },
    "857": {
      "op": "frame_dig -2",
      "defined_out": [
        "action#0 (copy)",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "action#0 (copy)"
      ]
    },
    "859": {
      "op": "concat",
      "defined_out": [
        "event#0"
      ],
      "stack_out": [
        "event#0"
      ]
    },
    "860": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "event#0"
      ],
      "stack_out": [
        "event#0",
        "0"
      ]
    },
    "861": {
      "op": "bytec 7 // \"next_event_id\"",
      "defined_out": [
        "\"next_event_id\"",
        "0",
        "event#0"
      ],
      "stack_out": [
        "event#0",
        "0",
        "\"next_event_id\""
      ]
    },
    "863": {
      "op": "app_global_get_ex",
      "defined_out": [
        "event#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "event#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "864": {
      "error": "check self.next_event_id exists",
      "op": "assert // check self.next_event_id exists",
      "stack_out": [
        "event#0",
        "maybe_value%0#0"
      ]
    },
    "865": {
      "op": "dup",
      "defined_out": [
        "event#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "event#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "866": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "event#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "event#0",
        "maybe_value%0#0",
        "encoded_value%0#0"
      ]
    },
    "867": {
      "op": "bytec 11 // \"event_log\"",
      "defined_out": [
        "\"event_log\"",
        "encoded_value%0#0",
        "event#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "event#0",
        "maybe_value%0#0",
        "encoded_value%0#0",
        "\"event_log\""
      ]
    },
    "869": {
      "op": "swap",
      "stack_out": [
        "event#0",
        "maybe_value%0#0",
        "\"event_log\"",
        "encoded_value%0#0"
      ]
    },
    "870": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "event#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "event#0",
        "maybe_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "871": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "event#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "event#0",
        "maybe_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "872": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "event#0",
        "maybe_value%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "event#0",
        "maybe_value%0#0",
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "873": {
      "op": "pop",
      "stack_out": [
        "event#0",
        "maybe_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "874": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "box_prefixed_key%0#0",
        "event#0"
      ]
    },
    "876": {
      "op": "box_put",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "877": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "878": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "879": {
      "op": "bytec 7 // \"next_event_id\"",
      "stack_out": [
        "materialized_values%0#0",
        "\"next_event_id\""
      ]
    },
    "881": {
      "op": "swap",
      "stack_out": [
        "\"next_event_id\"",
        "materialized_values%0#0"
      ]
    },
    "882": {
      "op": "app_global_put",
      "stack_out": []
    },
    "883": {
      "retsub": true,
      "op": "retsub"
    },
    "884": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance._update_stats",
      "params": {
        "action#0": "bytes",
        "coverage_amount#0": "bytes",
        "fee_amount#0": "bytes"
      },
      "block": "_update_stats",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "887": {
      "op": "intc_1 // 0",
      "stack_out": [
        "current_stats#11"
      ]
    },
    "888": {
      "op": "bytec 8 // \"stats_box\"",
      "defined_out": [
        "\"stats_box\""
      ],
      "stack_out": [
        "current_stats#11",
        "\"stats_box\""
      ]
    },
    "890": {
      "op": "box_get",
      "defined_out": [
        "current_stats#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "maybe_exists%0#0"
      ]
    },
    "891": {
      "error": "check self.stats_box exists",
      "op": "assert // check self.stats_box exists",
      "stack_out": [
        "current_stats#11",
        "current_stats#0"
      ]
    },
    "892": {
      "op": "frame_dig -3",
      "defined_out": [
        "action#0 (copy)",
        "current_stats#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "action#0 (copy)"
      ]
    },
    "894": {
      "op": "bytec 12 // \"policy_created\"",
      "defined_out": [
        "\"policy_created\"",
        "action#0 (copy)",
        "current_stats#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "action#0 (copy)",
        "\"policy_created\""
      ]
    },
    "896": {
      "op": "==",
      "defined_out": [
        "current_stats#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "tmp%0#0"
      ]
    },
    "897": {
      "op": "bz _update_stats_else_body@2",
      "stack_out": [
        "current_stats#11",
        "current_stats#0"
      ]
    },
    "900": {
      "op": "frame_dig 1",
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0"
      ]
    },
    "902": {
      "op": "dup",
      "defined_out": [
        "current_stats#0",
        "current_stats#0 (copy)"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "current_stats#0 (copy)"
      ]
    },
    "903": {
      "op": "intc_1 // 0",
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "current_stats#0 (copy)",
        "0"
      ]
    },
    "904": {
      "op": "extract_uint64",
      "defined_out": [
        "current_stats#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "tmp%2#0"
      ]
    },
    "905": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "current_stats#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "tmp%2#0",
        "1"
      ]
    },
    "906": {
      "op": "+",
      "defined_out": [
        "current_stats#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "to_encode%0#0"
      ]
    },
    "907": {
      "op": "itob",
      "defined_out": [
        "current_stats#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "val_as_bytes%0#0"
      ]
    },
    "908": {
      "op": "replace2 0",
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0"
      ]
    },
    "910": {
      "op": "dup",
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "current_stats#0 (copy)"
      ]
    },
    "911": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "current_stats#0",
        "current_stats#0 (copy)"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "current_stats#0 (copy)",
        "8"
      ]
    },
    "913": {
      "op": "extract_uint64",
      "defined_out": [
        "current_stats#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "tmp%4#0"
      ]
    },
    "914": {
      "op": "frame_dig -2",
      "defined_out": [
        "coverage_amount#0 (copy)",
        "current_stats#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "tmp%4#0",
        "coverage_amount#0 (copy)"
      ]
    },
    "916": {
      "op": "btoi",
      "defined_out": [
        "current_stats#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "917": {
      "op": "+",
      "defined_out": [
        "current_stats#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "to_encode%1#0"
      ]
    },
    "918": {
      "op": "itob",
      "defined_out": [
        "current_stats#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "val_as_bytes%1#0"
      ]
    },
    "919": {
      "op": "replace2 8",
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0"
      ]
    },
    "921": {
      "op": "dup",
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "current_stats#0 (copy)"
      ]
    },
    "922": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "current_stats#0",
        "current_stats#0 (copy)"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "current_stats#0 (copy)",
        "24"
      ]
    },
    "924": {
      "op": "extract_uint64",
      "defined_out": [
        "current_stats#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "tmp%7#0"
      ]
    },
    "925": {
      "op": "intc_0 // 1",
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "tmp%7#0",
        "1"
      ]
    },
    "926": {
      "op": "+",
      "defined_out": [
        "current_stats#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "to_encode%2#0"
      ]
    },
    "927": {
      "op": "itob",
      "defined_out": [
        "current_stats#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "val_as_bytes%2#0"
      ]
    },
    "928": {
      "op": "replace2 24",
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0"
      ]
    },
    "930": {
      "op": "dup",
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "current_stats#0 (copy)"
      ]
    },
    "931": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "current_stats#0",
        "current_stats#0 (copy)"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "current_stats#0 (copy)",
        "32"
      ]
    },
    "933": {
      "op": "extract_uint64",
      "defined_out": [
        "current_stats#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "tmp%9#0"
      ]
    },
    "934": {
      "op": "frame_dig -1",
      "defined_out": [
        "current_stats#0",
        "fee_amount#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "tmp%9#0",
        "fee_amount#0 (copy)"
      ]
    },
    "936": {
      "op": "btoi",
      "defined_out": [
        "current_stats#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "937": {
      "op": "+",
      "defined_out": [
        "current_stats#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "to_encode%3#0"
      ]
    },
    "938": {
      "op": "itob",
      "defined_out": [
        "current_stats#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "val_as_bytes%3#0"
      ]
    },
    "939": {
      "op": "replace2 32",
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0"
      ]
    },
    "941": {
      "op": "frame_bury 1",
      "stack_out": [
        "current_stats#11",
        "current_stats#0"
      ]
    },
    "943": {
      "block": "_update_stats_after_if_else@5",
      "stack_in": [
        "current_stats#11",
        "current_stats#0"
      ],
      "op": "bytec 8 // \"stats_box\"",
      "defined_out": [
        "\"stats_box\""
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "\"stats_box\""
      ]
    },
    "945": {
      "op": "frame_dig 1",
      "defined_out": [
        "\"stats_box\"",
        "current_stats#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "\"stats_box\"",
        "current_stats#0"
      ]
    },
    "947": {
      "op": "box_put",
      "stack_out": [
        "current_stats#11",
        "current_stats#0"
      ]
    },
    "948": {
      "retsub": true,
      "op": "retsub"
    },
    "949": {
      "block": "_update_stats_else_body@2",
      "stack_in": [
        "current_stats#11",
        "current_stats#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "action#0 (copy)"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "action#0 (copy)"
      ]
    },
    "951": {
      "op": "bytec 13 // \"policy_settled\"",
      "defined_out": [
        "\"policy_settled\"",
        "action#0 (copy)"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "action#0 (copy)",
        "\"policy_settled\""
      ]
    },
    "953": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "tmp%11#0"
      ]
    },
    "954": {
      "op": "frame_dig 1",
      "defined_out": [
        "current_stats#11",
        "tmp%11#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "tmp%11#0",
        "current_stats#11"
      ]
    },
    "956": {
      "op": "frame_bury 0",
      "defined_out": [
        "current_stats#11",
        "tmp%11#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "tmp%11#0"
      ]
    },
    "958": {
      "op": "bz _update_stats_after_if_else@4",
      "stack_out": [
        "current_stats#11",
        "current_stats#0"
      ]
    },
    "961": {
      "op": "frame_dig 1",
      "defined_out": [
        "current_stats#0",
        "current_stats#11"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0"
      ]
    },
    "963": {
      "op": "dup",
      "defined_out": [
        "current_stats#0",
        "current_stats#0 (copy)",
        "current_stats#11"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "current_stats#0 (copy)"
      ]
    },
    "964": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "current_stats#0",
        "current_stats#0 (copy)",
        "current_stats#11"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "current_stats#0 (copy)",
        "16"
      ]
    },
    "966": {
      "op": "extract_uint64",
      "defined_out": [
        "current_stats#0",
        "current_stats#11",
        "tmp%13#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "tmp%13#0"
      ]
    },
    "967": {
      "op": "frame_dig -2",
      "defined_out": [
        "coverage_amount#0 (copy)",
        "current_stats#0",
        "current_stats#11",
        "tmp%13#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "tmp%13#0",
        "coverage_amount#0 (copy)"
      ]
    },
    "969": {
      "op": "btoi",
      "defined_out": [
        "current_stats#0",
        "current_stats#11",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "970": {
      "op": "+",
      "defined_out": [
        "current_stats#0",
        "current_stats#11",
        "to_encode%4#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "to_encode%4#0"
      ]
    },
    "971": {
      "op": "itob",
      "defined_out": [
        "current_stats#0",
        "current_stats#11",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "val_as_bytes%4#0"
      ]
    },
    "972": {
      "op": "replace2 16",
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0"
      ]
    },
    "974": {
      "op": "dup",
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "current_stats#0 (copy)"
      ]
    },
    "975": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "current_stats#0",
        "current_stats#0 (copy)",
        "current_stats#11"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "current_stats#0 (copy)",
        "24"
      ]
    },
    "977": {
      "op": "extract_uint64",
      "defined_out": [
        "current_stats#0",
        "current_stats#11",
        "tmp%16#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "tmp%16#0"
      ]
    },
    "978": {
      "op": "intc_0 // 1",
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "tmp%16#0",
        "1"
      ]
    },
    "979": {
      "op": "-",
      "defined_out": [
        "current_stats#0",
        "current_stats#11",
        "to_encode%5#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "to_encode%5#0"
      ]
    },
    "980": {
      "op": "itob",
      "defined_out": [
        "current_stats#0",
        "current_stats#11",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0",
        "val_as_bytes%5#0"
      ]
    },
    "981": {
      "op": "replace2 24",
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#11"
      ]
    },
    "983": {
      "op": "frame_bury 0",
      "stack_out": [
        "current_stats#11",
        "current_stats#0"
      ]
    },
    "985": {
      "block": "_update_stats_after_if_else@4",
      "stack_in": [
        "current_stats#11",
        "current_stats#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "current_stats#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0",
        "current_stats#0"
      ]
    },
    "987": {
      "op": "frame_bury 1",
      "defined_out": [
        "current_stats#0"
      ],
      "stack_out": [
        "current_stats#11",
        "current_stats#0"
      ]
    },
    "989": {
      "op": "b _update_stats_after_if_else@5"
    },
    "992": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.set_oracle",
      "params": {
        "oracle#0": "bytes"
      },
      "block": "set_oracle",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "995": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "997": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "998": {
      "op": "bytec 4 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "1000": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1001": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1002": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1003": {
      "error": "Only admin can set oracle",
      "op": "assert // Only admin can set oracle",
      "stack_out": []
    },
    "1004": {
      "op": "bytec 5 // \"oracle\"",
      "defined_out": [
        "\"oracle\""
      ],
      "stack_out": [
        "\"oracle\""
      ]
    },
    "1006": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"oracle\"",
        "oracle#0 (copy)"
      ],
      "stack_out": [
        "\"oracle\"",
        "oracle#0 (copy)"
      ]
    },
    "1008": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1009": {
      "retsub": true,
      "op": "retsub"
    },
    "1010": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.get_oracle",
      "params": {},
      "block": "get_oracle",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1011": {
      "op": "bytec 5 // \"oracle\"",
      "defined_out": [
        "\"oracle\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"oracle\""
      ]
    },
    "1013": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1014": {
      "error": "check self.oracle exists",
      "op": "assert // check self.oracle exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1015": {
      "retsub": true,
      "op": "retsub"
    },
    "1016": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.buy_policy_with_payment",
      "params": {
        "zip_code#0": "bytes",
        "t0#0": "bytes",
        "t1#0": "bytes",
        "cap#0": "bytes",
        "direction#0": "bytes",
        "threshold#0": "bytes",
        "slope#0": "bytes",
        "fee#0": "bytes"
      },
      "block": "buy_policy_with_payment",
      "stack_in": [],
      "op": "proto 8 1"
    },
    "1019": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1021": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2"
      ]
    },
    "1023": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1024": {
      "error": "Must be called in group transaction",
      "op": "assert // Must be called in group transaction",
      "stack_out": []
    },
    "1025": {
      "op": "frame_dig -7",
      "defined_out": [
        "t0#0 (copy)"
      ],
      "stack_out": [
        "t0#0 (copy)"
      ]
    },
    "1027": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1028": {
      "op": "frame_dig -6",
      "defined_out": [
        "t1#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "t1#0 (copy)"
      ]
    },
    "1030": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1031": {
      "op": "dup2",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%2#0 (copy)",
        "tmp%3#0 (copy)"
      ]
    },
    "1032": {
      "op": "<",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1033": {
      "error": "Start time must be before end time",
      "op": "assert // Start time must be before end time",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1034": {
      "op": "frame_dig -5",
      "defined_out": [
        "cap#0 (copy)",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "cap#0 (copy)"
      ]
    },
    "1036": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "1037": {
      "error": "Coverage amount must be positive",
      "op": "assert // Coverage amount must be positive",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1038": {
      "op": "frame_dig -1",
      "defined_out": [
        "fee#0 (copy)",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "fee#0 (copy)"
      ]
    },
    "1040": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%7#0"
      ]
    },
    "1041": {
      "error": "Fee must be positive",
      "op": "assert // Fee must be positive",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1042": {
      "op": "dig 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%2#0 (copy)"
      ]
    },
    "1044": {
      "op": "global Round",
      "defined_out": [
        "current_round#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%2#0 (copy)",
        "current_round#0"
      ]
    },
    "1046": {
      "op": ">",
      "defined_out": [
        "tmp%10#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%10#0"
      ]
    },
    "1047": {
      "error": "Policy cannot start in the past",
      "op": "assert // Policy cannot start in the past",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1048": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0"
      ]
    },
    "1049": {
      "op": "intc_2 // 100",
      "defined_out": [
        "100",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "100"
      ]
    },
    "1050": {
      "op": "+",
      "defined_out": [
        "tmp%13#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%13#0"
      ]
    },
    "1051": {
      "op": ">",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1052": {
      "error": "Policy duration too short (minimum 100 rounds)",
      "op": "assert // Policy duration too short (minimum 100 rounds)",
      "stack_out": []
    },
    "1053": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1054": {
      "op": "bytec_2 // \"next_policy_id\"",
      "defined_out": [
        "\"next_policy_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"next_policy_id\""
      ]
    },
    "1055": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "maybe_exists%0#0"
      ]
    },
    "1056": {
      "error": "check self.next_policy_id exists",
      "op": "assert // check self.next_policy_id exists",
      "stack_out": [
        "policy_id#0"
      ]
    },
    "1057": {
      "op": "dup",
      "defined_out": [
        "policy_id#0",
        "policy_id#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "policy_id#0 (copy)"
      ]
    },
    "1058": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "policy_id#0",
        "policy_id#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "policy_id#0 (copy)",
        "1"
      ]
    },
    "1059": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "materialized_values%0#0"
      ]
    },
    "1060": {
      "op": "bytec_2 // \"next_policy_id\"",
      "stack_out": [
        "policy_id#0",
        "materialized_values%0#0",
        "\"next_policy_id\""
      ]
    },
    "1061": {
      "op": "swap",
      "stack_out": [
        "policy_id#0",
        "\"next_policy_id\"",
        "materialized_values%0#0"
      ]
    },
    "1062": {
      "op": "app_global_put",
      "stack_out": [
        "policy_id#0"
      ]
    },
    "1063": {
      "op": "txn Sender",
      "defined_out": [
        "caller#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "caller#0"
      ]
    },
    "1065": {
      "op": "dup",
      "defined_out": [
        "caller#0",
        "caller#0 (copy)",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "caller#0",
        "caller#0 (copy)"
      ]
    },
    "1066": {
      "op": "bytec 14 // 0x0062",
      "defined_out": [
        "0x0062",
        "caller#0",
        "caller#0 (copy)",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "caller#0",
        "caller#0 (copy)",
        "0x0062"
      ]
    },
    "1068": {
      "op": "concat",
      "defined_out": [
        "caller#0",
        "encoded_tuple_buffer%2#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "caller#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1069": {
      "op": "frame_dig -7",
      "stack_out": [
        "policy_id#0",
        "caller#0",
        "encoded_tuple_buffer%2#0",
        "t0#0 (copy)"
      ]
    },
    "1071": {
      "op": "concat",
      "defined_out": [
        "caller#0",
        "encoded_tuple_buffer%3#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "caller#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1072": {
      "op": "frame_dig -6",
      "stack_out": [
        "policy_id#0",
        "caller#0",
        "encoded_tuple_buffer%3#0",
        "t1#0 (copy)"
      ]
    },
    "1074": {
      "op": "concat",
      "defined_out": [
        "caller#0",
        "encoded_tuple_buffer%4#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "caller#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1075": {
      "op": "frame_dig -5",
      "stack_out": [
        "policy_id#0",
        "caller#0",
        "encoded_tuple_buffer%4#0",
        "cap#0 (copy)"
      ]
    },
    "1077": {
      "op": "concat",
      "defined_out": [
        "caller#0",
        "encoded_tuple_buffer%5#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "caller#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1078": {
      "op": "frame_dig -4",
      "defined_out": [
        "caller#0",
        "direction#0 (copy)",
        "encoded_tuple_buffer%5#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "caller#0",
        "encoded_tuple_buffer%5#0",
        "direction#0 (copy)"
      ]
    },
    "1080": {
      "op": "concat",
      "defined_out": [
        "caller#0",
        "encoded_tuple_buffer%6#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "caller#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1081": {
      "op": "frame_dig -3",
      "defined_out": [
        "caller#0",
        "encoded_tuple_buffer%6#0",
        "policy_id#0",
        "threshold#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "caller#0",
        "encoded_tuple_buffer%6#0",
        "threshold#0 (copy)"
      ]
    },
    "1083": {
      "op": "concat",
      "defined_out": [
        "caller#0",
        "encoded_tuple_buffer%7#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "caller#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1084": {
      "op": "frame_dig -2",
      "defined_out": [
        "caller#0",
        "encoded_tuple_buffer%7#0",
        "policy_id#0",
        "slope#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "caller#0",
        "encoded_tuple_buffer%7#0",
        "slope#0 (copy)"
      ]
    },
    "1086": {
      "op": "concat",
      "defined_out": [
        "caller#0",
        "encoded_tuple_buffer%8#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "caller#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "1087": {
      "op": "frame_dig -1",
      "stack_out": [
        "policy_id#0",
        "caller#0",
        "encoded_tuple_buffer%8#0",
        "fee#0 (copy)"
      ]
    },
    "1089": {
      "op": "concat",
      "defined_out": [
        "caller#0",
        "encoded_tuple_buffer%9#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "caller#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "1090": {
      "op": "bytec_1 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "caller#0",
        "encoded_tuple_buffer%9#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "caller#0",
        "encoded_tuple_buffer%9#0",
        "0x0000000000000000"
      ]
    },
    "1091": {
      "op": "concat",
      "defined_out": [
        "caller#0",
        "encoded_tuple_buffer%10#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "caller#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1092": {
      "op": "frame_dig -8",
      "defined_out": [
        "caller#0",
        "encoded_tuple_buffer%10#0",
        "policy_id#0",
        "zip_code#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "caller#0",
        "encoded_tuple_buffer%10#0",
        "zip_code#0 (copy)"
      ]
    },
    "1094": {
      "op": "concat",
      "defined_out": [
        "caller#0",
        "policy_data#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "caller#0",
        "policy_data#0"
      ]
    },
    "1095": {
      "op": "uncover 2",
      "stack_out": [
        "caller#0",
        "policy_data#0",
        "policy_id#0"
      ]
    },
    "1097": {
      "op": "itob",
      "defined_out": [
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "caller#0",
        "policy_data#0",
        "encoded_value%0#0"
      ]
    },
    "1098": {
      "op": "bytec_3 // \"policies\"",
      "defined_out": [
        "\"policies\"",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "caller#0",
        "policy_data#0",
        "encoded_value%0#0",
        "\"policies\""
      ]
    },
    "1099": {
      "op": "dig 1",
      "defined_out": [
        "\"policies\"",
        "caller#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "policy_data#0"
      ],
      "stack_out": [
        "caller#0",
        "policy_data#0",
        "encoded_value%0#0",
        "\"policies\"",
        "encoded_value%0#0 (copy)"
      ]
    },
    "1101": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "caller#0",
        "policy_data#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1102": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "caller#0",
        "policy_data#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1103": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "{box_del}"
      ],
      "stack_out": [
        "caller#0",
        "policy_data#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "1104": {
      "op": "pop",
      "stack_out": [
        "caller#0",
        "policy_data#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1105": {
      "op": "uncover 2",
      "stack_out": [
        "caller#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0"
      ]
    },
    "1107": {
      "op": "box_put",
      "stack_out": [
        "caller#0",
        "encoded_value%0#0"
      ]
    },
    "1108": {
      "op": "bytec 12 // \"policy_created\"",
      "defined_out": [
        "\"policy_created\"",
        "caller#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "caller#0",
        "encoded_value%0#0",
        "\"policy_created\""
      ]
    },
    "1110": {
      "op": "frame_dig -5",
      "stack_out": [
        "caller#0",
        "encoded_value%0#0",
        "\"policy_created\"",
        "cap#0 (copy)"
      ]
    },
    "1112": {
      "op": "frame_dig -1",
      "stack_out": [
        "caller#0",
        "encoded_value%0#0",
        "\"policy_created\"",
        "cap#0 (copy)",
        "fee#0 (copy)"
      ]
    },
    "1114": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance._update_stats",
      "op": "callsub _update_stats",
      "stack_out": [
        "caller#0",
        "encoded_value%0#0"
      ]
    },
    "1117": {
      "op": "dup",
      "stack_out": [
        "caller#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "1118": {
      "op": "dig 2",
      "stack_out": [
        "caller#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "caller#0 (copy)"
      ]
    },
    "1120": {
      "op": "pushbytes 0x000e706f6c6963795f63726561746564",
      "defined_out": [
        "0x000e706f6c6963795f63726561746564",
        "caller#0",
        "caller#0 (copy)",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ],
      "stack_out": [
        "caller#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "caller#0 (copy)",
        "0x000e706f6c6963795f63726561746564"
      ]
    },
    "1138": {
      "op": "frame_dig -5",
      "stack_out": [
        "caller#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "caller#0 (copy)",
        "0x000e706f6c6963795f63726561746564",
        "cap#0 (copy)"
      ]
    },
    "1140": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance._log_event",
      "op": "callsub _log_event",
      "stack_out": [
        "caller#0",
        "encoded_value%0#0"
      ]
    },
    "1143": {
      "op": "pushbytes 0x504f4c4943595f43524541544544",
      "defined_out": [
        "0x504f4c4943595f43524541544544",
        "caller#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "caller#0",
        "encoded_value%0#0",
        "0x504f4c4943595f43524541544544"
      ]
    },
    "1159": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "0x504f4c4943595f43524541544544",
        "caller#0"
      ]
    },
    "1161": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%15#0"
      ]
    },
    "1162": {
      "op": "log",
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1163": {
      "retsub": true,
      "op": "retsub"
    },
    "1164": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.buy_policy",
      "params": {
        "zip_code#0": "bytes",
        "t0#0": "bytes",
        "t1#0": "bytes",
        "cap#0": "bytes",
        "direction#0": "bytes",
        "threshold#0": "bytes",
        "slope#0": "bytes",
        "fee#0": "bytes"
      },
      "block": "buy_policy",
      "stack_in": [],
      "op": "proto 8 1"
    },
    "1167": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1168": {
      "op": "bytec_2 // \"next_policy_id\"",
      "defined_out": [
        "\"next_policy_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"next_policy_id\""
      ]
    },
    "1169": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "maybe_exists%0#0"
      ]
    },
    "1170": {
      "error": "check self.next_policy_id exists",
      "op": "assert // check self.next_policy_id exists",
      "stack_out": [
        "policy_id#0"
      ]
    },
    "1171": {
      "op": "dup",
      "defined_out": [
        "policy_id#0",
        "policy_id#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "policy_id#0 (copy)"
      ]
    },
    "1172": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "policy_id#0",
        "policy_id#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "policy_id#0 (copy)",
        "1"
      ]
    },
    "1173": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "materialized_values%0#0"
      ]
    },
    "1174": {
      "op": "bytec_2 // \"next_policy_id\"",
      "stack_out": [
        "policy_id#0",
        "materialized_values%0#0",
        "\"next_policy_id\""
      ]
    },
    "1175": {
      "op": "swap",
      "stack_out": [
        "policy_id#0",
        "\"next_policy_id\"",
        "materialized_values%0#0"
      ]
    },
    "1176": {
      "op": "app_global_put",
      "stack_out": [
        "policy_id#0"
      ]
    },
    "1177": {
      "op": "txn Sender",
      "defined_out": [
        "policy_id#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "policy_id#0",
        "tmp%0#0"
      ]
    },
    "1179": {
      "op": "bytec 14 // 0x0062",
      "defined_out": [
        "0x0062",
        "policy_id#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "policy_id#0",
        "tmp%0#0",
        "0x0062"
      ]
    },
    "1181": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1182": {
      "op": "frame_dig -7",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "policy_id#0",
        "t0#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%2#0",
        "t0#0 (copy)"
      ]
    },
    "1184": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1185": {
      "op": "frame_dig -6",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "policy_id#0",
        "t1#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%3#0",
        "t1#0 (copy)"
      ]
    },
    "1187": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1188": {
      "op": "frame_dig -5",
      "defined_out": [
        "cap#0 (copy)",
        "encoded_tuple_buffer%4#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%4#0",
        "cap#0 (copy)"
      ]
    },
    "1190": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1191": {
      "op": "frame_dig -4",
      "defined_out": [
        "direction#0 (copy)",
        "encoded_tuple_buffer%5#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%5#0",
        "direction#0 (copy)"
      ]
    },
    "1193": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1194": {
      "op": "frame_dig -3",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "policy_id#0",
        "threshold#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%6#0",
        "threshold#0 (copy)"
      ]
    },
    "1196": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1197": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "policy_id#0",
        "slope#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%7#0",
        "slope#0 (copy)"
      ]
    },
    "1199": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "1200": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "fee#0 (copy)",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%8#0",
        "fee#0 (copy)"
      ]
    },
    "1202": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "1203": {
      "op": "bytec_1 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%9#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%9#0",
        "0x0000000000000000"
      ]
    },
    "1204": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1205": {
      "op": "frame_dig -8",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "policy_id#0",
        "zip_code#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0",
        "encoded_tuple_buffer%10#0",
        "zip_code#0 (copy)"
      ]
    },
    "1207": {
      "op": "concat",
      "defined_out": [
        "policy_data#0",
        "policy_id#0"
      ],
      "stack_out": [
        "policy_id#0",
        "policy_data#0"
      ]
    },
    "1208": {
      "op": "swap",
      "stack_out": [
        "policy_data#0",
        "policy_id#0"
      ]
    },
    "1209": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "policy_data#0",
        "encoded_value%0#0"
      ]
    },
    "1210": {
      "op": "bytec_3 // \"policies\"",
      "defined_out": [
        "\"policies\"",
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "policy_data#0",
        "encoded_value%0#0",
        "\"policies\""
      ]
    },
    "1211": {
      "op": "dig 1",
      "defined_out": [
        "\"policies\"",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "policy_data#0"
      ],
      "stack_out": [
        "policy_data#0",
        "encoded_value%0#0",
        "\"policies\"",
        "encoded_value%0#0 (copy)"
      ]
    },
    "1213": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "policy_data#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1214": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "policy_data#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1215": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "policy_data#0",
        "{box_del}"
      ],
      "stack_out": [
        "policy_data#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "1216": {
      "op": "pop",
      "stack_out": [
        "policy_data#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1217": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0"
      ]
    },
    "1219": {
      "op": "box_put",
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1220": {
      "retsub": true,
      "op": "retsub"
    },
    "1221": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.oracle_settle",
      "params": {
        "policy_id#0": "bytes",
        "approved#0": "bytes"
      },
      "block": "oracle_settle",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1224": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1226": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1227": {
      "op": "bytec 5 // \"oracle\"",
      "defined_out": [
        "\"oracle\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"oracle\""
      ]
    },
    "1229": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1230": {
      "error": "check self.oracle exists",
      "op": "assert // check self.oracle exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1231": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1232": {
      "error": "Only oracle can settle policies",
      "op": "assert // Only oracle can settle policies",
      "stack_out": []
    },
    "1233": {
      "op": "frame_dig -2",
      "defined_out": [
        "policy_id#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0 (copy)"
      ]
    },
    "1235": {
      "op": "btoi",
      "defined_out": [
        "pid#0"
      ],
      "stack_out": [
        "pid#0"
      ]
    },
    "1236": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1237": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%0#0"
      ]
    },
    "1238": {
      "op": "bytec_3 // \"policies\"",
      "defined_out": [
        "\"policies\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%0#0",
        "\"policies\""
      ]
    },
    "1239": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "\"policies\"",
        "encoded_value%0#0"
      ]
    },
    "1240": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1241": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1242": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "maybe_exists%1#0",
        "policy_data#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "maybe_exists%1#0"
      ]
    },
    "1243": {
      "op": "pop",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0"
      ]
    },
    "1244": {
      "op": "dupn 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "policy_data#0",
        "policy_data#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "policy_data#0",
        "policy_data#0 (copy)"
      ]
    },
    "1246": {
      "op": "intc_3 // 90",
      "defined_out": [
        "90",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "policy_data#0",
        "policy_data#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "policy_data#0",
        "policy_data#0 (copy)",
        "90"
      ]
    },
    "1247": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "policy_data#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "policy_data#0",
        "tmp%3#0"
      ]
    },
    "1248": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "policy_data#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "policy_data#0",
        "tmp%4#0"
      ]
    },
    "1249": {
      "error": "Policy already settled",
      "op": "assert // Policy already settled",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "policy_data#0"
      ]
    },
    "1250": {
      "op": "global Round",
      "defined_out": [
        "box_prefixed_key%0#0",
        "current_round#0",
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "policy_data#0",
        "current_round#0"
      ]
    },
    "1252": {
      "op": "dig 1",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "policy_data#0",
        "current_round#0",
        "policy_data#0 (copy)"
      ]
    },
    "1254": {
      "op": "pushint 34 // 34",
      "defined_out": [
        "34",
        "box_prefixed_key%0#0",
        "current_round#0",
        "encoded_value%0#0",
        "policy_data#0",
        "policy_data#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "policy_data#0",
        "current_round#0",
        "policy_data#0 (copy)",
        "34"
      ]
    },
    "1256": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#0",
        "current_round#0",
        "encoded_value%0#0",
        "policy_data#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "policy_data#0",
        "current_round#0",
        "tmp%6#0"
      ]
    },
    "1257": {
      "op": "dig 1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "current_round#0",
        "current_round#0 (copy)",
        "encoded_value%0#0",
        "policy_data#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "policy_data#0",
        "current_round#0",
        "tmp%6#0",
        "current_round#0 (copy)"
      ]
    },
    "1259": {
      "op": "<=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "current_round#0",
        "encoded_value%0#0",
        "policy_data#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "policy_data#0",
        "current_round#0",
        "tmp%7#0"
      ]
    },
    "1260": {
      "error": "Policy has not started yet",
      "op": "assert // Policy has not started yet",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "policy_data#0",
        "current_round#0"
      ]
    },
    "1261": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "current_round#0",
        "policy_data#0"
      ]
    },
    "1262": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "box_prefixed_key%0#0",
        "current_round#0",
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "current_round#0",
        "policy_data#0",
        "42"
      ]
    },
    "1264": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#0",
        "current_round#0",
        "encoded_value%0#0",
        "policy_data#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "current_round#0",
        "tmp%9#0"
      ]
    },
    "1265": {
      "op": "<=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "policy_data#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "tmp%10#0"
      ]
    },
    "1266": {
      "error": "Policy has expired",
      "op": "assert // Policy has expired",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0"
      ]
    },
    "1267": {
      "op": "intc_1 // 0"
    },
    "1268": {
      "op": "pushbytes 0x0010736574746c65645f72656a6563746564"
    },
    "1288": {
      "op": "frame_dig -1",
      "defined_out": [
        "approved#0 (copy)",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "payout#0",
        "policy_data#0",
        "settlement_action#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "approved#0 (copy)"
      ]
    },
    "1290": {
      "op": "btoi",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "payout#0",
        "policy_data#0",
        "settlement_action#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "tmp%11#0"
      ]
    },
    "1291": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "payout#0",
        "policy_data#0",
        "settlement_action#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "tmp%11#0",
        "1"
      ]
    },
    "1292": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "payout#0",
        "policy_data#0",
        "settlement_action#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "tmp%12#0"
      ]
    },
    "1293": {
      "op": "bz oracle_settle_after_if_else@5",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0"
      ]
    },
    "1296": {
      "op": "frame_dig 2",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "policy_data#0"
      ]
    },
    "1298": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "50",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "payout#0",
        "policy_data#0",
        "settlement_action#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "policy_data#0",
        "50"
      ]
    },
    "1300": {
      "op": "extract_uint64",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "payout#0"
      ]
    },
    "1301": {
      "op": "dup",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "payout#0",
        "payout#0"
      ]
    },
    "1302": {
      "op": "frame_bury 3",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "payout#0"
      ]
    },
    "1304": {
      "op": "pushbytes 0x0010736574746c65645f617070726f766564",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "payout#0",
        "settlement_action#0"
      ]
    },
    "1324": {
      "op": "frame_bury 4",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "payout#0"
      ]
    },
    "1326": {
      "op": "bz oracle_settle_after_if_else@5",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0"
      ]
    },
    "1329": {
      "op": "itxn_begin"
    },
    "1330": {
      "op": "frame_dig 2",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "policy_data#0"
      ]
    },
    "1332": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "payout#0",
        "policy_data#0",
        "reinterpret_bytes[32]%0#0",
        "settlement_action#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1335": {
      "op": "pushbytes 0x41677269477561726420496e737572616e6365205061796f7574",
      "defined_out": [
        "0x41677269477561726420496e737572616e6365205061796f7574",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "payout#0",
        "policy_data#0",
        "reinterpret_bytes[32]%0#0",
        "settlement_action#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "reinterpret_bytes[32]%0#0",
        "0x41677269477561726420496e737572616e6365205061796f7574"
      ]
    },
    "1363": {
      "op": "itxn_field Note",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1365": {
      "op": "frame_dig 3",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "reinterpret_bytes[32]%0#0",
        "payout#0"
      ]
    },
    "1367": {
      "op": "itxn_field Amount",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1369": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0"
      ]
    },
    "1371": {
      "op": "intc_0 // pay",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "pay",
        "payout#0",
        "policy_data#0",
        "settlement_action#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "pay"
      ]
    },
    "1372": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0"
      ]
    },
    "1374": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "payout#0",
        "policy_data#0",
        "settlement_action#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "1000"
      ]
    },
    "1376": {
      "op": "itxn_field Fee",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0"
      ]
    },
    "1378": {
      "op": "itxn_submit"
    },
    "1379": {
      "block": "oracle_settle_after_if_else@5",
      "stack_in": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "policy_data#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "policy_data#0"
      ]
    },
    "1381": {
      "op": "bytec 6 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "policy_data#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "policy_data#0",
        "0x0000000000000001"
      ]
    },
    "1383": {
      "op": "replace2 90",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "policy_data#0"
      ]
    },
    "1385": {
      "op": "frame_dig 1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "policy_data#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1387": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "policy_data#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "policy_data#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1388": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "{box_del}"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "policy_data#0",
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "1389": {
      "op": "pop",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "policy_data#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1390": {
      "op": "dig 1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "policy_data#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "policy_data#0",
        "box_prefixed_key%0#0",
        "policy_data#0 (copy)"
      ]
    },
    "1392": {
      "op": "box_put",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "policy_data#0"
      ]
    },
    "1393": {
      "op": "frame_dig 3",
      "defined_out": [
        "box_prefixed_key%0#0",
        "payout#0",
        "policy_data#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "policy_data#0",
        "payout#0"
      ]
    },
    "1395": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#0",
        "payout#0",
        "policy_data#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "policy_data#0",
        "val_as_bytes%0#0"
      ]
    },
    "1396": {
      "op": "bytec 13 // \"policy_settled\"",
      "defined_out": [
        "\"policy_settled\"",
        "box_prefixed_key%0#0",
        "payout#0",
        "policy_data#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "policy_data#0",
        "val_as_bytes%0#0",
        "\"policy_settled\""
      ]
    },
    "1398": {
      "op": "dig 1",
      "defined_out": [
        "\"policy_settled\"",
        "box_prefixed_key%0#0",
        "payout#0",
        "policy_data#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "policy_data#0",
        "val_as_bytes%0#0",
        "\"policy_settled\"",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "1400": {
      "op": "bytec_1 // 0x0000000000000000",
      "defined_out": [
        "\"policy_settled\"",
        "0x0000000000000000",
        "box_prefixed_key%0#0",
        "payout#0",
        "policy_data#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "policy_data#0",
        "val_as_bytes%0#0",
        "\"policy_settled\"",
        "val_as_bytes%0#0 (copy)",
        "0x0000000000000000"
      ]
    },
    "1401": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance._update_stats",
      "op": "callsub _update_stats",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "policy_data#0",
        "val_as_bytes%0#0"
      ]
    },
    "1404": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "val_as_bytes%0#0",
        "policy_data#0"
      ]
    },
    "1405": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "payout#0",
        "policy_data#0",
        "tmp%15#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "val_as_bytes%0#0",
        "tmp%15#0"
      ]
    },
    "1408": {
      "op": "frame_dig 0",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "payout#0",
        "policy_data#0",
        "tmp%15#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "val_as_bytes%0#0",
        "tmp%15#0",
        "encoded_value%0#0"
      ]
    },
    "1410": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "tmp%15#0"
      ]
    },
    "1411": {
      "op": "frame_dig 4",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "payout#0",
        "policy_data#0",
        "settlement_action#0",
        "tmp%15#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "tmp%15#0",
        "settlement_action#0"
      ]
    },
    "1413": {
      "op": "dig 3",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "tmp%15#0",
        "settlement_action#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "1415": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance._log_event",
      "op": "callsub _log_event",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "val_as_bytes%0#0"
      ]
    },
    "1418": {
      "op": "pushbytes 0x504f4c4943595f534554544c4544",
      "defined_out": [
        "0x504f4c4943595f534554544c4544",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "payout#0",
        "policy_data#0",
        "settlement_action#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "val_as_bytes%0#0",
        "0x504f4c4943595f534554544c4544"
      ]
    },
    "1434": {
      "op": "txn Sender",
      "defined_out": [
        "0x504f4c4943595f534554544c4544",
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "payout#0",
        "policy_data#0",
        "settlement_action#0",
        "tmp%16#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "val_as_bytes%0#0",
        "0x504f4c4943595f534554544c4544",
        "tmp%16#0"
      ]
    },
    "1436": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "payout#0",
        "policy_data#0",
        "settlement_action#0",
        "tmp%17#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "val_as_bytes%0#0",
        "tmp%17#0"
      ]
    },
    "1437": {
      "op": "log",
      "stack_out": [
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "policy_data#0",
        "payout#0",
        "settlement_action#0",
        "val_as_bytes%0#0"
      ]
    },
    "1438": {
      "op": "frame_bury 0"
    },
    "1440": {
      "retsub": true,
      "op": "retsub"
    },
    "1441": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.dispute_settlement",
      "params": {
        "policy_id#0": "bytes",
        "reason#0": "bytes"
      },
      "block": "dispute_settlement",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1444": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "settlement_round#0"
      ]
    },
    "1446": {
      "op": "frame_dig -2",
      "defined_out": [
        "policy_id#0 (copy)"
      ],
      "stack_out": [
        "settlement_round#0",
        "policy_id#0 (copy)"
      ]
    },
    "1448": {
      "op": "btoi",
      "defined_out": [
        "pid#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "pid#0"
      ]
    },
    "1449": {
      "op": "txn Sender",
      "defined_out": [
        "caller#0",
        "pid#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "pid#0",
        "caller#0"
      ]
    },
    "1451": {
      "op": "swap",
      "defined_out": [
        "caller#0",
        "pid#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "pid#0"
      ]
    },
    "1452": {
      "op": "itob",
      "defined_out": [
        "caller#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0"
      ]
    },
    "1453": {
      "op": "dup",
      "defined_out": [
        "caller#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "encoded_value%0#0"
      ]
    },
    "1454": {
      "op": "bytec_3 // \"policies\"",
      "defined_out": [
        "\"policies\"",
        "caller#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "encoded_value%0#0",
        "\"policies\""
      ]
    },
    "1455": {
      "op": "swap",
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "\"policies\"",
        "encoded_value%0#0"
      ]
    },
    "1456": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "caller#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1457": {
      "op": "box_get",
      "defined_out": [
        "caller#0",
        "encoded_value%0#0",
        "exists#0",
        "policy_data#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "exists#0"
      ]
    },
    "1458": {
      "op": "bnz dispute_settlement_after_if_else@2",
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0"
      ]
    },
    "1461": {
      "op": "bytec_1 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "0x0000000000000000"
      ]
    },
    "1462": {
      "op": "frame_bury 0"
    },
    "1464": {
      "retsub": true,
      "op": "retsub"
    },
    "1465": {
      "block": "dispute_settlement_after_if_else@2",
      "stack_in": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "policy_data#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "policy_data#0"
      ]
    },
    "1467": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "policy_data#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "tmp%0#0"
      ]
    },
    "1470": {
      "op": "frame_dig 1",
      "defined_out": [
        "caller#0",
        "policy_data#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "tmp%0#0",
        "caller#0"
      ]
    },
    "1472": {
      "op": "!=",
      "defined_out": [
        "caller#0",
        "policy_data#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "tmp%1#0"
      ]
    },
    "1473": {
      "op": "bz dispute_settlement_after_if_else@4",
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0"
      ]
    },
    "1476": {
      "op": "bytec_1 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "caller#0",
        "policy_data#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "0x0000000000000000"
      ]
    },
    "1477": {
      "op": "frame_bury 0"
    },
    "1479": {
      "retsub": true,
      "op": "retsub"
    },
    "1480": {
      "block": "dispute_settlement_after_if_else@4",
      "stack_in": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "policy_data#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "policy_data#0"
      ]
    },
    "1482": {
      "op": "intc_3 // 90",
      "defined_out": [
        "90",
        "policy_data#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "policy_data#0",
        "90"
      ]
    },
    "1483": {
      "op": "extract_uint64",
      "defined_out": [
        "policy_data#0",
        "settlement_round#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "settlement_round#0"
      ]
    },
    "1484": {
      "op": "dup",
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "settlement_round#0",
        "settlement_round#0"
      ]
    },
    "1485": {
      "op": "frame_bury 0",
      "defined_out": [
        "policy_data#0",
        "settlement_round#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "settlement_round#0"
      ]
    },
    "1487": {
      "op": "bnz dispute_settlement_after_if_else@6",
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0"
      ]
    },
    "1490": {
      "op": "bytec_1 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "policy_data#0",
        "settlement_round#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "0x0000000000000000"
      ]
    },
    "1491": {
      "op": "frame_bury 0"
    },
    "1493": {
      "retsub": true,
      "op": "retsub"
    },
    "1494": {
      "block": "dispute_settlement_after_if_else@6",
      "stack_in": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "op": "global Round",
      "defined_out": [
        "current_round#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "current_round#0"
      ]
    },
    "1496": {
      "op": "frame_dig 0",
      "defined_out": [
        "current_round#0",
        "settlement_round#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "current_round#0",
        "settlement_round#0"
      ]
    },
    "1498": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "current_round#0",
        "settlement_round#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "current_round#0",
        "settlement_round#0",
        "1000"
      ]
    },
    "1500": {
      "op": "+",
      "defined_out": [
        "current_round#0",
        "settlement_round#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "current_round#0",
        "tmp%6#0"
      ]
    },
    "1501": {
      "op": "<=",
      "defined_out": [
        "settlement_round#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "tmp%7#0"
      ]
    },
    "1502": {
      "error": "Dispute filing period expired",
      "op": "assert // Dispute filing period expired",
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0"
      ]
    },
    "1503": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "settlement_round#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "0"
      ]
    },
    "1504": {
      "op": "bytec 9 // \"dispute_contract\"",
      "defined_out": [
        "\"dispute_contract\"",
        "0",
        "settlement_round#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "0",
        "\"dispute_contract\""
      ]
    },
    "1506": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "settlement_round#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1507": {
      "error": "check self.dispute_contract exists",
      "op": "assert // check self.dispute_contract exists",
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "maybe_value%2#0"
      ]
    },
    "1508": {
      "op": "global ZeroAddress",
      "defined_out": [
        "maybe_value%2#0",
        "settlement_round#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "maybe_value%2#0",
        "tmp%8#0"
      ]
    },
    "1510": {
      "op": "!=",
      "defined_out": [
        "settlement_round#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "tmp%9#0"
      ]
    },
    "1511": {
      "op": "bz dispute_settlement_after_if_else@8",
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0"
      ]
    },
    "1514": {
      "op": "pushbytes 0x43524f53535f434f4e54524143545f44495350555445646973707574655f63726561746564",
      "defined_out": [
        "0x43524f53535f434f4e54524143545f44495350555445646973707574655f63726561746564",
        "settlement_round#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "0x43524f53535f434f4e54524143545f44495350555445646973707574655f63726561746564"
      ]
    },
    "1553": {
      "op": "log",
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0"
      ]
    },
    "1554": {
      "block": "dispute_settlement_after_if_else@8",
      "stack_in": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "encoded_value%0#0"
      ]
    },
    "1556": {
      "op": "frame_dig 1",
      "defined_out": [
        "caller#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "encoded_value%0#0",
        "caller#0"
      ]
    },
    "1558": {
      "op": "dup",
      "defined_out": [
        "caller#0",
        "caller#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "encoded_value%0#0",
        "caller#0 (copy)",
        "caller#0 (copy)"
      ]
    },
    "1559": {
      "op": "cover 2",
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "caller#0",
        "encoded_value%0#0",
        "caller#0 (copy)"
      ]
    },
    "1561": {
      "op": "pushbytes 0x00086469737075746564",
      "defined_out": [
        "0x00086469737075746564",
        "caller#0",
        "caller#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "caller#0",
        "encoded_value%0#0",
        "caller#0 (copy)",
        "0x00086469737075746564"
      ]
    },
    "1573": {
      "op": "bytec_1 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "0x00086469737075746564",
        "caller#0",
        "caller#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "caller#0",
        "encoded_value%0#0",
        "caller#0 (copy)",
        "0x00086469737075746564",
        "0x0000000000000000"
      ]
    },
    "1574": {
      "callsub": "smart_contracts.insurance.contract.AgriGuardInsurance._log_event",
      "op": "callsub _log_event",
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "caller#0"
      ]
    },
    "1577": {
      "op": "pushbytes 0x444953505554455f43524541544544",
      "defined_out": [
        "0x444953505554455f43524541544544",
        "caller#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "caller#0",
        "0x444953505554455f43524541544544"
      ]
    },
    "1594": {
      "op": "swap",
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "0x444953505554455f43524541544544",
        "caller#0"
      ]
    },
    "1595": {
      "op": "concat",
      "defined_out": [
        "caller#0",
        "encoded_value%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "tmp%11#0"
      ]
    },
    "1596": {
      "op": "log",
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0"
      ]
    },
    "1597": {
      "op": "bytec 6 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "caller#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "settlement_round#0",
        "caller#0",
        "encoded_value%0#0",
        "policy_data#0",
        "0x0000000000000001"
      ]
    },
    "1599": {
      "op": "frame_bury 0"
    },
    "1601": {
      "retsub": true,
      "op": "retsub"
    },
    "1602": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.get_policy",
      "params": {
        "policy_id#0": "bytes"
      },
      "block": "get_policy",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1605": {
      "op": "frame_dig -1",
      "defined_out": [
        "policy_id#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0 (copy)"
      ]
    },
    "1607": {
      "op": "btoi",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "1608": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1609": {
      "op": "bytec_3 // \"policies\"",
      "defined_out": [
        "\"policies\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"policies\""
      ]
    },
    "1610": {
      "op": "swap",
      "stack_out": [
        "\"policies\"",
        "encoded_value%0#0"
      ]
    },
    "1611": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1612": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1613": {
      "op": "pop",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1614": {
      "retsub": true,
      "op": "retsub"
    },
    "1615": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.get_policies_by_owner",
      "params": {
        "owner#0": "bytes"
      },
      "block": "get_policies_by_owner",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1618": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1619": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10"
      ]
    },
    "1621": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10"
      ]
    },
    "1622": {
      "op": "intc_1 // 0"
    },
    "1623": {
      "op": "dupn 2"
    },
    "1625": {
      "op": "bytec_2 // \"next_policy_id\"",
      "defined_out": [
        "\"next_policy_id\"",
        "0",
        "count#0",
        "first_policy_id#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "0",
        "\"next_policy_id\""
      ]
    },
    "1626": {
      "op": "app_global_get_ex",
      "defined_out": [
        "count#0",
        "first_policy_id#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1627": {
      "error": "check self.next_policy_id exists",
      "op": "assert // check self.next_policy_id exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0"
      ]
    },
    "1628": {
      "op": "intc_0 // 1",
      "defined_out": [
        "count#0",
        "first_policy_id#0",
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "1629": {
      "block": "get_policies_by_owner_for_header@1",
      "stack_in": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "i#0"
      ]
    },
    "1631": {
      "op": "frame_dig 5",
      "defined_out": [
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "i#0",
        "maybe_value%0#0"
      ]
    },
    "1633": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "1634": {
      "op": "bz get_policies_by_owner_after_for@10",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "1637": {
      "op": "frame_dig 6",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "i#0"
      ]
    },
    "1639": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "encoded_value%0#0"
      ]
    },
    "1640": {
      "op": "bytec_3 // \"policies\"",
      "defined_out": [
        "\"policies\"",
        "encoded_value%0#0",
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "encoded_value%0#0",
        "\"policies\""
      ]
    },
    "1641": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "\"policies\"",
        "encoded_value%0#0"
      ]
    },
    "1642": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1643": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1644": {
      "op": "frame_bury 0",
      "defined_out": [
        "box_prefixed_key%0#0",
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1646": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "i#0",
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1647": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "maybe_exists%1#0"
      ]
    },
    "1649": {
      "op": "frame_dig 4",
      "defined_out": [
        "box_prefixed_key%0#0",
        "first_policy_id#10",
        "i#0",
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "maybe_exists%1#0",
        "first_policy_id#10"
      ]
    },
    "1651": {
      "op": "frame_bury 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "first_policy_id#10",
        "i#0",
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "maybe_exists%1#0"
      ]
    },
    "1653": {
      "op": "frame_dig 3",
      "defined_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "i#0",
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "maybe_exists%1#0",
        "count#10"
      ]
    },
    "1655": {
      "op": "frame_bury 1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "i#0",
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "maybe_exists%1#0"
      ]
    },
    "1657": {
      "op": "bz get_policies_by_owner_after_if_else@8",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "1660": {
      "op": "frame_dig 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1662": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "i#0",
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "policy_data#0",
        "maybe_exists%2#0"
      ]
    },
    "1663": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "policy_data#0"
      ]
    },
    "1664": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "i#0",
        "maybe_value%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1667": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "i#0",
        "maybe_value%0#0",
        "owner#0 (copy)",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "reinterpret_bytes[32]%0#0",
        "owner#0 (copy)"
      ]
    },
    "1669": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "i#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "1670": {
      "op": "frame_dig 4",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "tmp%0#0",
        "first_policy_id#10"
      ]
    },
    "1672": {
      "op": "frame_bury 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "1674": {
      "op": "frame_dig 3",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "tmp%0#0",
        "count#10"
      ]
    },
    "1676": {
      "op": "frame_bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "1678": {
      "op": "bz get_policies_by_owner_after_if_else@7",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "1681": {
      "op": "frame_dig 3",
      "defined_out": [
        "box_prefixed_key%0#0",
        "count#0",
        "count#10",
        "first_policy_id#10",
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "count#0"
      ]
    },
    "1683": {
      "op": "intc_0 // 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "count#0",
        "1"
      ]
    },
    "1684": {
      "op": "+",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "count#0"
      ]
    },
    "1685": {
      "op": "frame_bury 3",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "1687": {
      "op": "frame_dig 4",
      "defined_out": [
        "box_prefixed_key%0#0",
        "count#0",
        "count#10",
        "first_policy_id#0",
        "first_policy_id#10",
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "first_policy_id#0"
      ]
    },
    "1689": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "first_policy_id#0",
        "first_policy_id#10"
      ]
    },
    "1690": {
      "op": "frame_bury 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "first_policy_id#0"
      ]
    },
    "1692": {
      "op": "bnz get_policies_by_owner_after_if_else@6",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "1695": {
      "op": "frame_dig 6",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "first_policy_id#10"
      ]
    },
    "1697": {
      "op": "frame_bury 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "1699": {
      "block": "get_policies_by_owner_after_if_else@6",
      "stack_in": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "count#10"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "count#10"
      ]
    },
    "1701": {
      "op": "frame_bury 1",
      "defined_out": [
        "count#10"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "1703": {
      "block": "get_policies_by_owner_after_if_else@7",
      "stack_in": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ],
      "op": "b get_policies_by_owner_after_if_else@8",
      "defined_out": [
        "count#0",
        "count#10",
        "first_policy_id#0",
        "first_policy_id#10"
      ]
    },
    "1706": {
      "block": "get_policies_by_owner_after_if_else@8",
      "stack_in": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "first_policy_id#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "first_policy_id#0"
      ]
    },
    "1708": {
      "op": "frame_bury 4",
      "defined_out": [
        "first_policy_id#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "1710": {
      "op": "frame_dig 1",
      "defined_out": [
        "count#0",
        "first_policy_id#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "count#0"
      ]
    },
    "1712": {
      "op": "frame_bury 3",
      "defined_out": [
        "count#0",
        "first_policy_id#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "1714": {
      "op": "frame_dig 6",
      "defined_out": [
        "count#0",
        "first_policy_id#0",
        "i#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "i#0"
      ]
    },
    "1716": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "count#0",
        "first_policy_id#0",
        "i#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "1717": {
      "op": "+",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "i#0"
      ]
    },
    "1718": {
      "op": "frame_bury 6",
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "1720": {
      "op": "b get_policies_by_owner_for_header@1"
    },
    "1723": {
      "block": "get_policies_by_owner_after_for@10",
      "stack_in": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "count#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "count#0"
      ]
    },
    "1725": {
      "op": "itob",
      "defined_out": [
        "count#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "val_as_bytes%0#0"
      ]
    },
    "1726": {
      "op": "frame_dig 4",
      "defined_out": [
        "count#0",
        "first_policy_id#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "val_as_bytes%0#0",
        "first_policy_id#0"
      ]
    },
    "1728": {
      "op": "itob",
      "defined_out": [
        "count#0",
        "first_policy_id#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1729": {
      "op": "concat",
      "defined_out": [
        "count#0",
        "encoded_tuple_buffer%2#0",
        "first_policy_id#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "count#10",
        "first_policy_id#10",
        "count#0",
        "first_policy_id#0",
        "maybe_value%0#0",
        "i#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1730": {
      "op": "frame_bury 0"
    },
    "1732": {
      "retsub": true,
      "op": "retsub"
    },
    "1733": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.get_policy_count",
      "params": {},
      "block": "get_policy_count",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1734": {
      "op": "bytec_2 // \"next_policy_id\"",
      "defined_out": [
        "\"next_policy_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"next_policy_id\""
      ]
    },
    "1735": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1736": {
      "error": "check self.next_policy_id exists",
      "op": "assert // check self.next_policy_id exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1737": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "1738": {
      "op": "-",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1739": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1740": {
      "retsub": true,
      "op": "retsub"
    },
    "1741": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.calculate_fee",
      "params": {
        "cap#0": "bytes",
        "risk_score#0": "bytes",
        "uncertainty#0": "bytes",
        "duration_days#0": "bytes"
      },
      "block": "calculate_fee",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "1744": {
      "op": "frame_dig -4",
      "defined_out": [
        "cap#0 (copy)"
      ],
      "stack_out": [
        "cap#0 (copy)"
      ]
    },
    "1746": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1747": {
      "op": "intc_2 // 100",
      "defined_out": [
        "100",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "100"
      ]
    },
    "1748": {
      "op": "/",
      "defined_out": [
        "base_fee#0"
      ],
      "stack_out": [
        "base_fee#0"
      ]
    },
    "1749": {
      "op": "frame_dig -3",
      "defined_out": [
        "base_fee#0",
        "risk_score#0 (copy)"
      ],
      "stack_out": [
        "base_fee#0",
        "risk_score#0 (copy)"
      ]
    },
    "1751": {
      "op": "btoi",
      "defined_out": [
        "base_fee#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "base_fee#0",
        "tmp%1#0"
      ]
    },
    "1752": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "base_fee#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "base_fee#0",
        "tmp%1#0",
        "2"
      ]
    },
    "1754": {
      "op": "/",
      "defined_out": [
        "base_fee#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "base_fee#0",
        "tmp%2#0"
      ]
    },
    "1755": {
      "op": "intc_2 // 100",
      "stack_out": [
        "base_fee#0",
        "tmp%2#0",
        "100"
      ]
    },
    "1756": {
      "op": "+",
      "defined_out": [
        "base_fee#0",
        "risk_multiplier#0"
      ],
      "stack_out": [
        "base_fee#0",
        "risk_multiplier#0"
      ]
    },
    "1757": {
      "op": "frame_dig -2",
      "defined_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "uncertainty#0 (copy)"
      ],
      "stack_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "uncertainty#0 (copy)"
      ]
    },
    "1759": {
      "op": "btoi",
      "defined_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "tmp%3#0"
      ]
    },
    "1760": {
      "op": "intc_2 // 100",
      "stack_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "tmp%3#0",
        "100"
      ]
    },
    "1761": {
      "op": "+",
      "defined_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "uncertainty_multiplier#0"
      ],
      "stack_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "uncertainty_multiplier#0"
      ]
    },
    "1762": {
      "op": "frame_dig -1",
      "defined_out": [
        "base_fee#0",
        "duration_days#0 (copy)",
        "risk_multiplier#0",
        "uncertainty_multiplier#0"
      ],
      "stack_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "uncertainty_multiplier#0",
        "duration_days#0 (copy)"
      ]
    },
    "1764": {
      "op": "btoi",
      "defined_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "tmp%4#0",
        "uncertainty_multiplier#0"
      ],
      "stack_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "uncertainty_multiplier#0",
        "tmp%4#0"
      ]
    },
    "1765": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "uncertainty_multiplier#0",
        "tmp%4#0",
        "2"
      ]
    },
    "1767": {
      "op": "/",
      "defined_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "tmp%5#0",
        "uncertainty_multiplier#0"
      ],
      "stack_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "uncertainty_multiplier#0",
        "tmp%5#0"
      ]
    },
    "1768": {
      "op": "intc_2 // 100",
      "stack_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "uncertainty_multiplier#0",
        "tmp%5#0",
        "100"
      ]
    },
    "1769": {
      "op": "+",
      "defined_out": [
        "base_fee#0",
        "duration_multiplier#0",
        "risk_multiplier#0",
        "uncertainty_multiplier#0"
      ],
      "stack_out": [
        "base_fee#0",
        "risk_multiplier#0",
        "uncertainty_multiplier#0",
        "duration_multiplier#0"
      ]
    },
    "1770": {
      "op": "uncover 3",
      "stack_out": [
        "risk_multiplier#0",
        "uncertainty_multiplier#0",
        "duration_multiplier#0",
        "base_fee#0"
      ]
    },
    "1772": {
      "op": "uncover 3",
      "stack_out": [
        "uncertainty_multiplier#0",
        "duration_multiplier#0",
        "base_fee#0",
        "risk_multiplier#0"
      ]
    },
    "1774": {
      "op": "*",
      "defined_out": [
        "duration_multiplier#0",
        "tmp%6#0",
        "uncertainty_multiplier#0"
      ],
      "stack_out": [
        "uncertainty_multiplier#0",
        "duration_multiplier#0",
        "tmp%6#0"
      ]
    },
    "1775": {
      "op": "uncover 2",
      "stack_out": [
        "duration_multiplier#0",
        "tmp%6#0",
        "uncertainty_multiplier#0"
      ]
    },
    "1777": {
      "op": "*",
      "defined_out": [
        "duration_multiplier#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "duration_multiplier#0",
        "tmp%7#0"
      ]
    },
    "1778": {
      "op": "*",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1779": {
      "op": "pushint 1000000 // 1000000",
      "defined_out": [
        "1000000",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "1000000"
      ]
    },
    "1783": {
      "op": "/",
      "defined_out": [
        "fee#0"
      ],
      "stack_out": [
        "fee#0"
      ]
    },
    "1784": {
      "op": "dup",
      "defined_out": [
        "fee#0"
      ],
      "stack_out": [
        "fee#0",
        "fee#0"
      ]
    },
    "1785": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "fee#0"
      ],
      "stack_out": [
        "fee#0",
        "fee#0",
        "1000"
      ]
    },
    "1787": {
      "op": "<",
      "defined_out": [
        "fee#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "fee#0",
        "tmp%11#0"
      ]
    },
    "1788": {
      "op": "bz calculate_fee_after_if_else@2",
      "stack_out": [
        "fee#0"
      ]
    },
    "1791": {
      "op": "intc 4 // 1000",
      "stack_out": [
        "fee#0",
        "fee#0"
      ]
    },
    "1793": {
      "op": "frame_bury 0",
      "stack_out": [
        "fee#0"
      ]
    },
    "1795": {
      "block": "calculate_fee_after_if_else@2",
      "stack_in": [
        "fee#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "fee#0"
      ],
      "stack_out": [
        "fee#0",
        "fee#0"
      ]
    },
    "1797": {
      "op": "itob",
      "defined_out": [
        "fee#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "fee#0",
        "val_as_bytes%0#0"
      ]
    },
    "1798": {
      "op": "swap"
    },
    "1799": {
      "retsub": true,
      "op": "retsub"
    },
    "1800": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.delete_policy",
      "params": {
        "policy_id#0": "bytes"
      },
      "block": "delete_policy",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1803": {
      "op": "frame_dig -1",
      "defined_out": [
        "policy_id#0 (copy)"
      ],
      "stack_out": [
        "policy_id#0 (copy)"
      ]
    },
    "1805": {
      "op": "btoi",
      "defined_out": [
        "pid#0"
      ],
      "stack_out": [
        "pid#0"
      ]
    },
    "1806": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1807": {
      "op": "bytec_3 // \"policies\"",
      "defined_out": [
        "\"policies\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"policies\""
      ]
    },
    "1808": {
      "op": "swap",
      "stack_out": [
        "\"policies\"",
        "encoded_value%0#0"
      ]
    },
    "1809": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1810": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1811": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "exists#0",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "exists#0"
      ]
    },
    "1812": {
      "op": "bnz delete_policy_after_if_else@2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0"
      ]
    },
    "1815": {
      "op": "bytec_1 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "box_prefixed_key%0#0",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "0x0000000000000000"
      ]
    },
    "1816": {
      "op": "frame_bury 0"
    },
    "1818": {
      "retsub": true,
      "op": "retsub"
    },
    "1819": {
      "block": "delete_policy_after_if_else@2",
      "stack_in": [
        "box_prefixed_key%0#0",
        "policy_data#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "caller#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "caller#0"
      ]
    },
    "1821": {
      "op": "frame_dig 1",
      "defined_out": [
        "caller#0",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "caller#0",
        "policy_data#0"
      ]
    },
    "1823": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "caller#0",
        "policy_data#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "caller#0",
        "tmp%0#0"
      ]
    },
    "1826": {
      "op": "!=",
      "defined_out": [
        "policy_data#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "tmp%1#0"
      ]
    },
    "1827": {
      "op": "bz delete_policy_after_if_else@4",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0"
      ]
    },
    "1830": {
      "op": "bytec_1 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "0x0000000000000000"
      ]
    },
    "1831": {
      "op": "frame_bury 0"
    },
    "1833": {
      "retsub": true,
      "op": "retsub"
    },
    "1834": {
      "block": "delete_policy_after_if_else@4",
      "stack_in": [
        "box_prefixed_key%0#0",
        "policy_data#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "policy_data#0"
      ]
    },
    "1836": {
      "op": "intc_3 // 90",
      "defined_out": [
        "90",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "policy_data#0",
        "90"
      ]
    },
    "1837": {
      "op": "extract_uint64",
      "defined_out": [
        "policy_data#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "tmp%3#0"
      ]
    },
    "1838": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "policy_data#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "tmp%3#0",
        "1"
      ]
    },
    "1839": {
      "op": "==",
      "defined_out": [
        "policy_data#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "tmp%4#0"
      ]
    },
    "1840": {
      "op": "bz delete_policy_after_if_else@6",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0"
      ]
    },
    "1843": {
      "op": "bytec_1 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "policy_data#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "0x0000000000000000"
      ]
    },
    "1844": {
      "op": "frame_bury 0"
    },
    "1846": {
      "retsub": true,
      "op": "retsub"
    },
    "1847": {
      "block": "delete_policy_after_if_else@6",
      "stack_in": [
        "box_prefixed_key%0#0",
        "policy_data#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1849": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "{box_del}"
      ]
    },
    "1850": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0"
      ]
    },
    "1851": {
      "op": "bytec 6 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "policy_data#0",
        "0x0000000000000001"
      ]
    },
    "1853": {
      "op": "frame_bury 0"
    },
    "1855": {
      "retsub": true,
      "op": "retsub"
    },
    "1856": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.get_globals",
      "params": {},
      "block": "get_globals",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1857": {
      "op": "bytec 4 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"admin\""
      ]
    },
    "1859": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1860": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1861": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "1862": {
      "op": "bytec 5 // \"oracle\"",
      "defined_out": [
        "\"oracle\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"oracle\""
      ]
    },
    "1864": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1865": {
      "error": "check self.oracle exists",
      "op": "assert // check self.oracle exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "1866": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "1867": {
      "op": "bytec_2 // \"next_policy_id\"",
      "defined_out": [
        "\"next_policy_id\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0",
        "\"next_policy_id\""
      ]
    },
    "1868": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1869": {
      "error": "check self.next_policy_id exists",
      "op": "assert // check self.next_policy_id exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "1870": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "1871": {
      "op": "cover 2",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "1873": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1874": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "1875": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1876": {
      "retsub": true,
      "op": "retsub"
    },
    "1877": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.get_statistics",
      "params": {},
      "block": "get_statistics",
      "stack_in": [],
      "op": "bytec 8 // \"stats_box\"",
      "defined_out": [
        "\"stats_box\""
      ],
      "stack_out": [
        "\"stats_box\""
      ]
    },
    "1879": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1880": {
      "error": "check self.stats_box exists",
      "op": "assert // check self.stats_box exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1881": {
      "retsub": true,
      "op": "retsub"
    },
    "1882": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.get_event",
      "params": {
        "event_id#0": "bytes"
      },
      "block": "get_event",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1885": {
      "op": "frame_dig -1",
      "defined_out": [
        "event_id#0 (copy)"
      ],
      "stack_out": [
        "event_id#0 (copy)"
      ]
    },
    "1887": {
      "op": "btoi",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "1888": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1889": {
      "op": "bytec 11 // \"event_log\"",
      "defined_out": [
        "\"event_log\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"event_log\""
      ]
    },
    "1891": {
      "op": "swap",
      "stack_out": [
        "\"event_log\"",
        "encoded_value%0#0"
      ]
    },
    "1892": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1893": {
      "op": "box_get",
      "defined_out": [
        "event#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "event#0",
        "maybe_exists%0#0"
      ]
    },
    "1894": {
      "op": "pop",
      "stack_out": [
        "event#0"
      ]
    },
    "1895": {
      "op": "dup",
      "defined_out": [
        "event#0"
      ],
      "stack_out": [
        "event#0",
        "event#0"
      ]
    },
    "1896": {
      "op": "pushbytes base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5AAAAAAAAAAAAAAAAAAAAAAAAAAAAA)",
      "defined_out": [
        "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5AAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        "event#0"
      ],
      "stack_out": [
        "event#0",
        "event#0",
        "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5AAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      ]
    },
    "1958": {
      "op": "==",
      "defined_out": [
        "event#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "event#0",
        "tmp%1#0"
      ]
    },
    "1959": {
      "op": "bz get_event_after_if_else@2",
      "stack_out": [
        "event#0"
      ]
    },
    "1962": {
      "op": "pushbytes base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5AAAAAAAAAAAAAAAAAAAAAAAAAAAAPMV3GK3TUL5XG65C7MZXXK3TE)",
      "defined_out": [
        "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5AAAAAAAAAAAAAAAAAAAAAAAAAAAAPMV3GK3TUL5XG65C7MZXXK3TE",
        "event#0"
      ],
      "stack_out": [
        "event#0",
        "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5AAAAAAAAAAAAAAAAAAAAAAAAAAAAPMV3GK3TUL5XG65C7MZXXK3TE"
      ]
    },
    "2039": {
      "op": "swap"
    },
    "2040": {
      "retsub": true,
      "op": "retsub"
    },
    "2041": {
      "block": "get_event_after_if_else@2",
      "stack_in": [
        "event#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "event#0"
      ],
      "stack_out": [
        "event#0",
        "event#0"
      ]
    },
    "2043": {
      "op": "swap"
    },
    "2044": {
      "retsub": true,
      "op": "retsub"
    },
    "2045": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.get_recent_events",
      "params": {
        "limit#0": "bytes"
      },
      "block": "get_recent_events",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2048": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2049": {
      "op": "bytec 7 // \"next_event_id\"",
      "defined_out": [
        "\"next_event_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"next_event_id\""
      ]
    },
    "2051": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2052": {
      "error": "check self.next_event_id exists",
      "op": "assert // check self.next_event_id exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2053": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "2054": {
      "op": "-",
      "defined_out": [
        "total_events#0"
      ],
      "stack_out": [
        "total_events#0"
      ]
    },
    "2055": {
      "op": "dup",
      "defined_out": [
        "total_events#0"
      ],
      "stack_out": [
        "total_events#0",
        "total_events#0"
      ]
    },
    "2056": {
      "op": "frame_dig -1",
      "defined_out": [
        "limit#0 (copy)",
        "total_events#0"
      ],
      "stack_out": [
        "total_events#0",
        "total_events#0",
        "limit#0 (copy)"
      ]
    },
    "2058": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "total_events#0"
      ],
      "stack_out": [
        "total_events#0",
        "total_events#0",
        "tmp%0#0"
      ]
    },
    "2059": {
      "op": "-",
      "defined_out": [
        "tmp%1#0",
        "total_events#0"
      ],
      "stack_out": [
        "total_events#0",
        "tmp%1#0"
      ]
    },
    "2060": {
      "op": "intc_0 // 1",
      "stack_out": [
        "total_events#0",
        "tmp%1#0",
        "1"
      ]
    },
    "2061": {
      "op": "+",
      "defined_out": [
        "start_id#0",
        "total_events#0"
      ],
      "stack_out": [
        "total_events#0",
        "start_id#0"
      ]
    },
    "2062": {
      "op": "dup",
      "defined_out": [
        "start_id#0",
        "total_events#0"
      ],
      "stack_out": [
        "total_events#0",
        "start_id#0",
        "start_id#0"
      ]
    },
    "2063": {
      "op": "intc_0 // 1",
      "stack_out": [
        "total_events#0",
        "start_id#0",
        "start_id#0",
        "1"
      ]
    },
    "2064": {
      "op": "<",
      "defined_out": [
        "start_id#0",
        "tmp%2#0",
        "total_events#0"
      ],
      "stack_out": [
        "total_events#0",
        "start_id#0",
        "tmp%2#0"
      ]
    },
    "2065": {
      "op": "bz get_recent_events_after_if_else@2",
      "stack_out": [
        "total_events#0",
        "start_id#0"
      ]
    },
    "2068": {
      "op": "intc_0 // 1",
      "stack_out": [
        "total_events#0",
        "start_id#0",
        "start_id#0"
      ]
    },
    "2069": {
      "op": "frame_bury 1",
      "stack_out": [
        "total_events#0",
        "start_id#0"
      ]
    },
    "2071": {
      "block": "get_recent_events_after_if_else@2",
      "stack_in": [
        "total_events#0",
        "start_id#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "total_events#0"
      ],
      "stack_out": [
        "total_events#0",
        "start_id#0",
        "total_events#0"
      ]
    },
    "2073": {
      "op": "itob",
      "defined_out": [
        "total_events#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "total_events#0",
        "start_id#0",
        "val_as_bytes%0#0"
      ]
    },
    "2074": {
      "op": "frame_dig 1",
      "defined_out": [
        "start_id#0",
        "total_events#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "total_events#0",
        "start_id#0",
        "val_as_bytes%0#0",
        "start_id#0"
      ]
    },
    "2076": {
      "op": "itob",
      "defined_out": [
        "start_id#0",
        "total_events#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "total_events#0",
        "start_id#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2077": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "start_id#0",
        "total_events#0"
      ],
      "stack_out": [
        "total_events#0",
        "start_id#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2078": {
      "op": "frame_bury 0"
    },
    "2080": {
      "retsub": true,
      "op": "retsub"
    },
    "2081": {
      "subroutine": "smart_contracts.insurance.contract.AgriGuardInsurance.validate_policy_timing",
      "params": {
        "policy_id#0": "bytes"
      },
      "block": "validate_policy_timing",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2084": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "current_round#0"
      ]
    },
    "2086": {
      "op": "frame_dig -1",
      "defined_out": [
        "policy_id#0 (copy)"
      ],
      "stack_out": [
        "current_round#0",
        "policy_id#0 (copy)"
      ]
    },
    "2088": {
      "op": "btoi",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "current_round#0",
        "materialized_values%0#0"
      ]
    },
    "2089": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "current_round#0",
        "encoded_value%0#0"
      ]
    },
    "2090": {
      "op": "bytec_3 // \"policies\"",
      "defined_out": [
        "\"policies\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "current_round#0",
        "encoded_value%0#0",
        "\"policies\""
      ]
    },
    "2091": {
      "op": "swap",
      "stack_out": [
        "current_round#0",
        "\"policies\"",
        "encoded_value%0#0"
      ]
    },
    "2092": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "current_round#0",
        "box_prefixed_key%0#0"
      ]
    },
    "2093": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "policy_data#0"
      ],
      "stack_out": [
        "current_round#0",
        "policy_data#0",
        "exists#0"
      ]
    },
    "2094": {
      "op": "bnz validate_policy_timing_after_if_else@2",
      "stack_out": [
        "current_round#0",
        "policy_data#0"
      ]
    },
    "2097": {
      "op": "bytec_1 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "policy_data#0"
      ],
      "stack_out": [
        "current_round#0",
        "policy_data#0",
        "0x0000000000000000"
      ]
    },
    "2098": {
      "op": "frame_bury 0"
    },
    "2100": {
      "retsub": true,
      "op": "retsub"
    },
    "2101": {
      "block": "validate_policy_timing_after_if_else@2",
      "stack_in": [
        "current_round#0",
        "policy_data#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "policy_data#0"
      ],
      "stack_out": [
        "current_round#0",
        "policy_data#0",
        "policy_data#0"
      ]
    },
    "2103": {
      "op": "intc_3 // 90",
      "defined_out": [
        "90",
        "policy_data#0"
      ],
      "stack_out": [
        "current_round#0",
        "policy_data#0",
        "policy_data#0",
        "90"
      ]
    },
    "2104": {
      "op": "extract_uint64",
      "defined_out": [
        "policy_data#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "current_round#0",
        "policy_data#0",
        "tmp%1#0"
      ]
    },
    "2105": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "policy_data#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "current_round#0",
        "policy_data#0",
        "tmp%1#0",
        "1"
      ]
    },
    "2106": {
      "op": "==",
      "defined_out": [
        "policy_data#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "current_round#0",
        "policy_data#0",
        "tmp%2#0"
      ]
    },
    "2107": {
      "op": "bz validate_policy_timing_after_if_else@4",
      "stack_out": [
        "current_round#0",
        "policy_data#0"
      ]
    },
    "2110": {
      "op": "pushbytes 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002",
        "policy_data#0"
      ],
      "stack_out": [
        "current_round#0",
        "policy_data#0",
        "0x0000000000000002"
      ]
    },
    "2120": {
      "op": "frame_bury 0"
    },
    "2122": {
      "retsub": true,
      "op": "retsub"
    },
    "2123": {
      "block": "validate_policy_timing_after_if_else@4",
      "stack_in": [
        "current_round#0",
        "policy_data#0"
      ],
      "op": "global Round"
    },
    "2125": {
      "op": "dup",
      "defined_out": [
        "current_round#0"
      ],
      "stack_out": [
        "current_round#0",
        "policy_data#0",
        "current_round#0",
        "current_round#0"
      ]
    },
    "2126": {
      "op": "frame_bury 0",
      "defined_out": [
        "current_round#0"
      ],
      "stack_out": [
        "current_round#0",
        "policy_data#0",
        "current_round#0"
      ]
    },
    "2128": {
      "op": "frame_dig 1",
      "defined_out": [
        "current_round#0",
        "policy_data#0"
      ],
      "stack_out": [
        "current_round#0",
        "policy_data#0",
        "current_round#0",
        "policy_data#0"
      ]
    },
    "2130": {
      "op": "pushint 34 // 34",
      "defined_out": [
        "34",
        "current_round#0",
        "policy_data#0"
      ],
      "stack_out": [
        "current_round#0",
        "policy_data#0",
        "current_round#0",
        "policy_data#0",
        "34"
      ]
    },
    "2132": {
      "op": "extract_uint64",
      "defined_out": [
        "current_round#0",
        "policy_data#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "current_round#0",
        "policy_data#0",
        "current_round#0",
        "tmp%4#0"
      ]
    },
    "2133": {
      "op": "<",
      "defined_out": [
        "current_round#0",
        "policy_data#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "current_round#0",
        "policy_data#0",
        "tmp%5#0"
      ]
    },
    "2134": {
      "op": "bz validate_policy_timing_after_if_else@6",
      "stack_out": [
        "current_round#0",
        "policy_data#0"
      ]
    },
    "2137": {
      "op": "pushbytes 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003",
        "current_round#0",
        "policy_data#0"
      ],
      "stack_out": [
        "current_round#0",
        "policy_data#0",
        "0x0000000000000003"
      ]
    },
    "2147": {
      "op": "frame_bury 0"
    },
    "2149": {
      "retsub": true,
      "op": "retsub"
    },
    "2150": {
      "block": "validate_policy_timing_after_if_else@6",
      "stack_in": [
        "current_round#0",
        "policy_data#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "policy_data#0"
      ],
      "stack_out": [
        "current_round#0",
        "policy_data#0",
        "policy_data#0"
      ]
    },
    "2152": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "policy_data#0"
      ],
      "stack_out": [
        "current_round#0",
        "policy_data#0",
        "policy_data#0",
        "42"
      ]
    },
    "2154": {
      "op": "extract_uint64",
      "defined_out": [
        "policy_data#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "current_round#0",
        "policy_data#0",
        "tmp%7#0"
      ]
    },
    "2155": {
      "op": "frame_dig 0",
      "defined_out": [
        "current_round#0",
        "policy_data#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "current_round#0",
        "policy_data#0",
        "tmp%7#0",
        "current_round#0"
      ]
    },
    "2157": {
      "op": "<",
      "defined_out": [
        "current_round#0",
        "policy_data#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "current_round#0",
        "policy_data#0",
        "tmp%8#0"
      ]
    },
    "2158": {
      "op": "bz validate_policy_timing_after_if_else@8",
      "stack_out": [
        "current_round#0",
        "policy_data#0"
      ]
    },
    "2161": {
      "op": "pushbytes 0x0000000000000004",
      "defined_out": [
        "0x0000000000000004",
        "current_round#0",
        "policy_data#0"
      ],
      "stack_out": [
        "current_round#0",
        "policy_data#0",
        "0x0000000000000004"
      ]
    },
    "2171": {
      "op": "frame_bury 0"
    },
    "2173": {
      "retsub": true,
      "op": "retsub"
    },
    "2174": {
      "block": "validate_policy_timing_after_if_else@8",
      "stack_in": [
        "current_round#0",
        "policy_data#0"
      ],
      "op": "bytec 6 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "current_round#0",
        "policy_data#0",
        "0x0000000000000001"
      ]
    },
    "2176": {
      "op": "frame_bury 0"
    },
    "2178": {
      "retsub": true,
      "op": "retsub"
    }
  }
}