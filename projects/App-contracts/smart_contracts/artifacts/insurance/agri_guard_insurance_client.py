# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": [], "create": ["NoOp"]}, "args": [{"type": "address", "name": "admin"}], "name": "create_application", "returns": {"type": "void"}, "desc": "Initialize the application with admin", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "oracle"}], "name": "set_oracle", "returns": {"type": "void"}, "desc": "Set oracle account (admin only)", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[]", "name": "zip_code"}, {"type": "uint64", "name": "t0"}, {"type": "uint64", "name": "t1"}, {"type": "uint64", "name": "cap"}, {"type": "uint64", "name": "direction"}, {"type": "uint64", "name": "threshold"}, {"type": "uint64", "name": "slope"}, {"type": "uint64", "name": "fee"}], "name": "buy_policy_with_payment", "returns": {"type": "uint64"}, "desc": "Buy insurance policy with integrated payment using group transaction\nExpects to be called as part of a group transaction where: - Transaction 1: Payment from user to contract - Transaction 2: This function call", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[]", "name": "zip_code"}, {"type": "uint64", "name": "t0"}, {"type": "uint64", "name": "t1"}, {"type": "uint64", "name": "cap"}, {"type": "uint64", "name": "direction"}, {"type": "uint64", "name": "threshold"}, {"type": "uint64", "name": "slope"}, {"type": "uint64", "name": "fee"}], "name": "buy_policy", "returns": {"type": "uint64"}, "desc": "Buy insurance policy (simple version for testing)\nPayment should be sent to contract address before calling this method", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "policy_id"}, {"type": "uint64", "name": "approved"}], "name": "oracle_settle", "returns": {"type": "uint64"}, "desc": "Oracle-only settlement\nIf approved == 1 \u2192 payout = cap; else 0", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "policy_id"}], "name": "get_policy", "returns": {"type": "(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)", "struct": "PolicyData"}, "desc": "Get policy data by ID", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "owner"}], "name": "get_policies_by_owner", "returns": {"type": "(uint64,uint64)"}, "desc": "Get all policy IDs for a specific owner\nReturns: (count, first_policy_id) Note: This is a simplified implementation for MVP", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_policy_count", "returns": {"type": "uint64"}, "desc": "Get total number of policies created", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "cap"}, {"type": "uint64", "name": "risk_score"}, {"type": "uint64", "name": "uncertainty"}, {"type": "uint64", "name": "duration_days"}], "name": "calculate_fee", "returns": {"type": "uint64"}, "desc": "Calculate policy fee based on risk parameters\nFormula: base_fee * risk_multiplier * uncertainty_multiplier * duration_multiplier", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_globals", "returns": {"type": "(address,address,uint64)"}, "desc": "Get global state", "events": [], "readonly": true, "recommendations": {}}], "name": "AgriGuardInsurance", "state": {"keys": {"box": {}, "global": {"admin": {"key": "YWRtaW4=", "keyType": "AVMString", "valueType": "address"}, "oracle": {"key": "b3JhY2xl", "keyType": "AVMString", "valueType": "address"}, "next_policy_id": {"key": "bmV4dF9wb2xpY3lfaWQ=", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {"policies": {"keyType": "uint64", "valueType": "PolicyData", "prefix": "cG9saWNpZXM="}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 2, "ints": 1}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"PolicyData": [{"name": "owner", "type": "address"}, {"name": "zip_code", "type": "string"}, {"name": "t0", "type": "uint64"}, {"name": "t1", "type": "uint64"}, {"name": "cap", "type": "uint64"}, {"name": "direction", "type": "uint64"}, {"name": "threshold", "type": "uint64"}, {"name": "slope", "type": "uint64"}, {"name": "fee_paid", "type": "uint64"}, {"name": "settled", "type": "uint64"}]}, "byteCode": {"approval": "CiAFAQBkAugHJgcObmV4dF9wb2xpY3lfaWQEFR98dQhwb2xpY2llcwVhZG1pbgZvcmFjbGUCAGIIAAAAAAAAAAAxGEAADCsyA2cnBDIDZygiZzEbQQBNggoEiUpxbgQzaPVWBGcXIdYEUPmSrATvkJ84BOsN4CsEP3j24wSr9tUaBPogAgwEGg4gSDYaAI4KANkAygCiAHoAZABRAD4ALgASAAIjQzEZFEQxGESIApMpTFCwIkMxGRREMRhENhoBNhoCNhoDNhoEiAI+KUxQsCJDMRkURDEYRIgCJilMULAiQzEZFEQxGEQ2GgGIAZ0pTFCwIkMxGRREMRhENhoBiAF9KUxQsCJDMRkURDEYRDYaATYaAogBBylMULAiQzEZFEQxGEQ2GgE2GgI2GgM2GgQ2GgU2GgY2Ggc2GgiIAKUpTFCwIkMxGRREMRhENhoBNhoCNhoDNhoENhoFNhoGNhoHNhoIiAA+KUxQsCJDMRkURDEYRDYaAYgAGiJDMRkURDEYFEQ2GgGIAAIiQ4oBACuL/2eJigEAMQAjK2VEEkQnBIv/Z4mKCAEyBCUSRCMoZURJIggoTGcxACcFUIv5UIv6UIv7UIv8UIv9UIv+UIv/UCcGUIv4UEwWKksBUEm8SE8Cv4mKCAEjKGVESSIIKExnMQAnBVCL+VCL+lCL+1CL/FCL/VCL/lCL/1AnBlCL+FBMFipLAVBJvEhPAr+JigIBMQAjJwRlRBJEi/4XFipMUEm+SEmBWlsURCOL/xciEkEAB4sBgTJbjAKLAkEAFLGLAVcAIIsCsgiyByKyECEEsgGziwGACAAAAAAAAAABXFqLAEm8SEy/iwIWjACJigEBi/8XFipMUL5IiYoBASOAAEkjRwIoZUQiiwaLBQxBAFaLBhYqTFBJjAC+RQGLBIwCiwOMAUEALosAvkhXACCL/xKLBIwCiwOMAUEAFosDIgiMA4sESYwCQAAEiwaMAosDjAFCAACLAowEiwGMA4sGIgiMBkL/oosDFosEFlCMAIkjKGVEIgkWiYoEAYv8FyQKi/0XJQokCIv+FyQIi/8XJQokCE8DTwMLTwILC4HAhD0KSSEEDEEABCEEjACLABZMiSMrZUQjJwRlRCMoZUQWTgJQTFCJ", "clear": "CoEBQw=="}, "desc": "\n    Minimal AgriGuard Insurance Contract\n    \n    Features:\n    - Buy policy with group transaction (payment + function call)\n    - Oracle settlement\n    - Policy storage by owner address\n    - Helper functions to get policies\n    ", "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [595, 701], "errorMessage": "Index access is out of bounds"}, {"pc": [429], "errorMessage": "Must be called in group transaction"}, {"pc": [169, 185, 213, 229, 248, 267, 289, 329, 369, 384], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [415], "errorMessage": "Only admin can set oracle"}, {"pc": [554], "errorMessage": "Only oracle"}, {"pc": [570], "errorMessage": "Policy already settled"}, {"pc": [388], "errorMessage": "can only call when creating"}, {"pc": [172, 188, 216, 232, 251, 270, 292, 332, 372], "errorMessage": "can only call when not creating"}, {"pc": [413, 838], "errorMessage": "check self.admin exists"}, {"pc": [433, 491, 664, 773, 847], "errorMessage": "check self.next_policy_id exists"}, {"pc": [552, 843], "errorMessage": "check self.oracle exists"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class PolicyData:
    """Struct for PolicyData"""
    owner: str
    zip_code: str
    t0: int
    t1: int
    cap: int
    direction: int
    threshold: int
    slope: int
    fee_paid: int
    settled: int


@dataclasses.dataclass(frozen=True, kw_only=True)
class SetOracleArgs:
    """Dataclass for set_oracle arguments"""
    oracle: str

    @property
    def abi_method_signature(self) -> str:
        return "set_oracle(address)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BuyPolicyWithPaymentArgs:
    """Dataclass for buy_policy_with_payment arguments"""
    zip_code: bytes | str
    t0: int
    t1: int
    cap: int
    direction: int
    threshold: int
    slope: int
    fee: int

    @property
    def abi_method_signature(self) -> str:
        return "buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BuyPolicyArgs:
    """Dataclass for buy_policy arguments"""
    zip_code: bytes | str
    t0: int
    t1: int
    cap: int
    direction: int
    threshold: int
    slope: int
    fee: int

    @property
    def abi_method_signature(self) -> str:
        return "buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class OracleSettleArgs:
    """Dataclass for oracle_settle arguments"""
    policy_id: int
    approved: int

    @property
    def abi_method_signature(self) -> str:
        return "oracle_settle(uint64,uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetPolicyArgs:
    """Dataclass for get_policy arguments"""
    policy_id: int

    @property
    def abi_method_signature(self) -> str:
        return "get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetPoliciesByOwnerArgs:
    """Dataclass for get_policies_by_owner arguments"""
    owner: str

    @property
    def abi_method_signature(self) -> str:
        return "get_policies_by_owner(address)(uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CalculateFeeArgs:
    """Dataclass for calculate_fee arguments"""
    cap: int
    risk_score: int
    uncertainty: int
    duration_days: int

    @property
    def abi_method_signature(self) -> str:
        return "calculate_fee(uint64,uint64,uint64,uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateApplicationArgs:
    """Dataclass for create_application arguments"""
    admin: str

    @property
    def abi_method_signature(self) -> str:
        return "create_application(address)void"


class AgriGuardInsuranceParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def set_oracle(
        self,
        args: tuple[str] | SetOracleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_oracle(address)void",
            "args": method_args,
        }))

    def buy_policy_with_payment(
        self,
        args: tuple[bytes | str, int, int, int, int, int, int, int] | BuyPolicyWithPaymentArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64",
            "args": method_args,
        }))

    def buy_policy(
        self,
        args: tuple[bytes | str, int, int, int, int, int, int, int] | BuyPolicyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64",
            "args": method_args,
        }))

    def oracle_settle(
        self,
        args: tuple[int, int] | OracleSettleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "oracle_settle(uint64,uint64)uint64",
            "args": method_args,
        }))

    def get_policy(
        self,
        args: tuple[int] | GetPolicyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
            "args": method_args,
        }))

    def get_policies_by_owner(
        self,
        args: tuple[str] | GetPoliciesByOwnerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_policies_by_owner(address)(uint64,uint64)",
            "args": method_args,
        }))

    def get_policy_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_policy_count()uint64",
        }))

    def calculate_fee(
        self,
        args: tuple[int, int, int, int] | CalculateFeeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calculate_fee(uint64,uint64,uint64,uint64)uint64",
            "args": method_args,
        }))

    def get_globals(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_globals()(address,address,uint64)",
        }))

    def create_application(
        self,
        args: tuple[str] | CreateApplicationArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_application(address)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class AgriGuardInsuranceCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def set_oracle(
        self,
        args: tuple[str] | SetOracleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_oracle(address)void",
            "args": method_args,
        }))

    def buy_policy_with_payment(
        self,
        args: tuple[bytes | str, int, int, int, int, int, int, int] | BuyPolicyWithPaymentArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64",
            "args": method_args,
        }))

    def buy_policy(
        self,
        args: tuple[bytes | str, int, int, int, int, int, int, int] | BuyPolicyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64",
            "args": method_args,
        }))

    def oracle_settle(
        self,
        args: tuple[int, int] | OracleSettleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "oracle_settle(uint64,uint64)uint64",
            "args": method_args,
        }))

    def get_policy(
        self,
        args: tuple[int] | GetPolicyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
            "args": method_args,
        }))

    def get_policies_by_owner(
        self,
        args: tuple[str] | GetPoliciesByOwnerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_policies_by_owner(address)(uint64,uint64)",
            "args": method_args,
        }))

    def get_policy_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_policy_count()uint64",
        }))

    def calculate_fee(
        self,
        args: tuple[int, int, int, int] | CalculateFeeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calculate_fee(uint64,uint64,uint64,uint64)uint64",
            "args": method_args,
        }))

    def get_globals(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_globals()(address,address,uint64)",
        }))

    def create_application(
        self,
        args: tuple[str] | CreateApplicationArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_application(address)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class AgriGuardInsuranceSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def set_oracle(
        self,
        args: tuple[str] | SetOracleArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_oracle(address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def buy_policy_with_payment(
        self,
        args: tuple[bytes | str, int, int, int, int, int, int, int] | BuyPolicyWithPaymentArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def buy_policy(
        self,
        args: tuple[bytes | str, int, int, int, int, int, int, int] | BuyPolicyArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def oracle_settle(
        self,
        args: tuple[int, int] | OracleSettleArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "oracle_settle(uint64,uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_policy(
        self,
        args: tuple[int] | GetPolicyArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[PolicyData]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(PolicyData, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[PolicyData], parsed_response)

    def get_policies_by_owner(
        self,
        args: tuple[str] | GetPoliciesByOwnerArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_policies_by_owner(address)(uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int]], parsed_response)

    def get_policy_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_policy_count()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def calculate_fee(
        self,
        args: tuple[int, int, int, int] | CalculateFeeArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calculate_fee(uint64,uint64,uint64,uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_globals(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[str, str, int]]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_globals()(address,address,uint64)",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[str, str, int]], parsed_response)

    def create_application(
        self,
        args: tuple[str] | CreateApplicationArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_application(address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    admin: str
    oracle: str
    next_policy_id: int

class AgriGuardInsuranceState:
    """Methods to access state for the current AgriGuardInsurance app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def admin(self) -> str:
        """Get the current value of the admin key in global_state state"""
        value = self.app_client.state.global_state.get_value("admin")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def oracle(self) -> str:
        """Get the current value of the oracle key in global_state state"""
        value = self.app_client.state.global_state.get_value("oracle")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def next_policy_id(self) -> int:
        """Get the current value of the next_policy_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("next_policy_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {
            "PolicyData": PolicyData
        }

    def get_all(self) -> dict[str, typing.Any]:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return {}

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return converted

    @property
    def policies(self) -> "_MapState[int, PolicyData]":
        """Get values from the policies map in box state"""
        return _MapState(
            self.app_client.state.box,
            "policies",
            self._struct_classes.get("PolicyData")
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class AgriGuardInsuranceClient:
    """Client for interacting with AgriGuardInsurance smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = AgriGuardInsuranceParams(self.app_client)
        self.create_transaction = AgriGuardInsuranceCreateTransactionParams(self.app_client)
        self.send = AgriGuardInsuranceSend(self.app_client)
        self.state = AgriGuardInsuranceState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "AgriGuardInsuranceClient":
        return AgriGuardInsuranceClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "AgriGuardInsuranceClient":
        return AgriGuardInsuranceClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "AgriGuardInsuranceClient":
        return AgriGuardInsuranceClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "AgriGuardInsuranceComposer":
        return AgriGuardInsuranceComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_oracle(address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["oracle_settle(uint64,uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> PolicyData | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_policies_by_owner(address)(uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_policy_count()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["calculate_fee(uint64,uint64,uint64,uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_globals()(address,address,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[str, str, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_application(address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | PolicyData | int | tuple[int, int] | tuple[str, str, int]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class AgriGuardInsuranceMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        CreateApplicationArgs,
        str | None,
    ]
):
    """Parameters for creating AgriGuardInsurance contract using ABI"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class AgriGuardInsuranceFactory(algokit_utils.TypedAppFactoryProtocol[AgriGuardInsuranceMethodCallCreateParams, None, None]):
    """Factory for deploying and managing AgriGuardInsuranceClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = AgriGuardInsuranceFactoryParams(self.app_factory)
        self.create_transaction = AgriGuardInsuranceFactoryCreateTransaction(self.app_factory)
        self.send = AgriGuardInsuranceFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: AgriGuardInsuranceMethodCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[AgriGuardInsuranceClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return AgriGuardInsuranceClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> AgriGuardInsuranceClient:
        """Get an app client by creator address and name"""
        return AgriGuardInsuranceClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> AgriGuardInsuranceClient:
        """Get an app client by app ID"""
        return AgriGuardInsuranceClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class AgriGuardInsuranceFactoryParams:
    """Parameters for creating transactions for AgriGuardInsurance contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = AgriGuardInsuranceFactoryCreateParams(app_factory)
        self.update = AgriGuardInsuranceFactoryUpdateParams(app_factory)
        self.delete = AgriGuardInsuranceFactoryDeleteParams(app_factory)

class AgriGuardInsuranceFactoryCreateParams:
    """Parameters for 'create' operations of AgriGuardInsurance contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def set_oracle(
        self,
        args: tuple[str] | SetOracleArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_oracle(address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_oracle(address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def buy_policy_with_payment(
        self,
        args: tuple[bytes | str, int, int, int, int, int, int, int] | BuyPolicyWithPaymentArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def buy_policy(
        self,
        args: tuple[bytes | str, int, int, int, int, int, int, int] | BuyPolicyArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def oracle_settle(
        self,
        args: tuple[int, int] | OracleSettleArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the oracle_settle(uint64,uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "oracle_settle(uint64,uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_policy(
        self,
        args: tuple[int] | GetPolicyArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_policies_by_owner(
        self,
        args: tuple[str] | GetPoliciesByOwnerArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_policies_by_owner(address)(uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_policies_by_owner(address)(uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_policy_count(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_policy_count()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_policy_count()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def calculate_fee(
        self,
        args: tuple[int, int, int, int] | CalculateFeeArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the calculate_fee(uint64,uint64,uint64,uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "calculate_fee(uint64,uint64,uint64,uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_globals(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_globals()(address,address,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_globals()(address,address,uint64)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def create_application(
        self,
        args: tuple[str] | CreateApplicationArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_application(address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_application(address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class AgriGuardInsuranceFactoryUpdateParams:
    """Parameters for 'update' operations of AgriGuardInsurance contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class AgriGuardInsuranceFactoryDeleteParams:
    """Parameters for 'delete' operations of AgriGuardInsurance contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class AgriGuardInsuranceFactoryCreateTransaction:
    """Create transactions for AgriGuardInsurance contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = AgriGuardInsuranceFactoryCreateTransactionCreate(app_factory)


class AgriGuardInsuranceFactoryCreateTransactionCreate:
    """Create new instances of AgriGuardInsurance contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class AgriGuardInsuranceFactorySend:
    """Send calls to AgriGuardInsurance contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = AgriGuardInsuranceFactorySendCreate(app_factory)


class AgriGuardInsuranceFactorySendCreate:
    """Send create calls to AgriGuardInsurance contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[AgriGuardInsuranceClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return AgriGuardInsuranceClient(result[0]), result[1]

    def create_application(
        self,
        args: tuple[str] | CreateApplicationArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[AgriGuardInsuranceClient, algokit_utils.AppFactoryCreateMethodCallResult[None]]:
            """Creates and sends a transaction using the create_application(address)void ABI method"""
            params = params or algokit_utils.CommonAppCallCreateParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "create_application(address)void",
                    "args": _parse_abi_args(args),
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(None, result.abi_return)
    
            return AgriGuardInsuranceClient(client), algokit_utils.AppFactoryCreateMethodCallResult[None](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class AgriGuardInsuranceComposer:
    """Composer for creating transaction groups for AgriGuardInsurance contract calls"""

    def __init__(self, client: "AgriGuardInsuranceClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def set_oracle(
        self,
        args: tuple[str] | SetOracleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AgriGuardInsuranceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_oracle(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_oracle(address)void", v
            )
        )
        return self

    def buy_policy_with_payment(
        self,
        args: tuple[bytes | str, int, int, int, int, int, int, int] | BuyPolicyWithPaymentArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AgriGuardInsuranceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.buy_policy_with_payment(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "buy_policy_with_payment(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64", v
            )
        )
        return self

    def buy_policy(
        self,
        args: tuple[bytes | str, int, int, int, int, int, int, int] | BuyPolicyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AgriGuardInsuranceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.buy_policy(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "buy_policy(byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64", v
            )
        )
        return self

    def oracle_settle(
        self,
        args: tuple[int, int] | OracleSettleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AgriGuardInsuranceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.oracle_settle(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "oracle_settle(uint64,uint64)uint64", v
            )
        )
        return self

    def get_policy(
        self,
        args: tuple[int] | GetPolicyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AgriGuardInsuranceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_policy(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_policy(uint64)(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)", v
            )
        )
        return self

    def get_policies_by_owner(
        self,
        args: tuple[str] | GetPoliciesByOwnerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AgriGuardInsuranceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_policies_by_owner(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_policies_by_owner(address)(uint64,uint64)", v
            )
        )
        return self

    def get_policy_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AgriGuardInsuranceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_policy_count(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_policy_count()uint64", v
            )
        )
        return self

    def calculate_fee(
        self,
        args: tuple[int, int, int, int] | CalculateFeeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AgriGuardInsuranceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.calculate_fee(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "calculate_fee(uint64,uint64,uint64,uint64)uint64", v
            )
        )
        return self

    def get_globals(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AgriGuardInsuranceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_globals(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_globals()(address,address,uint64)", v
            )
        )
        return self

    def create_application(
        self,
        args: tuple[str] | CreateApplicationArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AgriGuardInsuranceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_application(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_application(address)void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "AgriGuardInsuranceComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "AgriGuardInsuranceComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
