{
    "name": "AgriGuardInsurance",
    "structs": {
        "PolicyData": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "zip_code",
                "type": "string"
            },
            {
                "name": "t0",
                "type": "uint64"
            },
            {
                "name": "t1",
                "type": "uint64"
            },
            {
                "name": "cap",
                "type": "uint64"
            },
            {
                "name": "direction",
                "type": "uint64"
            },
            {
                "name": "threshold",
                "type": "uint64"
            },
            {
                "name": "slope",
                "type": "uint64"
            },
            {
                "name": "fee_paid",
                "type": "uint64"
            },
            {
                "name": "settled",
                "type": "uint64"
            }
        ],
        "InsuranceStats": [
            {
                "name": "total_policies",
                "type": "uint64"
            },
            {
                "name": "total_coverage",
                "type": "uint64"
            },
            {
                "name": "total_payouts",
                "type": "uint64"
            },
            {
                "name": "active_policies",
                "type": "uint64"
            },
            {
                "name": "total_fees_collected",
                "type": "uint64"
            }
        ],
        "PolicyEvent": [
            {
                "name": "policy_id",
                "type": "uint64"
            },
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "action",
                "type": "string"
            },
            {
                "name": "timestamp",
                "type": "uint64"
            },
            {
                "name": "amount",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "create_application",
            "args": [
                {
                    "type": "address",
                    "name": "admin"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Initialize the application with admin and setup enhanced features",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_dispute_contract",
            "args": [
                {
                    "type": "address",
                    "name": "dispute_contract"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Set the dispute resolution contract address (admin only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_oracle",
            "args": [
                {
                    "type": "address",
                    "name": "oracle"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Set oracle account (admin only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_oracle",
            "args": [],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get current oracle account address",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buy_policy_with_payment",
            "args": [
                {
                    "type": "byte[]",
                    "name": "zip_code"
                },
                {
                    "type": "uint64",
                    "name": "t0"
                },
                {
                    "type": "uint64",
                    "name": "t1"
                },
                {
                    "type": "uint64",
                    "name": "cap"
                },
                {
                    "type": "uint64",
                    "name": "direction"
                },
                {
                    "type": "uint64",
                    "name": "threshold"
                },
                {
                    "type": "uint64",
                    "name": "slope"
                },
                {
                    "type": "uint64",
                    "name": "fee"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Buy insurance policy with integrated payment using group transaction\nEnhanced with validation, event logging, and statistics tracking Expects to be called as part of a group transaction where: - Transaction 1: Payment from user to contract - Transaction 2: This function call",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buy_policy",
            "args": [
                {
                    "type": "byte[]",
                    "name": "zip_code"
                },
                {
                    "type": "uint64",
                    "name": "t0"
                },
                {
                    "type": "uint64",
                    "name": "t1"
                },
                {
                    "type": "uint64",
                    "name": "cap"
                },
                {
                    "type": "uint64",
                    "name": "direction"
                },
                {
                    "type": "uint64",
                    "name": "threshold"
                },
                {
                    "type": "uint64",
                    "name": "slope"
                },
                {
                    "type": "uint64",
                    "name": "fee"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Buy insurance policy (simple version for testing)\nPayment should be sent to contract address before calling this method",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "oracle_settle",
            "args": [
                {
                    "type": "uint64",
                    "name": "policy_id"
                },
                {
                    "type": "uint64",
                    "name": "approved"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Enhanced oracle settlement with cross-contract communication and event logging\nIf approved == 1 \u2192 payout = cap; else 0",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "dispute_settlement",
            "args": [
                {
                    "type": "uint64",
                    "name": "policy_id"
                },
                {
                    "type": "string",
                    "name": "reason"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Enhanced dispute creation with cross-contract communication\nOnly the policy owner can dispute their own policy",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_policy",
            "args": [
                {
                    "type": "uint64",
                    "name": "policy_id"
                }
            ],
            "returns": {
                "type": "(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
                "struct": "PolicyData"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get policy data by ID",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_policies_by_owner",
            "args": [
                {
                    "type": "address",
                    "name": "owner"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get all policy IDs for a specific owner\nReturns: (count, first_policy_id) Note: This is a simplified implementation for MVP",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_policy_count",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get total number of policies created",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculate_fee",
            "args": [
                {
                    "type": "uint64",
                    "name": "cap"
                },
                {
                    "type": "uint64",
                    "name": "risk_score"
                },
                {
                    "type": "uint64",
                    "name": "uncertainty"
                },
                {
                    "type": "uint64",
                    "name": "duration_days"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Calculate policy fee based on risk parameters\nFormula: base_fee * risk_multiplier * uncertainty_multiplier * duration_multiplier",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_policy",
            "args": [
                {
                    "type": "uint64",
                    "name": "policy_id"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Delete a policy by ID - only the owner can delete their own unsettled policy\nReturns: 1 if successful, 0 if failed",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_globals",
            "args": [],
            "returns": {
                "type": "(address,address,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get global state",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_statistics",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64,uint64)",
                "struct": "InsuranceStats"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get comprehensive insurance statistics",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_event",
            "args": [
                {
                    "type": "uint64",
                    "name": "event_id"
                }
            ],
            "returns": {
                "type": "(uint64,address,string,uint64,uint64)",
                "struct": "PolicyEvent"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get a specific event by ID",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_recent_events",
            "args": [
                {
                    "type": "uint64",
                    "name": "limit"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get recent events (returns count and starting event ID)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_policy_timing",
            "args": [
                {
                    "type": "uint64",
                    "name": "policy_id"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Validate if a policy is currently active based on timing",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "\n    Enhanced AgriGuard Insurance Contract with Algorand Features\n\n    Features:\n    - Buy policy with group transaction (payment + function call)\n    - Oracle settlement with asset transfers\n    - Policy storage by owner address with enhanced box management\n    - Event logging for transparency\n    - Cross-contract dispute resolution\n    - Asset-based fee management\n    - Time-based policy validation\n    ",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 3,
                "bytes": 3
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "admin": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YWRtaW4="
                },
                "oracle": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "b3JhY2xl"
                },
                "dispute_contract": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "ZGlzcHV0ZV9jb250cmFjdA=="
                },
                "next_policy_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmV4dF9wb2xpY3lfaWQ="
                },
                "contract_creation_round": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y29udHJhY3RfY3JlYXRpb25fcm91bmQ="
                },
                "next_event_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmV4dF9ldmVudF9pZA=="
                }
            },
            "local": {},
            "box": {
                "stats_box": {
                    "keyType": "AVMString",
                    "valueType": "InsuranceStats",
                    "key": "c3RhdHNfYm94"
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "policies": {
                    "keyType": "uint64",
                    "valueType": "PolicyData",
                    "prefix": "cG9saWNpZXM="
                },
                "event_log": {
                    "keyType": "uint64",
                    "valueType": "PolicyEvent",
                    "prefix": "ZXZlbnRfbG9n"
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1037
                    ],
                    "errorMessage": "Coverage amount must be positive"
                },
                {
                    "pc": [
                        1502
                    ],
                    "errorMessage": "Dispute filing period expired"
                },
                {
                    "pc": [
                        1041
                    ],
                    "errorMessage": "Fee must be positive"
                },
                {
                    "pc": [
                        1332,
                        1405,
                        1467,
                        1664,
                        1823
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        1024
                    ],
                    "errorMessage": "Must be called in group transaction"
                },
                {
                    "pc": [
                        353,
                        372,
                        391,
                        410,
                        426,
                        442,
                        461,
                        489,
                        505,
                        524,
                        543,
                        565,
                        587,
                        627,
                        667,
                        683,
                        698,
                        717
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        827
                    ],
                    "errorMessage": "Only admin can set dispute contract"
                },
                {
                    "pc": [
                        1003
                    ],
                    "errorMessage": "Only admin can set oracle"
                },
                {
                    "pc": [
                        1232
                    ],
                    "errorMessage": "Only oracle can settle policies"
                },
                {
                    "pc": [
                        1249
                    ],
                    "errorMessage": "Policy already settled"
                },
                {
                    "pc": [
                        1047
                    ],
                    "errorMessage": "Policy cannot start in the past"
                },
                {
                    "pc": [
                        1052
                    ],
                    "errorMessage": "Policy duration too short (minimum 100 rounds)"
                },
                {
                    "pc": [
                        1266
                    ],
                    "errorMessage": "Policy has expired"
                },
                {
                    "pc": [
                        1260
                    ],
                    "errorMessage": "Policy has not started yet"
                },
                {
                    "pc": [
                        1033
                    ],
                    "errorMessage": "Start time must be before end time"
                },
                {
                    "pc": [
                        721
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        356,
                        375,
                        394,
                        413,
                        429,
                        445,
                        464,
                        492,
                        508,
                        527,
                        546,
                        568,
                        590,
                        630,
                        670,
                        686,
                        701
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        825,
                        1001,
                        1860
                    ],
                    "errorMessage": "check self.admin exists"
                },
                {
                    "pc": [
                        1507
                    ],
                    "errorMessage": "check self.dispute_contract exists"
                },
                {
                    "pc": [
                        864,
                        2052
                    ],
                    "errorMessage": "check self.next_event_id exists"
                },
                {
                    "pc": [
                        1056,
                        1170,
                        1627,
                        1736,
                        1869
                    ],
                    "errorMessage": "check self.next_policy_id exists"
                },
                {
                    "pc": [
                        1014,
                        1230,
                        1865
                    ],
                    "errorMessage": "check self.oracle exists"
                },
                {
                    "pc": [
                        891,
                        1880
                    ],
                    "errorMessage": "check self.stats_box exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}