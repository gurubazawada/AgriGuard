{
    "name": "AgriGuardInsurance",
    "structs": {
        "PolicyData": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "zip_code",
                "type": "string"
            },
            {
                "name": "t0",
                "type": "uint64"
            },
            {
                "name": "t1",
                "type": "uint64"
            },
            {
                "name": "cap",
                "type": "uint64"
            },
            {
                "name": "direction",
                "type": "uint64"
            },
            {
                "name": "threshold",
                "type": "uint64"
            },
            {
                "name": "slope",
                "type": "uint64"
            },
            {
                "name": "fee_paid",
                "type": "uint64"
            },
            {
                "name": "settled",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "create_application",
            "args": [
                {
                    "type": "address",
                    "name": "admin"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Initialize the application with admin",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_oracle",
            "args": [
                {
                    "type": "address",
                    "name": "oracle"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Set oracle account (admin only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buy_policy_with_payment",
            "args": [
                {
                    "type": "byte[]",
                    "name": "zip_code"
                },
                {
                    "type": "uint64",
                    "name": "t0"
                },
                {
                    "type": "uint64",
                    "name": "t1"
                },
                {
                    "type": "uint64",
                    "name": "cap"
                },
                {
                    "type": "uint64",
                    "name": "direction"
                },
                {
                    "type": "uint64",
                    "name": "threshold"
                },
                {
                    "type": "uint64",
                    "name": "slope"
                },
                {
                    "type": "uint64",
                    "name": "fee"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Buy insurance policy with integrated payment using group transaction\nExpects to be called as part of a group transaction where: - Transaction 1: Payment from user to contract - Transaction 2: This function call",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buy_policy",
            "args": [
                {
                    "type": "byte[]",
                    "name": "zip_code"
                },
                {
                    "type": "uint64",
                    "name": "t0"
                },
                {
                    "type": "uint64",
                    "name": "t1"
                },
                {
                    "type": "uint64",
                    "name": "cap"
                },
                {
                    "type": "uint64",
                    "name": "direction"
                },
                {
                    "type": "uint64",
                    "name": "threshold"
                },
                {
                    "type": "uint64",
                    "name": "slope"
                },
                {
                    "type": "uint64",
                    "name": "fee"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Buy insurance policy (simple version for testing)\nPayment should be sent to contract address before calling this method",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "oracle_settle",
            "args": [
                {
                    "type": "uint64",
                    "name": "policy_id"
                },
                {
                    "type": "uint64",
                    "name": "approved"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Oracle-only settlement\nIf approved == 1 \u2192 payout = cap; else 0",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_policy",
            "args": [
                {
                    "type": "uint64",
                    "name": "policy_id"
                }
            ],
            "returns": {
                "type": "(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
                "struct": "PolicyData"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get policy data by ID",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_policies_by_owner",
            "args": [
                {
                    "type": "address",
                    "name": "owner"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get all policy IDs for a specific owner\nReturns: (count, first_policy_id) Note: This is a simplified implementation for MVP",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_policy_count",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get total number of policies created",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculate_fee",
            "args": [
                {
                    "type": "uint64",
                    "name": "cap"
                },
                {
                    "type": "uint64",
                    "name": "risk_score"
                },
                {
                    "type": "uint64",
                    "name": "uncertainty"
                },
                {
                    "type": "uint64",
                    "name": "duration_days"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Calculate policy fee based on risk parameters\nFormula: base_fee * risk_multiplier * uncertainty_multiplier * duration_multiplier",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_globals",
            "args": [],
            "returns": {
                "type": "(address,address,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get global state",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "\n    Minimal AgriGuard Insurance Contract\n    \n    Features:\n    - Buy policy with group transaction (payment + function call)\n    - Oracle settlement\n    - Policy storage by owner address\n    - Helper functions to get policies\n    ",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "admin": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YWRtaW4="
                },
                "oracle": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "b3JhY2xl"
                },
                "next_policy_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmV4dF9wb2xpY3lfaWQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "policies": {
                    "keyType": "uint64",
                    "valueType": "PolicyData",
                    "prefix": "cG9saWNpZXM="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        595,
                        701
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        429
                    ],
                    "errorMessage": "Must be called in group transaction"
                },
                {
                    "pc": [
                        169,
                        185,
                        213,
                        229,
                        248,
                        267,
                        289,
                        329,
                        369,
                        384
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        415
                    ],
                    "errorMessage": "Only admin can set oracle"
                },
                {
                    "pc": [
                        554
                    ],
                    "errorMessage": "Only oracle"
                },
                {
                    "pc": [
                        570
                    ],
                    "errorMessage": "Policy already settled"
                },
                {
                    "pc": [
                        388
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        172,
                        188,
                        216,
                        232,
                        251,
                        270,
                        292,
                        332,
                        372
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        413,
                        838
                    ],
                    "errorMessage": "check self.admin exists"
                },
                {
                    "pc": [
                        433,
                        491,
                        664,
                        773,
                        847
                    ],
                    "errorMessage": "check self.next_policy_id exists"
                },
                {
                    "pc": [
                        552,
                        843
                    ],
                    "errorMessage": "check self.oracle exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAFAQBkAugHJgcObmV4dF9wb2xpY3lfaWQEFR98dQhwb2xpY2llcwVhZG1pbgZvcmFjbGUCAGIIAAAAAAAAAAAxGEAADCsyA2cnBDIDZygiZzEbQQBNggoEiUpxbgQzaPVWBGcXIdYEUPmSrATvkJ84BOsN4CsEP3j24wSr9tUaBPogAgwEGg4gSDYaAI4KANkAygCiAHoAZABRAD4ALgASAAIjQzEZFEQxGESIApMpTFCwIkMxGRREMRhENhoBNhoCNhoDNhoEiAI+KUxQsCJDMRkURDEYRIgCJilMULAiQzEZFEQxGEQ2GgGIAZ0pTFCwIkMxGRREMRhENhoBiAF9KUxQsCJDMRkURDEYRDYaATYaAogBBylMULAiQzEZFEQxGEQ2GgE2GgI2GgM2GgQ2GgU2GgY2Ggc2GgiIAKUpTFCwIkMxGRREMRhENhoBNhoCNhoDNhoENhoFNhoGNhoHNhoIiAA+KUxQsCJDMRkURDEYRDYaAYgAGiJDMRkURDEYFEQ2GgGIAAIiQ4oBACuL/2eJigEAMQAjK2VEEkQnBIv/Z4mKCAEyBCUSRCMoZURJIggoTGcxACcFUIv5UIv6UIv7UIv8UIv9UIv+UIv/UCcGUIv4UEwWKksBUEm8SE8Cv4mKCAEjKGVESSIIKExnMQAnBVCL+VCL+lCL+1CL/FCL/VCL/lCL/1AnBlCL+FBMFipLAVBJvEhPAr+JigIBMQAjJwRlRBJEi/4XFipMUEm+SEmBWlsURCOL/xciEkEAB4sBgTJbjAKLAkEAFLGLAVcAIIsCsgiyByKyECEEsgGziwGACAAAAAAAAAABXFqLAEm8SEy/iwIWjACJigEBi/8XFipMUL5IiYoBASOAAEkjRwIoZUQiiwaLBQxBAFaLBhYqTFBJjAC+RQGLBIwCiwOMAUEALosAvkhXACCL/xKLBIwCiwOMAUEAFosDIgiMA4sESYwCQAAEiwaMAosDjAFCAACLAowEiwGMA4sGIgiMBkL/oosDFosEFlCMAIkjKGVEIgkWiYoEAYv8FyQKi/0XJQokCIv+FyQIi/8XJQokCE8DTwMLTwILC4HAhD0KSSEEDEEABCEEjACLABZMiSMrZUQjJwRlRCMoZUQWTgJQTFCJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}