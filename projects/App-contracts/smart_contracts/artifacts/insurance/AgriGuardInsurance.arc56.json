{
    "name": "AgriGuardInsurance",
    "structs": {
        "PolicyData": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "zip_code",
                "type": "string"
            },
            {
                "name": "t0",
                "type": "uint64"
            },
            {
                "name": "t1",
                "type": "uint64"
            },
            {
                "name": "cap",
                "type": "uint64"
            },
            {
                "name": "direction",
                "type": "uint64"
            },
            {
                "name": "threshold",
                "type": "uint64"
            },
            {
                "name": "slope",
                "type": "uint64"
            },
            {
                "name": "fee_paid",
                "type": "uint64"
            },
            {
                "name": "settled",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "create_application",
            "args": [
                {
                    "type": "address",
                    "name": "admin"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Initialize the application with admin",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_oracle",
            "args": [
                {
                    "type": "address",
                    "name": "oracle"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Set oracle account (admin only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buy_policy_with_payment",
            "args": [
                {
                    "type": "byte[]",
                    "name": "zip_code"
                },
                {
                    "type": "uint64",
                    "name": "t0"
                },
                {
                    "type": "uint64",
                    "name": "t1"
                },
                {
                    "type": "uint64",
                    "name": "cap"
                },
                {
                    "type": "uint64",
                    "name": "direction"
                },
                {
                    "type": "uint64",
                    "name": "threshold"
                },
                {
                    "type": "uint64",
                    "name": "slope"
                },
                {
                    "type": "uint64",
                    "name": "fee"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Buy insurance policy with integrated payment using group transaction\nExpects to be called as part of a group transaction where: - Transaction 1: Payment from user to contract - Transaction 2: This function call",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buy_policy",
            "args": [
                {
                    "type": "byte[]",
                    "name": "zip_code"
                },
                {
                    "type": "uint64",
                    "name": "t0"
                },
                {
                    "type": "uint64",
                    "name": "t1"
                },
                {
                    "type": "uint64",
                    "name": "cap"
                },
                {
                    "type": "uint64",
                    "name": "direction"
                },
                {
                    "type": "uint64",
                    "name": "threshold"
                },
                {
                    "type": "uint64",
                    "name": "slope"
                },
                {
                    "type": "uint64",
                    "name": "fee"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Buy insurance policy (simple version for testing)\nPayment should be sent to contract address before calling this method",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "oracle_settle",
            "args": [
                {
                    "type": "uint64",
                    "name": "policy_id"
                },
                {
                    "type": "uint64",
                    "name": "approved"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Oracle-only settlement\nIf approved == 1 \u2192 payout = cap; else 0",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "dispute_settlement",
            "args": [
                {
                    "type": "uint64",
                    "name": "policy_id"
                },
                {
                    "type": "string",
                    "name": "reason"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a dispute for a policy settlement\nOnly the policy owner can dispute their own policy",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_policy",
            "args": [
                {
                    "type": "uint64",
                    "name": "policy_id"
                }
            ],
            "returns": {
                "type": "(address,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
                "struct": "PolicyData"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get policy data by ID",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_policies_by_owner",
            "args": [
                {
                    "type": "address",
                    "name": "owner"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get all policy IDs for a specific owner\nReturns: (count, first_policy_id) Note: This is a simplified implementation for MVP",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_policy_count",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get total number of policies created",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculate_fee",
            "args": [
                {
                    "type": "uint64",
                    "name": "cap"
                },
                {
                    "type": "uint64",
                    "name": "risk_score"
                },
                {
                    "type": "uint64",
                    "name": "uncertainty"
                },
                {
                    "type": "uint64",
                    "name": "duration_days"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Calculate policy fee based on risk parameters\nFormula: base_fee * risk_multiplier * uncertainty_multiplier * duration_multiplier",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_policy",
            "args": [
                {
                    "type": "uint64",
                    "name": "policy_id"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Delete a policy by ID - only the owner can delete their own unsettled policy\nReturns: 1 if successful, 0 if failed",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_globals",
            "args": [],
            "returns": {
                "type": "(address,address,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get global state",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "\n    Minimal AgriGuard Insurance Contract\n    \n    Features:\n    - Buy policy with group transaction (payment + function call)\n    - Oracle settlement\n    - Policy storage by owner address\n    - Helper functions to get policies\n    ",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "admin": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YWRtaW4="
                },
                "oracle": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "b3JhY2xl"
                },
                "next_policy_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmV4dF9wb2xpY3lfaWQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "policies": {
                    "keyType": "uint64",
                    "valueType": "PolicyData",
                    "prefix": "cG9saWNpZXM="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        660,
                        719,
                        811,
                        968
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        496
                    ],
                    "errorMessage": "Must be called in group transaction"
                },
                {
                    "pc": [
                        193,
                        209,
                        228,
                        256,
                        272,
                        291,
                        310,
                        332,
                        354,
                        394,
                        434,
                        449
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        482
                    ],
                    "errorMessage": "Only admin can set oracle"
                },
                {
                    "pc": [
                        619
                    ],
                    "errorMessage": "Only oracle"
                },
                {
                    "pc": [
                        635
                    ],
                    "errorMessage": "Policy already settled"
                },
                {
                    "pc": [
                        453
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        196,
                        212,
                        231,
                        259,
                        275,
                        294,
                        313,
                        335,
                        357,
                        397,
                        437
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        480,
                        1006
                    ],
                    "errorMessage": "check self.admin exists"
                },
                {
                    "pc": [
                        500,
                        557,
                        774,
                        883,
                        1015
                    ],
                    "errorMessage": "check self.next_policy_id exists"
                },
                {
                    "pc": [
                        617,
                        1011
                    ],
                    "errorMessage": "check self.oracle exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBzbWFydF9jb250cmFjdHMuaW5zdXJhbmNlLmNvbnRyYWN0LkFncmlHdWFyZEluc3VyYW5jZS5fX2FsZ29weV9lbnRyeXBvaW50X3dpdGhfaW5pdCgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAxIDAgMTAwIDIgMTAwMAogICAgYnl0ZWNibG9jayAweDE1MWY3Yzc1ICJuZXh0X3BvbGljeV9pZCIgMHgwMDAwMDAwMDAwMDAwMDAwICJwb2xpY2llcyIgImFkbWluIiAib3JhY2xlIiAweDAwMDAwMDAwMDAwMDAwMDEgMHgwMDYyCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjM1LTM2CiAgICAvLyAjIEdsb2JhbCBzdGF0ZQogICAgLy8gc2VsZi5hZG1pbiA9IEFjY291bnQoKQogICAgYnl0ZWMgNCAvLyAiYWRtaW4iCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjM3CiAgICAvLyBzZWxmLm9yYWNsZSA9IEFjY291bnQoKQogICAgYnl0ZWMgNSAvLyAib3JhY2xlIgogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weTozOAogICAgLy8gc2VsZi5uZXh0X3BvbGljeV9pZCA9IFVJbnQ2NCgxKQogICAgYnl0ZWNfMSAvLyAibmV4dF9wb2xpY3lfaWQiCiAgICBpbnRjXzAgLy8gMQogICAgYXBwX2dsb2JhbF9wdXQKCm1haW5fYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyMwogICAgLy8gY2xhc3MgQWdyaUd1YXJkSW5zdXJhbmNlKEFSQzRDb250cmFjdCk6CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9hZnRlcl9pZl9lbHNlQDE3CiAgICBwdXNoYnl0ZXNzIDB4ODk0YTcxNmUgMHgzMzY4ZjU1NiAweDY3MTcyMWQ2IDB4NTBmOTkyYWMgMHhlZjkwOWYzOCAweDVjMTY4OWEyIDB4ZWIwZGUwMmIgMHgzZjc4ZjZlMyAweGFiZjZkNTFhIDB4ZmEyMDAyMGMgMHhkY2UzMWJiZSAweDFhMGUyMDQ4IC8vIG1ldGhvZCAiY3JlYXRlX2FwcGxpY2F0aW9uKGFkZHJlc3Mpdm9pZCIsIG1ldGhvZCAic2V0X29yYWNsZShhZGRyZXNzKXZvaWQiLCBtZXRob2QgImJ1eV9wb2xpY3lfd2l0aF9wYXltZW50KGJ5dGVbXSx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpdWludDY0IiwgbWV0aG9kICJidXlfcG9saWN5KGJ5dGVbXSx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpdWludDY0IiwgbWV0aG9kICJvcmFjbGVfc2V0dGxlKHVpbnQ2NCx1aW50NjQpdWludDY0IiwgbWV0aG9kICJkaXNwdXRlX3NldHRsZW1lbnQodWludDY0LHN0cmluZyl1aW50NjQiLCBtZXRob2QgImdldF9wb2xpY3kodWludDY0KShhZGRyZXNzLHN0cmluZyx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KSIsIG1ldGhvZCAiZ2V0X3BvbGljaWVzX2J5X293bmVyKGFkZHJlc3MpKHVpbnQ2NCx1aW50NjQpIiwgbWV0aG9kICJnZXRfcG9saWN5X2NvdW50KCl1aW50NjQiLCBtZXRob2QgImNhbGN1bGF0ZV9mZWUodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KXVpbnQ2NCIsIG1ldGhvZCAiZGVsZXRlX3BvbGljeSh1aW50NjQpdWludDY0IiwgbWV0aG9kICJnZXRfZ2xvYmFscygpKGFkZHJlc3MsYWRkcmVzcyx1aW50NjQpIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9jcmVhdGVfYXBwbGljYXRpb25fcm91dGVANSBtYWluX3NldF9vcmFjbGVfcm91dGVANiBtYWluX2J1eV9wb2xpY3lfd2l0aF9wYXltZW50X3JvdXRlQDcgbWFpbl9idXlfcG9saWN5X3JvdXRlQDggbWFpbl9vcmFjbGVfc2V0dGxlX3JvdXRlQDkgbWFpbl9kaXNwdXRlX3NldHRsZW1lbnRfcm91dGVAMTAgbWFpbl9nZXRfcG9saWN5X3JvdXRlQDExIG1haW5fZ2V0X3BvbGljaWVzX2J5X293bmVyX3JvdXRlQDEyIG1haW5fZ2V0X3BvbGljeV9jb3VudF9yb3V0ZUAxMyBtYWluX2NhbGN1bGF0ZV9mZWVfcm91dGVAMTQgbWFpbl9kZWxldGVfcG9saWN5X3JvdXRlQDE1IG1haW5fZ2V0X2dsb2JhbHNfcm91dGVAMTYKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxNzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MjMKICAgIC8vIGNsYXNzIEFncmlHdWFyZEluc3VyYW5jZShBUkM0Q29udHJhY3QpOgogICAgaW50Y18xIC8vIDAKICAgIHJldHVybgoKbWFpbl9nZXRfZ2xvYmFsc19yb3V0ZUAxNjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6Mjk5CiAgICAvLyBAYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZ2V0X2dsb2JhbHMKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZGVsZXRlX3BvbGljeV9yb3V0ZUAxNToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MjY2CiAgICAvLyBAYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MjMKICAgIC8vIGNsYXNzIEFncmlHdWFyZEluc3VyYW5jZShBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyNjYKICAgIC8vIEBhYmltZXRob2QKICAgIGNhbGxzdWIgZGVsZXRlX3BvbGljeQogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9jYWxjdWxhdGVfZmVlX3JvdXRlQDE0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyMzIKICAgIC8vIEBhYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyMwogICAgLy8gY2xhc3MgQWdyaUd1YXJkSW5zdXJhbmNlKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjIzMgogICAgLy8gQGFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgY2FsbHN1YiBjYWxjdWxhdGVfZmVlCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2dldF9wb2xpY3lfY291bnRfcm91dGVAMTM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjIyNwogICAgLy8gQGFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGdldF9wb2xpY3lfY291bnQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0X3BvbGljaWVzX2J5X293bmVyX3JvdXRlQDEyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyMDUKICAgIC8vIEBhYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyMwogICAgLy8gY2xhc3MgQWdyaUd1YXJkSW5zdXJhbmNlKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjIwNQogICAgLy8gQGFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgY2FsbHN1YiBnZXRfcG9saWNpZXNfYnlfb3duZXIKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0X3BvbGljeV9yb3V0ZUAxMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MjAwCiAgICAvLyBAYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MjMKICAgIC8vIGNsYXNzIEFncmlHdWFyZEluc3VyYW5jZShBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyMDAKICAgIC8vIEBhYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIGNhbGxzdWIgZ2V0X3BvbGljeQogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9kaXNwdXRlX3NldHRsZW1lbnRfcm91dGVAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjE3MgogICAgLy8gQGFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjIzCiAgICAvLyBjbGFzcyBBZ3JpR3VhcmRJbnN1cmFuY2UoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MTcyCiAgICAvLyBAYWJpbWV0aG9kCiAgICBjYWxsc3ViIGRpc3B1dGVfc2V0dGxlbWVudAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9vcmFjbGVfc2V0dGxlX3JvdXRlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjE0MAogICAgLy8gQGFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjIzCiAgICAvLyBjbGFzcyBBZ3JpR3VhcmRJbnN1cmFuY2UoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MTQwCiAgICAvLyBAYWJpbWV0aG9kCiAgICBjYWxsc3ViIG9yYWNsZV9zZXR0bGUKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYnV5X3BvbGljeV9yb3V0ZUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToxMDIKICAgIC8vIEBhYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyMwogICAgLy8gY2xhc3MgQWdyaUd1YXJkSW5zdXJhbmNlKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA1CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA2CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA3CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA4CiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjEwMgogICAgLy8gQGFiaW1ldGhvZAogICAgY2FsbHN1YiBidXlfcG9saWN5CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2J1eV9wb2xpY3lfd2l0aF9wYXltZW50X3JvdXRlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjU0CiAgICAvLyBAYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MjMKICAgIC8vIGNsYXNzIEFncmlHdWFyZEluc3VyYW5jZShBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgOAogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weTo1NAogICAgLy8gQGFiaW1ldGhvZAogICAgY2FsbHN1YiBidXlfcG9saWN5X3dpdGhfcGF5bWVudAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9zZXRfb3JhY2xlX3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjQ4CiAgICAvLyBAYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MjMKICAgIC8vIGNsYXNzIEFncmlHdWFyZEluc3VyYW5jZShBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weTo0OAogICAgLy8gQGFiaW1ldGhvZAogICAgY2FsbHN1YiBzZXRfb3JhY2xlCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2NyZWF0ZV9hcHBsaWNhdGlvbl9yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weTo0MwogICAgLy8gQGFiaW1ldGhvZChjcmVhdGU9InJlcXVpcmUiKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MjMKICAgIC8vIGNsYXNzIEFncmlHdWFyZEluc3VyYW5jZShBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weTo0MwogICAgLy8gQGFiaW1ldGhvZChjcmVhdGU9InJlcXVpcmUiKQogICAgY2FsbHN1YiBjcmVhdGVfYXBwbGljYXRpb24KICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMuaW5zdXJhbmNlLmNvbnRyYWN0LkFncmlHdWFyZEluc3VyYW5jZS5jcmVhdGVfYXBwbGljYXRpb24oYWRtaW46IGJ5dGVzKSAtPiB2b2lkOgpjcmVhdGVfYXBwbGljYXRpb246CiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjQzLTQ0CiAgICAvLyBAYWJpbWV0aG9kKGNyZWF0ZT0icmVxdWlyZSIpCiAgICAvLyBkZWYgY3JlYXRlX2FwcGxpY2F0aW9uKHNlbGYsIGFkbWluOiBBZGRyZXNzKSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjQ2CiAgICAvLyBzZWxmLmFkbWluID0gYWRtaW4ubmF0aXZlCiAgICBieXRlYyA0IC8vICJhZG1pbiIKICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5pbnN1cmFuY2UuY29udHJhY3QuQWdyaUd1YXJkSW5zdXJhbmNlLnNldF9vcmFjbGUob3JhY2xlOiBieXRlcykgLT4gdm9pZDoKc2V0X29yYWNsZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6NDgtNDkKICAgIC8vIEBhYmltZXRob2QKICAgIC8vIGRlZiBzZXRfb3JhY2xlKHNlbGYsIG9yYWNsZTogQWRkcmVzcykgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weTo1MQogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5hZG1pbiwgIk9ubHkgYWRtaW4gY2FuIHNldCBvcmFjbGUiCiAgICB0eG4gU2VuZGVyCiAgICBpbnRjXzEgLy8gMAogICAgYnl0ZWMgNCAvLyAiYWRtaW4iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYWRtaW4gZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIE9ubHkgYWRtaW4gY2FuIHNldCBvcmFjbGUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6NTIKICAgIC8vIHNlbGYub3JhY2xlID0gb3JhY2xlLm5hdGl2ZQogICAgYnl0ZWMgNSAvLyAib3JhY2xlIgogICAgZnJhbWVfZGlnIC0xCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmluc3VyYW5jZS5jb250cmFjdC5BZ3JpR3VhcmRJbnN1cmFuY2UuYnV5X3BvbGljeV93aXRoX3BheW1lbnQoemlwX2NvZGU6IGJ5dGVzLCB0MDogYnl0ZXMsIHQxOiBieXRlcywgY2FwOiBieXRlcywgZGlyZWN0aW9uOiBieXRlcywgdGhyZXNob2xkOiBieXRlcywgc2xvcGU6IGJ5dGVzLCBmZWU6IGJ5dGVzKSAtPiBieXRlczoKYnV5X3BvbGljeV93aXRoX3BheW1lbnQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjU0LTY1CiAgICAvLyBAYWJpbWV0aG9kCiAgICAvLyBkZWYgYnV5X3BvbGljeV93aXRoX3BheW1lbnQoCiAgICAvLyAgICAgc2VsZiwKICAgIC8vICAgICB6aXBfY29kZTogRHluYW1pY0J5dGVzLAogICAgLy8gICAgIHQwOiBBUkM0VUludDY0LAogICAgLy8gICAgIHQxOiBBUkM0VUludDY0LAogICAgLy8gICAgIGNhcDogQVJDNFVJbnQ2NCwKICAgIC8vICAgICBkaXJlY3Rpb246IEFSQzRVSW50NjQsCiAgICAvLyAgICAgdGhyZXNob2xkOiBBUkM0VUludDY0LAogICAgLy8gICAgIHNsb3BlOiBBUkM0VUludDY0LAogICAgLy8gICAgIGZlZTogQVJDNFVJbnQ2NAogICAgLy8gKSAtPiBBUkM0VUludDY0OgogICAgcHJvdG8gOCAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjcyLTczCiAgICAvLyAjIFZlcmlmeSB0aGlzIGlzIHBhcnQgb2YgYSBncm91cCB0cmFuc2FjdGlvbgogICAgLy8gYXNzZXJ0IEdsb2JhbC5ncm91cF9zaXplID09IFVJbnQ2NCgyKSwgIk11c3QgYmUgY2FsbGVkIGluIGdyb3VwIHRyYW5zYWN0aW9uIgogICAgZ2xvYmFsIEdyb3VwU2l6ZQogICAgaW50Y18zIC8vIDIKICAgID09CiAgICBhc3NlcnQgLy8gTXVzdCBiZSBjYWxsZWQgaW4gZ3JvdXAgdHJhbnNhY3Rpb24KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6ODAtODEKICAgIC8vICMgQ3JlYXRlIHBvbGljeQogICAgLy8gcG9saWN5X2lkID0gc2VsZi5uZXh0X3BvbGljeV9pZAogICAgaW50Y18xIC8vIDAKICAgIGJ5dGVjXzEgLy8gIm5leHRfcG9saWN5X2lkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm5leHRfcG9saWN5X2lkIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weTo4MgogICAgLy8gc2VsZi5uZXh0X3BvbGljeV9pZCArPSBVSW50NjQoMSkKICAgIGR1cAogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGJ5dGVjXzEgLy8gIm5leHRfcG9saWN5X2lkIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6ODUKICAgIC8vIG93bmVyPUFkZHJlc3MuZnJvbV9ieXRlcyhUeG4uc2VuZGVyLmJ5dGVzKSwKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6ODQtOTUKICAgIC8vIHBvbGljeV9kYXRhID0gUG9saWN5RGF0YSgKICAgIC8vICAgICBvd25lcj1BZGRyZXNzLmZyb21fYnl0ZXMoVHhuLnNlbmRlci5ieXRlcyksCiAgICAvLyAgICAgemlwX2NvZGU9QVJDNFN0cmluZy5mcm9tX2J5dGVzKHppcF9jb2RlLmJ5dGVzKSwKICAgIC8vICAgICB0MD10MCwKICAgIC8vICAgICB0MT10MSwKICAgIC8vICAgICBjYXA9Y2FwLAogICAgLy8gICAgIGRpcmVjdGlvbj1kaXJlY3Rpb24sCiAgICAvLyAgICAgdGhyZXNob2xkPXRocmVzaG9sZCwKICAgIC8vICAgICBzbG9wZT1zbG9wZSwKICAgIC8vICAgICBmZWVfcGFpZD1mZWUsCiAgICAvLyAgICAgc2V0dGxlZD1BUkM0VUludDY0KDApCiAgICAvLyApCiAgICBieXRlYyA3IC8vIDB4MDA2MgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTcKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC02CiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtNQogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTQKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0zCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weTo5NAogICAgLy8gc2V0dGxlZD1BUkM0VUludDY0KDApCiAgICBieXRlY18yIC8vIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weTo4NC05NQogICAgLy8gcG9saWN5X2RhdGEgPSBQb2xpY3lEYXRhKAogICAgLy8gICAgIG93bmVyPUFkZHJlc3MuZnJvbV9ieXRlcyhUeG4uc2VuZGVyLmJ5dGVzKSwKICAgIC8vICAgICB6aXBfY29kZT1BUkM0U3RyaW5nLmZyb21fYnl0ZXMoemlwX2NvZGUuYnl0ZXMpLAogICAgLy8gICAgIHQwPXQwLAogICAgLy8gICAgIHQxPXQxLAogICAgLy8gICAgIGNhcD1jYXAsCiAgICAvLyAgICAgZGlyZWN0aW9uPWRpcmVjdGlvbiwKICAgIC8vICAgICB0aHJlc2hvbGQ9dGhyZXNob2xkLAogICAgLy8gICAgIHNsb3BlPXNsb3BlLAogICAgLy8gICAgIGZlZV9wYWlkPWZlZSwKICAgIC8vICAgICBzZXR0bGVkPUFSQzRVSW50NjQoMCkKICAgIC8vICkKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC04CiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6OTctOTgKICAgIC8vICMgU3RvcmUgcG9saWN5IGluIGJveAogICAgLy8gc2VsZi5wb2xpY2llc1twb2xpY3lfaWRdID0gcG9saWN5X2RhdGEuY29weSgpCiAgICBzd2FwCiAgICBpdG9iCiAgICBieXRlY18zIC8vICJwb2xpY2llcyIKICAgIGRpZyAxCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2RlbAogICAgcG9wCiAgICB1bmNvdmVyIDIKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MTAwCiAgICAvLyByZXR1cm4gQVJDNFVJbnQ2NChwb2xpY3lfaWQpCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuaW5zdXJhbmNlLmNvbnRyYWN0LkFncmlHdWFyZEluc3VyYW5jZS5idXlfcG9saWN5KHppcF9jb2RlOiBieXRlcywgdDA6IGJ5dGVzLCB0MTogYnl0ZXMsIGNhcDogYnl0ZXMsIGRpcmVjdGlvbjogYnl0ZXMsIHRocmVzaG9sZDogYnl0ZXMsIHNsb3BlOiBieXRlcywgZmVlOiBieXRlcykgLT4gYnl0ZXM6CmJ1eV9wb2xpY3k6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjEwMi0xMTMKICAgIC8vIEBhYmltZXRob2QKICAgIC8vIGRlZiBidXlfcG9saWN5KAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgemlwX2NvZGU6IER5bmFtaWNCeXRlcywKICAgIC8vICAgICB0MDogQVJDNFVJbnQ2NCwKICAgIC8vICAgICB0MTogQVJDNFVJbnQ2NCwKICAgIC8vICAgICBjYXA6IEFSQzRVSW50NjQsCiAgICAvLyAgICAgZGlyZWN0aW9uOiBBUkM0VUludDY0LAogICAgLy8gICAgIHRocmVzaG9sZDogQVJDNFVJbnQ2NCwKICAgIC8vICAgICBzbG9wZTogQVJDNFVJbnQ2NCwKICAgIC8vICAgICBmZWU6IEFSQzRVSW50NjQKICAgIC8vICkgLT4gQVJDNFVJbnQ2NDoKICAgIHByb3RvIDggMQogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToxMTgtMTE5CiAgICAvLyAjIENyZWF0ZSBwb2xpY3kKICAgIC8vIHBvbGljeV9pZCA9IHNlbGYubmV4dF9wb2xpY3lfaWQKICAgIGludGNfMSAvLyAwCiAgICBieXRlY18xIC8vICJuZXh0X3BvbGljeV9pZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5uZXh0X3BvbGljeV9pZCBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MTIwCiAgICAvLyBzZWxmLm5leHRfcG9saWN5X2lkICs9IFVJbnQ2NCgxKQogICAgZHVwCiAgICBpbnRjXzAgLy8gMQogICAgKwogICAgYnl0ZWNfMSAvLyAibmV4dF9wb2xpY3lfaWQiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToxMjMKICAgIC8vIG93bmVyPUFkZHJlc3MuZnJvbV9ieXRlcyhUeG4uc2VuZGVyLmJ5dGVzKSwKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MTIyLTEzMwogICAgLy8gcG9saWN5X2RhdGEgPSBQb2xpY3lEYXRhKAogICAgLy8gICAgIG93bmVyPUFkZHJlc3MuZnJvbV9ieXRlcyhUeG4uc2VuZGVyLmJ5dGVzKSwKICAgIC8vICAgICB6aXBfY29kZT1BUkM0U3RyaW5nLmZyb21fYnl0ZXMoemlwX2NvZGUuYnl0ZXMpLAogICAgLy8gICAgIHQwPXQwLAogICAgLy8gICAgIHQxPXQxLAogICAgLy8gICAgIGNhcD1jYXAsCiAgICAvLyAgICAgZGlyZWN0aW9uPWRpcmVjdGlvbiwKICAgIC8vICAgICB0aHJlc2hvbGQ9dGhyZXNob2xkLAogICAgLy8gICAgIHNsb3BlPXNsb3BlLAogICAgLy8gICAgIGZlZV9wYWlkPWZlZSwKICAgIC8vICAgICBzZXR0bGVkPUFSQzRVSW50NjQoMCkKICAgIC8vICkKICAgIGJ5dGVjIDcgLy8gMHgwMDYyCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtNwogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTYKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC01CiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtNAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjEzMgogICAgLy8gc2V0dGxlZD1BUkM0VUludDY0KDApCiAgICBieXRlY18yIC8vIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToxMjItMTMzCiAgICAvLyBwb2xpY3lfZGF0YSA9IFBvbGljeURhdGEoCiAgICAvLyAgICAgb3duZXI9QWRkcmVzcy5mcm9tX2J5dGVzKFR4bi5zZW5kZXIuYnl0ZXMpLAogICAgLy8gICAgIHppcF9jb2RlPUFSQzRTdHJpbmcuZnJvbV9ieXRlcyh6aXBfY29kZS5ieXRlcyksCiAgICAvLyAgICAgdDA9dDAsCiAgICAvLyAgICAgdDE9dDEsCiAgICAvLyAgICAgY2FwPWNhcCwKICAgIC8vICAgICBkaXJlY3Rpb249ZGlyZWN0aW9uLAogICAgLy8gICAgIHRocmVzaG9sZD10aHJlc2hvbGQsCiAgICAvLyAgICAgc2xvcGU9c2xvcGUsCiAgICAvLyAgICAgZmVlX3BhaWQ9ZmVlLAogICAgLy8gICAgIHNldHRsZWQ9QVJDNFVJbnQ2NCgwKQogICAgLy8gKQogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTgKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToxMzUtMTM2CiAgICAvLyAjIFN0b3JlIHBvbGljeSBpbiBib3gKICAgIC8vIHNlbGYucG9saWNpZXNbcG9saWN5X2lkXSA9IHBvbGljeV9kYXRhLmNvcHkoKQogICAgc3dhcAogICAgaXRvYgogICAgYnl0ZWNfMyAvLyAicG9saWNpZXMiCiAgICBkaWcgMQogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9kZWwKICAgIHBvcAogICAgdW5jb3ZlciAyCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjEzOAogICAgLy8gcmV0dXJuIEFSQzRVSW50NjQocG9saWN5X2lkKQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmluc3VyYW5jZS5jb250cmFjdC5BZ3JpR3VhcmRJbnN1cmFuY2Uub3JhY2xlX3NldHRsZShwb2xpY3lfaWQ6IGJ5dGVzLCBhcHByb3ZlZDogYnl0ZXMpIC0+IGJ5dGVzOgpvcmFjbGVfc2V0dGxlOgogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToxNDAtMTQxCiAgICAvLyBAYWJpbWV0aG9kCiAgICAvLyBkZWYgb3JhY2xlX3NldHRsZShzZWxmLCBwb2xpY3lfaWQ6IEFSQzRVSW50NjQsIGFwcHJvdmVkOiBBUkM0VUludDY0KSAtPiBBUkM0VUludDY0OgogICAgcHJvdG8gMiAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjE0Ni0xNDcKICAgIC8vICMgT25seSBvcmFjbGUgbWF5IHNldHRsZQogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5vcmFjbGUsICJPbmx5IG9yYWNsZSIKICAgIHR4biBTZW5kZXIKICAgIGludGNfMSAvLyAwCiAgICBieXRlYyA1IC8vICJvcmFjbGUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3JhY2xlIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBPbmx5IG9yYWNsZQogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToxNDkKICAgIC8vIHBpZCA9IHBvbGljeV9pZC5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMgogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToxNTAKICAgIC8vIHBvbGljeV9kYXRhID0gc2VsZi5wb2xpY2llcy5tYXliZShwaWQpWzBdLmNvcHkoKQogICAgaXRvYgogICAgYnl0ZWNfMyAvLyAicG9saWNpZXMiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2dldAogICAgcG9wCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MTUyLTE1MwogICAgLy8gIyBDaGVjayB0aGF0IHBvbGljeSBpcyBub3QgYWxyZWFkeSBzZXR0bGVkCiAgICAvLyBhc3NlcnQgcG9saWN5X2RhdGEuc2V0dGxlZC5uYXRpdmUgPT0gVUludDY0KDApLCAiUG9saWN5IGFscmVhZHkgc2V0dGxlZCIKICAgIHB1c2hpbnQgOTAgLy8gOTAKICAgIGV4dHJhY3RfdWludDY0CiAgICAhCiAgICBhc3NlcnQgLy8gUG9saWN5IGFscmVhZHkgc2V0dGxlZAogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToxNTUKICAgIC8vIHBheW91dCA9IFVJbnQ2NCgwKQogICAgaW50Y18xIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MTU2CiAgICAvLyBpZiBhcHByb3ZlZC5uYXRpdmUgPT0gVUludDY0KDEpOgogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICBpbnRjXzAgLy8gMQogICAgPT0KICAgIGJ6IG9yYWNsZV9zZXR0bGVfYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjE1NwogICAgLy8gcGF5b3V0ID0gcG9saWN5X2RhdGEuY2FwLm5hdGl2ZQogICAgZnJhbWVfZGlnIDEKICAgIHB1c2hpbnQgNTAgLy8gNTAKICAgIGV4dHJhY3RfdWludDY0CiAgICBmcmFtZV9idXJ5IDIKCm9yYWNsZV9zZXR0bGVfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToxNTkKICAgIC8vIGlmIHBheW91dCA+IFVJbnQ2NCgwKToKICAgIGZyYW1lX2RpZyAyCiAgICBieiBvcmFjbGVfc2V0dGxlX2FmdGVyX2lmX2Vsc2VANQogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToxNjAtMTY0CiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgcmVjZWl2ZXI9cG9saWN5X2RhdGEub3duZXIubmF0aXZlLAogICAgLy8gICAgIGFtb3VudD1wYXlvdXQsCiAgICAvLyAgICAgZmVlPVVJbnQ2NCgxMDAwKQogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToxNjEKICAgIC8vIHJlY2VpdmVyPXBvbGljeV9kYXRhLm93bmVyLm5hdGl2ZSwKICAgIGZyYW1lX2RpZyAxCiAgICBleHRyYWN0IDAgMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBmcmFtZV9kaWcgMgogICAgaXR4bl9maWVsZCBBbW91bnQKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MTYwCiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICBpbnRjXzAgLy8gcGF5CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjE2MwogICAgLy8gZmVlPVVJbnQ2NCgxMDAwKQogICAgaW50YyA0IC8vIDEwMDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjE2MC0xNjQKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIC8vICAgICByZWNlaXZlcj1wb2xpY3lfZGF0YS5vd25lci5uYXRpdmUsCiAgICAvLyAgICAgYW1vdW50PXBheW91dCwKICAgIC8vICAgICBmZWU9VUludDY0KDEwMDApCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAoKb3JhY2xlX3NldHRsZV9hZnRlcl9pZl9lbHNlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjE2Ni0xNjcKICAgIC8vICMgTWFyayBhcyBzZXR0bGVkCiAgICAvLyBwb2xpY3lfZGF0YS5zZXR0bGVkID0gQVJDNFVJbnQ2NCgxKQogICAgZnJhbWVfZGlnIDEKICAgIGJ5dGVjIDYgLy8gMHgwMDAwMDAwMDAwMDAwMDAxCiAgICByZXBsYWNlMiA5MAogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToxNjgKICAgIC8vIHNlbGYucG9saWNpZXNbcGlkXSA9IHBvbGljeV9kYXRhLmNvcHkoKQogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgYm94X2RlbAogICAgcG9wCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjE3MAogICAgLy8gcmV0dXJuIEFSQzRVSW50NjQocGF5b3V0KQogICAgZnJhbWVfZGlnIDIKICAgIGl0b2IKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmluc3VyYW5jZS5jb250cmFjdC5BZ3JpR3VhcmRJbnN1cmFuY2UuZGlzcHV0ZV9zZXR0bGVtZW50KHBvbGljeV9pZDogYnl0ZXMsIHJlYXNvbjogYnl0ZXMpIC0+IGJ5dGVzOgpkaXNwdXRlX3NldHRsZW1lbnQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjE3Mi0xNzMKICAgIC8vIEBhYmltZXRob2QKICAgIC8vIGRlZiBkaXNwdXRlX3NldHRsZW1lbnQoc2VsZiwgcG9saWN5X2lkOiBBUkM0VUludDY0LCByZWFzb246IEFSQzRTdHJpbmcpIC0+IEFSQzRVSW50NjQ6CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MTc4CiAgICAvLyBwaWQgPSBwb2xpY3lfaWQubmF0aXZlCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MTc5CiAgICAvLyBjYWxsZXIgPSBBZGRyZXNzLmZyb21fYnl0ZXMoVHhuLnNlbmRlci5ieXRlcykKICAgIHR4biBTZW5kZXIKICAgIHN3YXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MTgxLTE4MgogICAgLy8gIyBDaGVjayBpZiBwb2xpY3kgZXhpc3RzIGFuZCBjYWxsZXIgaXMgb3duZXIKICAgIC8vIHBvbGljeV9kYXRhID0gc2VsZi5wb2xpY2llcy5tYXliZShwaWQpWzBdLmNvcHkoKQogICAgaXRvYgogICAgYnl0ZWNfMyAvLyAicG9saWNpZXMiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJveF9nZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MTg1CiAgICAvLyBpZiBub3QgZXhpc3RzOgogICAgYm56IGRpc3B1dGVfc2V0dGxlbWVudF9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MTg2CiAgICAvLyByZXR1cm4gQVJDNFVJbnQ2NCgwKSAgIyBQb2xpY3kgZG9lc24ndCBleGlzdAogICAgYnl0ZWNfMiAvLyAweDAwMDAwMDAwMDAwMDAwMDAKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgpkaXNwdXRlX3NldHRsZW1lbnRfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToxODgKICAgIC8vIGlmIGNhbGxlciAhPSBwb2xpY3lfZGF0YS5vd25lcjoKICAgIGZyYW1lX2RpZyAxCiAgICBleHRyYWN0IDAgMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBmcmFtZV9kaWcgMAogICAgIT0KICAgIGJ6IGRpc3B1dGVfc2V0dGxlbWVudF9hZnRlcl9pZl9lbHNlQDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MTg5CiAgICAvLyByZXR1cm4gQVJDNFVJbnQ2NCgwKSAgIyBOb3QgdGhlIG93bmVyCiAgICBieXRlY18yIC8vIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCmRpc3B1dGVfc2V0dGxlbWVudF9hZnRlcl9pZl9lbHNlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjE5MS0xOTIKICAgIC8vICMgQ2hlY2sgaWYgcG9saWN5IGlzIGFscmVhZHkgc2V0dGxlZAogICAgLy8gaWYgcG9saWN5X2RhdGEuc2V0dGxlZC5uYXRpdmUgPT0gVUludDY0KDApOgogICAgZnJhbWVfZGlnIDEKICAgIHB1c2hpbnQgOTAgLy8gOTAKICAgIGV4dHJhY3RfdWludDY0CiAgICBibnogZGlzcHV0ZV9zZXR0bGVtZW50X2FmdGVyX2lmX2Vsc2VANgogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToxOTMKICAgIC8vIHJldHVybiBBUkM0VUludDY0KDApICAjIFBvbGljeSBub3Qgc2V0dGxlZCB5ZXQKICAgIGJ5dGVjXzIgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKZGlzcHV0ZV9zZXR0bGVtZW50X2FmdGVyX2lmX2Vsc2VANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MTk1LTE5OAogICAgLy8gIyBDcmVhdGUgZGlzcHV0ZSBpbiBkaXNwdXRlIGNvbnRyYWN0IChpZiBjb25maWd1cmVkKQogICAgLy8gIyBUaGlzIHdvdWxkIGNhbGwgdGhlIGRpc3B1dGUgY29udHJhY3QncyBjcmVhdGVfZGlzcHV0ZSBtZXRob2QKICAgIC8vICMgRm9yIG5vdywganVzdCBtYXJrIHRoYXQgYSBkaXNwdXRlIHdhcyByZXF1ZXN0ZWQKICAgIC8vIHJldHVybiBBUkM0VUludDY0KDEpCiAgICBieXRlYyA2IC8vIDB4MDAwMDAwMDAwMDAwMDAwMQogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuaW5zdXJhbmNlLmNvbnRyYWN0LkFncmlHdWFyZEluc3VyYW5jZS5nZXRfcG9saWN5KHBvbGljeV9pZDogYnl0ZXMpIC0+IGJ5dGVzOgpnZXRfcG9saWN5OgogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyMDAtMjAxCiAgICAvLyBAYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICAvLyBkZWYgZ2V0X3BvbGljeShzZWxmLCBwb2xpY3lfaWQ6IEFSQzRVSW50NjQpIC0+IFBvbGljeURhdGE6CiAgICBwcm90byAxIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MjAzCiAgICAvLyByZXR1cm4gc2VsZi5wb2xpY2llcy5tYXliZShwb2xpY3lfaWQubmF0aXZlKVswXS5jb3B5KCkKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgaXRvYgogICAgYnl0ZWNfMyAvLyAicG9saWNpZXMiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJveF9nZXQKICAgIHBvcAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmluc3VyYW5jZS5jb250cmFjdC5BZ3JpR3VhcmRJbnN1cmFuY2UuZ2V0X3BvbGljaWVzX2J5X293bmVyKG93bmVyOiBieXRlcykgLT4gYnl0ZXM6CmdldF9wb2xpY2llc19ieV9vd25lcjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MjA1LTIwNgogICAgLy8gQGFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgLy8gZGVmIGdldF9wb2xpY2llc19ieV9vd25lcihzZWxmLCBvd25lcjogQWRkcmVzcykgLT4gVHVwbGVbQVJDNFVJbnQ2NCwgQVJDNFVJbnQ2NF06CiAgICBwcm90byAxIDEKICAgIGludGNfMSAvLyAwCiAgICBwdXNoYnl0ZXMgIiIKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyMTIKICAgIC8vIGNvdW50ID0gVUludDY0KDApCiAgICBpbnRjXzEgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyMTMKICAgIC8vIGZpcnN0X3BvbGljeV9pZCA9IFVJbnQ2NCgwKQogICAgZHVwbiAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjIxNS0yMTYKICAgIC8vICMgQ2hlY2sgZWFjaCBwb2xpY3kgSUQgZnJvbSAxIHRvIG5leHRfcG9saWN5X2lkIC0gMQogICAgLy8gZm9yIGkgaW4gdXJhbmdlKDEsIHNlbGYubmV4dF9wb2xpY3lfaWQpOgogICAgYnl0ZWNfMSAvLyAibmV4dF9wb2xpY3lfaWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubmV4dF9wb2xpY3lfaWQgZXhpc3RzCiAgICBpbnRjXzAgLy8gMQoKZ2V0X3BvbGljaWVzX2J5X293bmVyX2Zvcl9oZWFkZXJAMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MjE1LTIxNgogICAgLy8gIyBDaGVjayBlYWNoIHBvbGljeSBJRCBmcm9tIDEgdG8gbmV4dF9wb2xpY3lfaWQgLSAxCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoMSwgc2VsZi5uZXh0X3BvbGljeV9pZCk6CiAgICBmcmFtZV9kaWcgNgogICAgZnJhbWVfZGlnIDUKICAgIDwKICAgIGJ6IGdldF9wb2xpY2llc19ieV9vd25lcl9hZnRlcl9mb3JAMTAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MjE4CiAgICAvLyBpZiBzZWxmLnBvbGljaWVzLm1heWJlKHBvbGljeV9pZClbMV06ICAjIFBvbGljeSBleGlzdHMKICAgIGZyYW1lX2RpZyA2CiAgICBpdG9iCiAgICBieXRlY18zIC8vICJwb2xpY2llcyIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDAKICAgIGJveF9nZXQKICAgIGJ1cnkgMQogICAgZnJhbWVfZGlnIDQKICAgIGZyYW1lX2J1cnkgMgogICAgZnJhbWVfZGlnIDMKICAgIGZyYW1lX2J1cnkgMQogICAgYnogZ2V0X3BvbGljaWVzX2J5X293bmVyX2FmdGVyX2lmX2Vsc2VAOAogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyMTkKICAgIC8vIHBvbGljeV9kYXRhID0gc2VsZi5wb2xpY2llcy5tYXliZShwb2xpY3lfaWQpWzBdLmNvcHkoKQogICAgZnJhbWVfZGlnIDAKICAgIGJveF9nZXQKICAgIHBvcAogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyMjAKICAgIC8vIGlmIHBvbGljeV9kYXRhLm93bmVyLm5hdGl2ZSA9PSBvd25lci5uYXRpdmU6CiAgICBleHRyYWN0IDAgMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBmcmFtZV9kaWcgLTEKICAgID09CiAgICBmcmFtZV9kaWcgNAogICAgZnJhbWVfYnVyeSAyCiAgICBmcmFtZV9kaWcgMwogICAgZnJhbWVfYnVyeSAxCiAgICBieiBnZXRfcG9saWNpZXNfYnlfb3duZXJfYWZ0ZXJfaWZfZWxzZUA3CiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjIyMQogICAgLy8gY291bnQgKz0gVUludDY0KDEpCiAgICBmcmFtZV9kaWcgMwogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgMwogICAgZnJhbWVfZGlnIDQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjIyMgogICAgLy8gaWYgZmlyc3RfcG9saWN5X2lkID09IFVJbnQ2NCgwKToKICAgIGJueiBnZXRfcG9saWNpZXNfYnlfb3duZXJfYWZ0ZXJfaWZfZWxzZUA2CiAgICBmcmFtZV9kaWcgNgogICAgZnJhbWVfYnVyeSAyCgpnZXRfcG9saWNpZXNfYnlfb3duZXJfYWZ0ZXJfaWZfZWxzZUA2OgogICAgZnJhbWVfZGlnIDMKICAgIGZyYW1lX2J1cnkgMQoKZ2V0X3BvbGljaWVzX2J5X293bmVyX2FmdGVyX2lmX2Vsc2VANzoKICAgIGIgZ2V0X3BvbGljaWVzX2J5X293bmVyX2FmdGVyX2lmX2Vsc2VAOAoKZ2V0X3BvbGljaWVzX2J5X293bmVyX2FmdGVyX2lmX2Vsc2VAODoKICAgIGZyYW1lX2RpZyAyCiAgICBmcmFtZV9idXJ5IDQKICAgIGZyYW1lX2RpZyAxCiAgICBmcmFtZV9idXJ5IDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MjE1LTIxNgogICAgLy8gIyBDaGVjayBlYWNoIHBvbGljeSBJRCBmcm9tIDEgdG8gbmV4dF9wb2xpY3lfaWQgLSAxCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoMSwgc2VsZi5uZXh0X3BvbGljeV9pZCk6CiAgICBmcmFtZV9kaWcgNgogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgNgogICAgYiBnZXRfcG9saWNpZXNfYnlfb3duZXJfZm9yX2hlYWRlckAxCgpnZXRfcG9saWNpZXNfYnlfb3duZXJfYWZ0ZXJfZm9yQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyMjUKICAgIC8vIHJldHVybiBUdXBsZSgoQVJDNFVJbnQ2NChjb3VudCksIEFSQzRVSW50NjQoZmlyc3RfcG9saWN5X2lkKSkpCiAgICBmcmFtZV9kaWcgMwogICAgaXRvYgogICAgZnJhbWVfZGlnIDQKICAgIGl0b2IKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuaW5zdXJhbmNlLmNvbnRyYWN0LkFncmlHdWFyZEluc3VyYW5jZS5nZXRfcG9saWN5X2NvdW50KCkgLT4gYnl0ZXM6CmdldF9wb2xpY3lfY291bnQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjIzMAogICAgLy8gcmV0dXJuIEFSQzRVSW50NjQoc2VsZi5uZXh0X3BvbGljeV9pZCAtIFVJbnQ2NCgxKSkKICAgIGludGNfMSAvLyAwCiAgICBieXRlY18xIC8vICJuZXh0X3BvbGljeV9pZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5uZXh0X3BvbGljeV9pZCBleGlzdHMKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBpdG9iCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuaW5zdXJhbmNlLmNvbnRyYWN0LkFncmlHdWFyZEluc3VyYW5jZS5jYWxjdWxhdGVfZmVlKGNhcDogYnl0ZXMsIHJpc2tfc2NvcmU6IGJ5dGVzLCB1bmNlcnRhaW50eTogYnl0ZXMsIGR1cmF0aW9uX2RheXM6IGJ5dGVzKSAtPiBieXRlczoKY2FsY3VsYXRlX2ZlZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MjMyLTIzOQogICAgLy8gQGFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgLy8gZGVmIGNhbGN1bGF0ZV9mZWUoCiAgICAvLyAgICAgc2VsZiwKICAgIC8vICAgICBjYXA6IEFSQzRVSW50NjQsCiAgICAvLyAgICAgcmlza19zY29yZTogQVJDNFVJbnQ2NCwKICAgIC8vICAgICB1bmNlcnRhaW50eTogQVJDNFVJbnQ2NCwKICAgIC8vICAgICBkdXJhdGlvbl9kYXlzOiBBUkM0VUludDY0CiAgICAvLyApIC0+IEFSQzRVSW50NjQ6CiAgICBwcm90byA0IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MjQ0LTI0NQogICAgLy8gIyBCYXNlIGZlZTogMSUgb2YgY292ZXJhZ2UgYW1vdW50CiAgICAvLyBiYXNlX2ZlZSA9IGNhcC5uYXRpdmUgLy8gVUludDY0KDEwMCkKICAgIGZyYW1lX2RpZyAtNAogICAgYnRvaQogICAgaW50Y18yIC8vIDEwMAogICAgLwogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyNDctMjQ4CiAgICAvLyAjIFJpc2sgbXVsdGlwbGllcjogMS4wIHRvIDIuMCBiYXNlZCBvbiByaXNrIHNjb3JlICgwLTEwMCkKICAgIC8vIHJpc2tfbXVsdGlwbGllciA9IFVJbnQ2NCgxMDApICsgKHJpc2tfc2NvcmUubmF0aXZlIC8vIFVJbnQ2NCgyKSkgICMgMTAwLTE1MCAoMS4wLTEuNXgpCiAgICBmcmFtZV9kaWcgLTMKICAgIGJ0b2kKICAgIGludGNfMyAvLyAyCiAgICAvCiAgICBpbnRjXzIgLy8gMTAwCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjI1MC0yNTEKICAgIC8vICMgVW5jZXJ0YWludHkgbXVsdGlwbGllcjogMS4wIHRvIDEuNSBiYXNlZCBvbiB1bmNlcnRhaW50eSAoMC01MCUpCiAgICAvLyB1bmNlcnRhaW50eV9tdWx0aXBsaWVyID0gVUludDY0KDEwMCkgKyB1bmNlcnRhaW50eS5uYXRpdmUgICMgMTAwLTE1MCAoMS4wLTEuNXgpCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ0b2kKICAgIGludGNfMiAvLyAxMDAKICAgICsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MjUzLTI1NAogICAgLy8gIyBEdXJhdGlvbiBtdWx0aXBsaWVyOiAxLjAgdG8gMi4wIGJhc2VkIG9uIGR1cmF0aW9uICgxLTM2NSBkYXlzKQogICAgLy8gZHVyYXRpb25fbXVsdGlwbGllciA9IFVJbnQ2NCgxMDApICsgKGR1cmF0aW9uX2RheXMubmF0aXZlIC8vIFVJbnQ2NCgyKSkgICMgMTAwLTI4MiAoMS4wLTIuODJ4KQogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICBpbnRjXzMgLy8gMgogICAgLwogICAgaW50Y18yIC8vIDEwMAogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyNTYtMjU3CiAgICAvLyAjIENhbGN1bGF0ZSBmaW5hbCBmZWUKICAgIC8vIGZlZSA9IChiYXNlX2ZlZSAqIHJpc2tfbXVsdGlwbGllciAqIHVuY2VydGFpbnR5X211bHRpcGxpZXIgKiBkdXJhdGlvbl9tdWx0aXBsaWVyKSAvLyAoVUludDY0KDEwMCkgKiBVSW50NjQoMTAwKSAqIFVJbnQ2NCgxMDApKQogICAgdW5jb3ZlciAzCiAgICB1bmNvdmVyIDMKICAgICoKICAgIHVuY292ZXIgMgogICAgKgogICAgKgogICAgcHVzaGludCAxMDAwMDAwIC8vIDEwMDAwMDAKICAgIC8KICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyNTktMjYwCiAgICAvLyAjIE1pbmltdW0gZmVlIG9mIDEwMDAgbWljcm9BTEdPCiAgICAvLyBtaW5fZmVlID0gVUludDY0KDEwMDApCiAgICBpbnRjIDQgLy8gMTAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyNjEKICAgIC8vIGlmIGZlZSA8IG1pbl9mZWU6CiAgICA8CiAgICBieiBjYWxjdWxhdGVfZmVlX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyNTktMjYwCiAgICAvLyAjIE1pbmltdW0gZmVlIG9mIDEwMDAgbWljcm9BTEdPCiAgICAvLyBtaW5fZmVlID0gVUludDY0KDEwMDApCiAgICBpbnRjIDQgLy8gMTAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyNjIKICAgIC8vIGZlZSA9IG1pbl9mZWUKICAgIGZyYW1lX2J1cnkgMAoKY2FsY3VsYXRlX2ZlZV9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjI2NAogICAgLy8gcmV0dXJuIEFSQzRVSW50NjQoZmVlKQogICAgZnJhbWVfZGlnIDAKICAgIGl0b2IKICAgIHN3YXAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5pbnN1cmFuY2UuY29udHJhY3QuQWdyaUd1YXJkSW5zdXJhbmNlLmRlbGV0ZV9wb2xpY3kocG9saWN5X2lkOiBieXRlcykgLT4gYnl0ZXM6CmRlbGV0ZV9wb2xpY3k6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjI2Ni0yNjcKICAgIC8vIEBhYmltZXRob2QKICAgIC8vIGRlZiBkZWxldGVfcG9saWN5KHNlbGYsIHBvbGljeV9pZDogQVJDNFVJbnQ2NCkgLT4gQVJDNFVJbnQ2NDoKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyNzIKICAgIC8vIHBpZCA9IHBvbGljeV9pZC5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyNzQtMjc1CiAgICAvLyAjIENoZWNrIGlmIHBvbGljeSBleGlzdHMKICAgIC8vIHBvbGljeV9kYXRhID0gc2VsZi5wb2xpY2llcy5tYXliZShwaWQpWzBdLmNvcHkoKQogICAgaXRvYgogICAgYnl0ZWNfMyAvLyAicG9saWNpZXMiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2dldAogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyNzgKICAgIC8vIGlmIG5vdCBleGlzdHM6CiAgICBibnogZGVsZXRlX3BvbGljeV9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6Mjc5LTI4MAogICAgLy8gIyBQb2xpY3kgZG9lc24ndCBleGlzdAogICAgLy8gcmV0dXJuIEFSQzRVSW50NjQoMCkKICAgIGJ5dGVjXzIgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKZGVsZXRlX3BvbGljeV9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjI4Mi0yODMKICAgIC8vICMgQ2hlY2sgaWYgY2FsbGVyIGlzIHRoZSBvd25lcgogICAgLy8gY2FsbGVyID0gQWRkcmVzcy5mcm9tX2J5dGVzKFR4bi5zZW5kZXIuYnl0ZXMpCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjI4NAogICAgLy8gaWYgY2FsbGVyICE9IHBvbGljeV9kYXRhLm93bmVyOgogICAgZnJhbWVfZGlnIDEKICAgIGV4dHJhY3QgMCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgICE9CiAgICBieiBkZWxldGVfcG9saWN5X2FmdGVyX2lmX2Vsc2VANAogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weToyODUtMjg2CiAgICAvLyAjIENhbGxlciBpcyBub3QgdGhlIG93bmVyCiAgICAvLyByZXR1cm4gQVJDNFVJbnQ2NCgwKQogICAgYnl0ZWNfMiAvLyAweDAwMDAwMDAwMDAwMDAwMDAKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgpkZWxldGVfcG9saWN5X2FmdGVyX2lmX2Vsc2VANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6Mjg4LTI4OQogICAgLy8gIyBDaGVjayBpZiBwb2xpY3kgaXMgYWxyZWFkeSBzZXR0bGVkCiAgICAvLyBpZiBwb2xpY3lfZGF0YS5zZXR0bGVkLm5hdGl2ZSA9PSBVSW50NjQoMSk6CiAgICBmcmFtZV9kaWcgMQogICAgcHVzaGludCA5MCAvLyA5MAogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgYnogZGVsZXRlX3BvbGljeV9hZnRlcl9pZl9lbHNlQDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MjkwLTI5MQogICAgLy8gIyBQb2xpY3kgaXMgYWxyZWFkeSBzZXR0bGVkLCBjYW5ub3QgZGVsZXRlCiAgICAvLyByZXR1cm4gQVJDNFVJbnQ2NCgwKQogICAgYnl0ZWNfMiAvLyAweDAwMDAwMDAwMDAwMDAwMDAKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgpkZWxldGVfcG9saWN5X2FmdGVyX2lmX2Vsc2VANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MjkzLTI5NQogICAgLy8gIyBEZWxldGUgdGhlIHBvbGljeSBmcm9tIHN0b3JhZ2UKICAgIC8vICMgSW4gUHlUZWFsIEJveE1hcCwgd2UgZGVsZXRlIGJ5IHVzaW5nIGRlbCBrZXl3b3JkCiAgICAvLyBkZWwgc2VsZi5wb2xpY2llc1twaWRdCiAgICBmcmFtZV9kaWcgMAogICAgYm94X2RlbAogICAgcG9wCiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjI5NwogICAgLy8gcmV0dXJuIEFSQzRVSW50NjQoMSkKICAgIGJ5dGVjIDYgLy8gMHgwMDAwMDAwMDAwMDAwMDAxCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5pbnN1cmFuY2UuY29udHJhY3QuQWdyaUd1YXJkSW5zdXJhbmNlLmdldF9nbG9iYWxzKCkgLT4gYnl0ZXM6CmdldF9nbG9iYWxzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weTozMDMKICAgIC8vIEFkZHJlc3MuZnJvbV9ieXRlcyhzZWxmLmFkbWluLmJ5dGVzKSwKICAgIGludGNfMSAvLyAwCiAgICBieXRlYyA0IC8vICJhZG1pbiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hZG1pbiBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9pbnN1cmFuY2UvY29udHJhY3QucHk6MzA0CiAgICAvLyBBZGRyZXNzLmZyb21fYnl0ZXMoc2VsZi5vcmFjbGUuYnl0ZXMpLAogICAgaW50Y18xIC8vIDAKICAgIGJ5dGVjIDUgLy8gIm9yYWNsZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5vcmFjbGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvaW5zdXJhbmNlL2NvbnRyYWN0LnB5OjMwNQogICAgLy8gQVJDNFVJbnQ2NChzZWxmLm5leHRfcG9saWN5X2lkKQogICAgaW50Y18xIC8vIDAKICAgIGJ5dGVjXzEgLy8gIm5leHRfcG9saWN5X2lkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm5leHRfcG9saWN5X2lkIGV4aXN0cwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2luc3VyYW5jZS9jb250cmFjdC5weTozMDItMzA2CiAgICAvLyByZXR1cm4gVHVwbGUoKAogICAgLy8gICAgIEFkZHJlc3MuZnJvbV9ieXRlcyhzZWxmLmFkbWluLmJ5dGVzKSwKICAgIC8vICAgICBBZGRyZXNzLmZyb21fYnl0ZXMoc2VsZi5vcmFjbGUuYnl0ZXMpLAogICAgLy8gICAgIEFSQzRVSW50NjQoc2VsZi5uZXh0X3BvbGljeV9pZCkKICAgIC8vICkpCiAgICBjb3ZlciAyCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAFAQBkAugHJggEFR98dQ5uZXh0X3BvbGljeV9pZAgAAAAAAAAAAAhwb2xpY2llcwVhZG1pbgZvcmFjbGUIAAAAAAAAAAECAGIxGEAADScEMgNnJwUyA2cpImcxG0EAW4IMBIlKcW4EM2j1VgRnFyHWBFD5kqwE75CfOARcFomiBOsN4CsEP3j24wSr9tUaBPogAgwE3OMbvgQaDiBINhoAjgwBAgDzAMsAowCNAHcAZABRAEEAJQASAAIjQzEZFEQxGESIAyIoTFCwIkMxGRREMRhENhoBiALWKExQsCJDMRkURDEYRDYaATYaAjYaAzYaBIgCgShMULAiQzEZFEQxGESIAmkoTFCwIkMxGRREMRhENhoBiAHgKExQsCJDMRkURDEYRDYaAYgBwChMULAiQzEZFEQxGEQ2GgE2GgKIAXUoTFCwIkMxGRREMRhENhoBNhoCiAEHKExQsCJDMRkURDEYRDYaATYaAjYaAzYaBDYaBTYaBjYaBzYaCIgApihMULAiQzEZFEQxGEQ2GgE2GgI2GgM2GgQ2GgU2GgY2Ggc2GgiIAEAoTFCwIkMxGRREMRhENhoBiAAbIkMxGRREMRgURDYaAYgAAiJDigEAJwSL/2eJigEAMQAjJwRlRBJEJwWL/2eJiggBMgQlEkQjKWVESSIIKUxnMQAnB1CL+VCL+lCL+1CL/FCL/VCL/lCL/1AqUIv4UEwWK0sBUEm8SE8Cv4mKCAEjKWVESSIIKUxnMQAnB1CL+VCL+lCL+1CL/FCL/VCL/lCL/1AqUIv4UEwWK0sBUEm8SE8Cv4mKAgExACMnBWVEEkSL/hcWK0xQSb5ISYFaWxREI4v/FyISQQAHiwGBMluMAosCQQAUsYsBVwAgiwKyCLIHIrIQIQSyAbOLAScGXFqLAEm8SEy/iwIWjACJigIBi/4XMQBMFitMUL5AAAQqjACJiwFXACCLABNBAAQqjACJiwGBWltAAAQqjACJJwaMAImKAQGL/xcWK0xQvkiJigEBI4AASSNHAillRCKLBosFDEEAVosGFitMUEmMAL5FAYsEjAKLA4wBQQAuiwC+SFcAIIv/EosEjAKLA4wBQQAWiwMiCIwDiwRJjAJAAASLBowCiwOMAUIAAIsCjASLAYwDiwYiCIwGQv+iiwMWiwQWUIwAiSMpZUQiCRaJigQBi/wXJAqL/RclCiQIi/4XJAiL/xclCiQITwNPAwtPAgsLgcCEPQpJIQQMQQAEIQSMAIsAFkyJigEBi/8XFitMUEm+QAAEKowAiTEAiwFXACATQQAEKowAiYsBgVpbIhJBAAQqjACJiwC8SCcGjACJIycEZUQjJwVlRCMpZUQWTgJQTFCJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}